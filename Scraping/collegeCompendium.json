{
  "version": "3",
  "featured": [
    {
      "id": "mit-Spring-6.046J",
      "title": "6.046J: Design and Analysis of Algorithms",
      "source": "MIT",
      "year": "Spring 2015",
      "url": "http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/index.htm",
      "desc": "This is an intermediate algorithms course with an emphasis on teaching techniques for the design and analysis of efficient algorithms, emphasizing methods of application. Topics include divide-and-conquer, randomization, dynamic programming, greedy algorithms, incremental improvement, complexity, and cryptography.",
      "tags": [
        "6.046J"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.851",
      "title": "6.851: Advanced Data Structures",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "http://courses.csail.mit.edu/6.851/spring14/index.html",
      "desc": "Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures:",
      "tags": [
        "6.851"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Fall-6.854",
      "title": "6.854: Advanced Algorithms",
      "source": "MIT",
      "year": "Fall 2020",
      "url": "http://courses.csail.mit.edu/6.854/current/",
      "desc": "This course is designed to be a capstone course in algorithms that surveys some of the most powerful algorithmic techniques and key computational models. It aims to bring the students up to the level where they can read and understand research papers.",
      "tags": [
        "6.854"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "caltech-Spring-CS156",
      "title": "CS156: Learning from Data",
      "source": "Caltech",
      "year": "Spring 2012",
      "url": "https://work.caltech.edu/telecourse.html",
      "desc": "This is an introductory course in machine learning (ML) that covers the basic theory, algorithms, and applications. ML is a key technology in Big Data, and in many financial, medical, commercial, and scientific applications.",
      "tags": [
        "CS156"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-459-Fall",
      "title": "15-459: Quantum Computation and Information at CMU",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5qLskC6xQ24JpMwOAeJz",
      "desc": "Covers the basics of quantum computing, with a little bit of quantum information theory at the end.",
      "tags": [
        "15-459"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "harvard-Fall-CS224",
      "title": "CS224: Advanced Algorithms",
      "source": "Harvard",
      "year": "Fall 2014",
      "url": "http://people.seas.harvard.edu/~minilek/cs224/fall14/index.html",
      "desc": "An algorithm is a well-defined procedure for carrying out some computational task. Typically the task is given, and the job of the algorithmist is to find such a procedure which is efficient, for example in terms of processing time and/or memory consumption. CS 224 is an advanced course in algorithm design, and topics we will cover include the word RAM model, data structures, amortization, online algorithms, linear programming, semidefinite programming, approximation algorithms, hashing, randomized algorithms, fast exponential time algorithms, graph algorithms, and computational geometry.",
      "tags": [
        "CS224"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS442",
      "title": "CS442: Principles of Programming Languages",
      "source": "Waterloo",
      "year": "Winter 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs442",
      "desc": "CS442 is rightly named: The principles of programming languages. This course covers the ideas underpinning programming languages, by covering the formal, mathematical model behind programming languages as calculi, and then discussing many programming language paradigms, and how these paradigms affect both the formal semantics and the implementation of language interpreters, compilers, and virtual machines.",
      "tags": [
        "CS442"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6120",
      "title": "CS6120: Advanced Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6120",
      "desc": "This is a hands-on course about implementing programming languages. It covers intermediate representations, classic optimization, runtime systems, and more advanced techniques such as parallelization, just-in-time compilation, and garbage collection. Course work consists of reading and discussing both classic and modern research papers and implementation projects based on the LLVM compiler infrastructure.",
      "tags": [
        "CS6120"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP15",
      "title": "COMP15: Data Structures",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/15",
      "desc": "A second course in computer science. Data structures and algorithms are studied through major programming projects in the C++ programming language. Topics include linked lists, trees, graphs, dynamic storage allocation, and recursion.",
      "tags": [
        "COMP15"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS521",
      "title": "CIS521: Artificial Intelligence",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "http://artificial-intelligence-class.org/lectures.html#now",
      "desc": "This course investigates algorithms to implement resource-limited knowledge-based agents which sense and act in the world. Topics include, search, machine learning, probabilistic reasoning, natural language processing, knowledge representation and logic. After a brief introduction to the language, programming assignments wil l be in Python.",
      "tags": [
        "CIS521"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS419:",
      "title": "CS419: Scientific Visualization",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs519/fa2020/",
      "desc": "Visualization techniques useful in analysis of engineering and scientific data. Physical models; methods of computational science; two- and three-dimensional data types; visual representation schemes for scalar, vector, and tensor data; isosurface and volume visualization methods; visual monitoring; interactive steering",
      "tags": [
        "CS419"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0530:",
      "title": "CSCI0530: Coding the Matrix: an Introduction to Linear Algebra for Computer Science",
      "source": "Brown",
      "year": "Fall 2017",
      "url": "http://cs.brown.edu/courses/csci0530/current/index.htm",
      "desc": "The aim of this course is to provide students interested in computer science an introduction to vectors and matrices and their use in CS applications. The course will be driven by applications from areas chosen from among: combinatorial optimization, computer vision, cryptography, game theory, graphics, information retrieval and web search, maching learning, and scientific visualization. For example, students will learn Google's PageRank method for ranking web pages. This course satisfies the linear algebra requirement for the Computer Science Sc.B.and the Applied-Math/CS Sc.B.",
      "tags": [
        "CSCI0530"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 142: Computer Programming I",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse142/20sp/",
      "desc": "This course provides an introduction to computer science using the Java programming language. CSE142 is primarily a programming course, but the focus is on the problem solving techniques common in computer science. No prior programming experience is assumed, although students should know the basics of using a computer (e.g., using a web browser and word processing program) and should be competent with math through Algebra I. Students with significant prior programming experience should consider skipping cse142 and taking cse143 (we allow students to do so without any special permission)",
      "tags": [
        "CSE142"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 170: Efficient Algorithms and Intractable Problems",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs170.org/",
      "desc": "Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.",
      "tags": [
        "CS17"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-110-Spring",
      "title": "15-110: Principles of Computing",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://cs-cmuq.github.io/110-www/#main",
      "desc": "The course will take the student along the way that starts from a complex, possibly large problem to solve, and then move step by step to its abstraction, to its formalization into an algorithmic recipe, to the encoding of the algorithm using the constructs of the python language, to the run-time execution and error correction of the programming code, to the efficiency analysis of the developed algorithm and code.",
      "tags": [
        "15-110"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-10-708-Spring",
      "title": "10-708: Probabilistic Graph Models",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://sailinglab.github.io/pgm-spring-2019/",
      "desc": "Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides an unified view for this wide range of problems, enables efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models.",
      "tags": [
        "10-708"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    }
  ],
  "courses": [
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9A: MATLAB for Programmers",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/matlab/calendar",
      "desc": "Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.",
      "tags": [
        "CS9A"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9C: C for Programmers",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/c/calendar",
      "desc": "Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.",
      "tags": [
        "CS9C"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9E: Productive Use of the UNIX Environment",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/unix/calendar",
      "desc": "Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.",
      "tags": [
        "CS9E"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9F: C++ for Programmers",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/cpp/calendar",
      "desc": "Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.",
      "tags": [
        "CS9F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9G: JAVA for Programmers",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/java/calendar",
      "desc": "Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.",
      "tags": [
        "CS9G"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 9H: Python for Programmers",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://selfpaced.bitbucket.io/#/python/calendar",
      "desc": "Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.",
      "tags": [
        "CS9H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 10: The Beauty and Joy of Computing",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs10.org/sp21/",
      "desc": "An introductory course for students with minimal prior exposure to computer science. Prepares students for future computer science courses and empowers them to utilize programming to solve problems in their field of study. Presents an overview of the history, great principles, and transformative applications of computer science, as well as a comprehensive introduction to programming. T",
      "tags": [
        "CS10"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Summer-CS",
      "title": "CS 61A: Structure and Interpretation of Computer Programs",
      "source": "Berkeley",
      "year": "Summer 2021",
      "url": "https://cs61a.org/",
      "desc": "CS 61A concentrates on the idea of abstraction, allowing the programmer to think in terms appropriate to the problem rather than in low-level operations dictated by the computer hardware.",
      "tags": [
        "CS61"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 61B: Data Structures",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://sp21.datastructur.es/",
      "desc": "The CS 61 series is an introduction to Computer Science, with particular emphasis on software and machines from a programmer’s point of view. CS 61A covered high-level approaches to problem-solving, providing you with a variety of ways to organize solutions to programming problems as compositions of functions, collections of objects, or sets of rules. In CS 61B, we move to a somewhat more detailed (and to some extent, more basic) level of programming.",
      "tags": [
        "CS61"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 61C: Great Ideas in Computer Architecture (Machine Structures)",
      "source": "Berkeley",
      "year": "Summer 2021",
      "url": "https://cs61c.org/su21/",
      "desc": "The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.",
      "tags": [
        "CS61"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 70: Discrete Math and Probability",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "http://www.eecs70.org/",
      "desc": "Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.",
      "tags": [
        "CS70"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 88: Computational Structures in Data Science",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs88-website.github.io/sp21/",
      "desc": "Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.",
      "tags": [
        "CS88"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 152. Computer Architecture and Engineering",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://inst.eecs.berkeley.edu/~cs152/sp21/",
      "desc": "Instruction set architecture, microcoding, pipelining (simple and complex). Memory hierarchies and virtual memory. Processor parallelism: VLIW, vectors, multithreading. Multiprocessors.",
      "tags": [
        "CS15"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 161: Computer Security",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://sp21.cs161.org/",
      "desc": "Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.",
      "tags": [
        "CS16"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 162: Operating Systems and Systems Programming",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://inst.eecs.berkeley.edu/~cs162/sp21/",
      "desc": "Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.",
      "tags": [
        "CS16"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 164: Programming Languages and Compilers",
      "source": "Berkeley",
      "year": "Fall 2020",
      "url": "https://inst.eecs.berkeley.edu/~cs164/fa20/",
      "desc": "Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.",
      "tags": [
        "CS16"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 168: Introduction to the Internet: Architecture and Protocols",
      "source": "Berkeley",
      "year": "Spring 2020",
      "url": "http://cs168.io/",
      "desc": "This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).",
      "tags": [
        "CS16"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 170: Efficient Algorithms and Intractable Problems",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs170.org/",
      "desc": "Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.",
      "tags": [
        "CS17"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 172: Computability and Complexity",
      "source": "Berkeley",
      "year": "Fall 2006",
      "url": "https://people.eecs.berkeley.edu/~sseshia/172/f06/",
      "desc": "Specific topics include: Finite automata, Pushdown automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook's theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.",
      "tags": [
        "CS17"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 174: Combinatorics and Discrete Probability",
      "source": "Berkeley",
      "year": "Spring 2008",
      "url": "https://inst.eecs.berkeley.edu/~cs174/sp08/",
      "desc": "Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev's inequality, Chernov bounds. Birthday paradox, coupon collector's problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.",
      "tags": [
        "CS17"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 182: Neural Basis of Thought and Language",
      "source": "Berkeley",
      "year": "Spring 2008",
      "url": "https://inst.eecs.berkeley.edu/~cs182/sp08/",
      "desc": "Much of the course will focus on The Neural Theory of Language (NTL), which seeks to answer these questions in terms of architecture and mechanism, using models and simulations of language and learning phenomena. The focus is less on where such functions are located in the brain than on how neural systems can carry out the computations necessary to characterize specific concepts, such as spatial relations concepts, aspectual concepts (used in structuring events), abstract metaphorical concepts, and so on.",
      "tags": [
        "CS18"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 184: Computer Graphics and Imaging",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs184.eecs.berkeley.edu/sp21",
      "desc": "Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.",
      "tags": [
        "CS18"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 186: Introduction to Database Systems",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://cs186berkeley.net/",
      "desc": "Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.",
      "tags": [
        "CS18"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 188: Introduction to Artificial Intelligence",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://inst.eecs.berkeley.edu/~cs188/sp21/",
      "desc": "Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.",
      "tags": [
        "CS18"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 189/289A: Introduction to Machine Learning",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://people.eecs.berkeley.edu/~jrs/189/",
      "desc": "Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.",
      "tags": [
        "CS18"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 194-16 Introduction to Data Science",
      "source": "Berkeley",
      "year": "Spring 2014",
      "url": "http://amplab.github.io/datascience-sp14/",
      "desc": "Organizations use their data for decision support and to build data-intensive products and services. The collection of skills required by organizations to support these functions has been grouped under the term Data Science. This course will attempt to articulate the expected output of Data Scientists and then equip the students with the ability to deliver against these expectations. The assignments will involve web programming, statistics, and the ability to manipulate data sets with code.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 194-23: The Art and Science of Digital Photography",
      "source": "Berkeley",
      "year": "Spring 2013",
      "url": "https://inst.eecs.berkeley.edu/~cs194-23/sp13/",
      "desc": "This course will explore the artistic aspects, scientific foundations, and techniques of digital photography with the goals of enabling students to expand their knowledge of photography as an art form, to develop a deeper and broader understanding of the scientific basis of photography, and to improve their photographic technique.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 194-24: Advanced Operating Systems Structures and Implementation",
      "source": "Berkeley",
      "year": "Spring 2013",
      "url": "https://inst.eecs.berkeley.edu/~cs194-24/sp13/",
      "desc": "The purpose of this course is to teach the design of Operating Systems through both academic study and by making modifications to a modern OS (Linux). Topics we will cover include concepts of operating systems and systems programming; utility programs, subsystems, multiple-program systems; processes, interprocess communication, and synchronization; memory allocation, segmentation, paging; loading and linking, libraries; resource allocation, scheduling, performance evaluation; I/O systems, storage devices, file systems; basic networking, protocols, and distributed file systems, protection, security, and privacy.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 194-26/294-26: Image Manipulation, Computer Vision and Computational Photography",
      "source": "Berkeley",
      "year": "Spring 2020",
      "url": "https://inst.eecs.berkeley.edu/~cs194-26/sp20/",
      "desc": "The aim of this advanced undergraduate course is to introduce students to computing with visual data (images and video). We will cover acquisition, representation, and manipulation of visual information from digital photographs (image processing), image analysis and visual understanding (computer vision), and image synthesis (computational photography). Key algorithms will be presented, ranging from classical (e.g. Gaussian and Laplacian Pyramids) to contemporary (e.g. ConvNets, GANs), with an emphasis on using these techniques to build practical systems. This hands-on emphasis will be reflected in the programming assignments, in which students will have the opportunity to acquire their own images and develop, largely from scratch, the image analysis and synthesis tools for solving applications.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 194/294-126: Software Defined Printed Circuit Boards",
      "source": "Berkeley",
      "year": "Fall 2016",
      "url": "https://inst.eecs.berkeley.edu/~cs194-126/fa16/",
      "desc": "This class introduces the design and fabrication of PCBs and explores software compilation of high level descriptions of embedded systems into circuit boards and software ready to be milled on desktop mills. This software defined hardware technique dramatically raises the level of description making easy things easy and hard things much more possible, and most importantly makes board-level embedded systems design more accessible those with a more computer science background. Topics include: circuit basics, microcontrollers, embedded programming, milling, assembly and soldering of PCBs. The class is half lecture/labs and half instructor advised student projects.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 194-6: Digital Systems Project Laboratory",
      "source": "Berkeley",
      "year": "Fall 2008",
      "url": "https://inst.eecs.berkeley.edu/~cs194-6/fa08/",
      "desc": "Projects will create versatile medium-scale hardware IP with associated testbenches, for applications compatible with RAMP Gold. Application areas include CPU and GPU design, networks on chip, audio and video processing -- other ideas are welcome.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 195: Social Implications of Computong",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://inst.eecs.berkeley.edu/~cs195/sp21/",
      "desc": "Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.",
      "tags": [
        "CS19"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 250: VLSI Systems Design",
      "source": "Berkeley",
      "year": "Fall 2020",
      "url": "https://inst.eecs.berkeley.edu/~cs250",
      "desc": "Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.",
      "tags": [
        "CS25"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 261: Security in Computer Systems",
      "source": "Berkeley",
      "year": "Fall 2018",
      "url": "https://inst.eecs.berkeley.edu/~cs261/fa18/",
      "desc": "Graduate survey of modern topics in computer systems security, including secure messaging, blockchain and cryptocurrencies, hardware security, secure federated computation, language-based security, anonymous communication, privacy and others.",
      "tags": [
        "CS26"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 261N: Internet/Network Security",
      "source": "Berkeley",
      "year": "Spring 2020",
      "url": "https://www.icir.org/vern/cs261n/",
      "desc": "This class aims to provide a thorough grounding in network security suitable for those interested in conducting research in the area, as well as students more generally interested in either security or networking. We will also look at broader issues relating to Internet security for which networking plays a role. The syllabus has overlap with portions of the SEC prelim.",
      "tags": [
        "CS26"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 274: Computational Geometry",
      "source": "Berkeley",
      "year": "Spring 2019",
      "url": "https://people.eecs.berkeley.edu/~jrs/274/",
      "desc": "Constructive problems in computational geometry: convex hulls, triangulations, Voronoi diagrams, arrangements of hyperplanes; relationships among these problems. Search problems: advanced data structures; subdivision search; various kinds of range searches. Models of computation; lower bounds.",
      "tags": [
        "CS27"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-MIT",
      "title": "MIT 6.875/CS 276: Graduate Cryptography",
      "source": "Berkeley",
      "year": "Fall 2020",
      "url": "https://inst.eecs.berkeley.edu/~cs276/fa20/",
      "desc": "The last few years have witnessed dramatic developments in the foundations of cryptography as well as its applications to real-world privacy and security problems. On the one hand, security and privacy are of paramount importance in the age of big data and mass surveillance. On the other hand, cryptography is abuzz with solutions to long-standing open problems such as fully homomorphic encryption and software obfuscation that use the abundance of data for public good without compromising security. The course will explore both the rich theory of cryptography as well as its real-world applications.",
      "tags": [
        "MIT6"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 285: Solid Modeling",
      "source": "Berkeley",
      "year": "Fall 2011",
      "url": "https://people.eecs.berkeley.edu/~sequin/CS285/",
      "desc": "In Fall 2011, CS285 will emphasize procedural modeling, as is appropriate for objects of high complexity. We will consider the whole design process for such objects, from a conceptual vision to a concrete computer-based description that is suitable for use in virtual worlds or for physical prototyping and manufacturing. The course will cover various modeling techniques, including volume representations, boundary representations, instantiation and Boolean combinations of shapes, as well as procedural generation, ranging from simple sweeps to L-systems. We will also discuss effective data structures for representing various types of objects, as well as the process of making models from acquired data, e.g., via 3D scanners. In the end, we will use our Fused Deposition Modeling machine to actually fabricate some objects designed in this class.",
      "tags": [
        "CS28"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-CS",
      "title": "CS 287: Advanced Robotics",
      "source": "Berkeley",
      "year": "Fall 2009",
      "url": "https://people.eecs.berkeley.edu/~pabbeel/cs287-fa09/",
      "desc": "Control: underactuation, controllability, Lyapunov, dynamic programming, LQR, feedback linearization, MPC. Estimation: Bayes filters, KF, EKF, UKF, particle filter, occupancy grid mapping, EKF slam, GraphSLAM, SEIF, FastSLAM. Manipulation and grasping: force closure, grasp point selection, visual servo-ing, more sub-topics tbd. Reinforcement learning: value iteration, policy iteration, linear programming, Q learning, TD, value function approximation, Sarsa, LSTD, LSPI, policy gradient, inverse reinforcement learning, reward shaping, hierarchical reinforcement learning, inference based methods, exploration vs. exploitation",
      "tags": [
        "CS28"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-CS",
      "title": "CS 288: An Artificial Intelligence Approach to Natural Language Processing",
      "source": "Berkeley",
      "year": "Spring 2020",
      "url": "https://cal-cs288.github.io/sp20/",
      "desc": "This course will explore current statistical techniques for the automatic analysis of natural (human) language data. The dominant modeling paradigm is corpus-driven statistical learning. This term, we are introducing a few new projects to give increased hands-on experience with a greater variety of NLP tasks and commonly used techniques.",
      "tags": [
        "CS28"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "berkeley-Fall-EECS",
      "title": "EECS 16A: Designing Information Devices and Systems I",
      "source": "Berkeley",
      "year": "Fall 2020",
      "url": "https://inst.eecs.berkeley.edu/~eecs16a/fa20/index.html#schedule",
      "desc": "The EECS 16AB series (Designing Information Devices and Systems) is a pair of introductory-level courses introducing students to EECS. The courses have a particular emphasis on how to build and understand systems interacting with the world from an informational point of view. Mathematical modeling is an important theme throughout these courses, and students will learn many conceptual tools along the way. These concepts are rooted in specific application domains. Students should understand why they are learning something.",
      "tags": [
        "EECS16"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-EECS",
      "title": "EECS 16B: Designing Information Devices and Systems II",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://eecs16b.org/",
      "desc": "The EECS 16AB series (Designing Information Devices and Systems) is a pair of introductory-level courses introducing students to EECS. The courses have a particular emphasis on how to build and understand systems interacting with the world from an informational point of view. Mathematical modeling is an important theme throughout these courses, and students will learn many conceptual tools along the way. These concepts are rooted in specific application domains. Students should understand why they are learning something.",
      "tags": [
        "EECS16"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Fall-EECS",
      "title": "EECS 127: Optimization Models in Engineering",
      "source": "Berkeley",
      "year": "Fall 2020",
      "url": "https://inst.eecs.berkeley.edu/~ee127/fa20/#schedule",
      "desc": "This course offers an introduction to optimization models and their applications, ranging from machine learning and statistics to decision-making and control, with emphasis on numerically tractable problems. We will appreciate the role of duality in optimization. We will encounter several widely used classes of convex optimization problems, such as LP, QP, GP, SOCP and SDP.",
      "tags": [
        "EECS12"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "berkeley-Spring-EECS",
      "title": "EECS 151: Introduction to Digital Design and Integrated Circuits",
      "source": "Berkeley",
      "year": "Spring 2021",
      "url": "https://inst.eecs.berkeley.edu/~eecs151/sp21/",
      "desc": "An introduction to digital and system design. The material provides a top-down view of the principles, components, and methodologies for large scale digital system design. The underlying CMOS devices and manufacturing technologies are introduced, but quickly abstracted to higher-levels to focus the class on design of larger digital modules for both FPGAs (field programmable gate arrays) and ASICs (application specific integrated circuits). The class includes extensive use of industrial grade design automation and verification tools for assignments, labs and projects. The class has two lab options: ASIC Lab (EECS 151LA) and FPGA Lab (EECS 151LB). Students must enroll in at least one of the labs concurrently with the class.",
      "tags": [
        "EECS15"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE120:",
      "title": "CSE120: Computer Science Principles",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse120/20wi/",
      "desc": "Introduces fundamental concepts of computer science and computational thinking. Includes logical reasoning, problem solving, data representation, abstraction, the creation of “digital artifacts” such as Web pages and programs, managing complexity, operation of computers and networks, effective Web searching, ethical, legal and social aspects of information technology.",
      "tags": [
        "CSE120"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 142: Computer Programming I",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse142/20sp/",
      "desc": "This course provides an introduction to computer science using the Java programming language. CSE142 is primarily a programming course, but the focus is on the problem solving techniques common in computer science. No prior programming experience is assumed, although students should know the basics of using a computer (e.g., using a web browser and word processing program) and should be competent with math through Algebra I. Students with significant prior programming experience should consider skipping cse142 and taking cse143 (we allow students to do so without any special permission)",
      "tags": [
        "CSE142"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 143: Computer Programming II",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse143/20sp/",
      "desc": "While CSE 142 focused on control issues (loops, conditionals, methods, parameter passing, etc.), CSE 143 focuses on data issues. Topics include: abstract data types (ADTs), lists, stacks, queues, linked lists, binary trees, recursion, interfaces, inheritance, and encapsulation. The course also introduces the notion of complexity and performance trade-offs in examining classic algorithms such as sorting and searching and classic data structures such as lists, sets, and maps. The course will include a mixture of implementing data structure and using components from the Java Collections Framework.",
      "tags": [
        "CSE143"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 160: Data Programming",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse160/20wi/",
      "desc": "CSE 160, “Introduction to Data Programming”, is an introductory programming class that meets this need. You will learn to write small programs in the Python programming language to solve real-world scientific and engineering problems. This will be useful in your classes, your research, and your jobs.",
      "tags": [
        "CSE160"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 163: Intermediate Data Programming",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse163/20sp/",
      "desc": "This course teaches intermediate data programming. It is a follow on to CSE142 (Computer programming I) or CSE160 (Data Programming). The course complements CSE143, which focuses more deeply on fundamental programming concepts and the internals of data structures. In contrast, CSE163 emphasizes the efficient use of those concepts for data programming.",
      "tags": [
        "CSE163"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 180: Introduction to Data Science",
      "source": "Washington",
      "year": "Spring 2019",
      "url": "https://courses.cs.washington.edu/courses/cse180/19sp/",
      "desc": "We live in a world that is increasingly driven by decisions based on analysis and inference on diverse data sets. This course will give you an introduction to the conceptual knowledge and practical training for doing data science in this environment.",
      "tags": [
        "CSE180"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 311: Foundations of Computing I",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse311/20sp/",
      "desc": "CSE 311 examines fundamentals of logic, set theory, induction, and algebraic structures with applications to computing; finite state machines; and limits of computability. Prerequisite: CSE 143; either MATH 126 or MATH 136.",
      "tags": [
        "CSE311"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 331: Software Design and Implementation",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse331/20sp/",
      "desc": "The aim of this course is to help students write programs of higher quality and increased complexity. This requires creating software that is correct, easy to change, easy to understand, and easy to scale. The course covers principled approaches to achieving each of these.",
      "tags": [
        "CSE331"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 332: Data Structures and Parallelism",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse332/20sp/",
      "desc": "Covers abstract data types and structures including dictionaries, balanced trees, hash tables, priority queues, and graphs; sorting; asymptotic analysis; fundamental graph algorithms including graph search, shortest path, and minimum spanning trees; concurrency and synchronization; and parallelism.",
      "tags": [
        "CSE332"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 333: Systems Programming",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse333/20sp/",
      "desc": "This course is designed to give you substantial experience with programming. There will be four major programming assignments during the quarter; the assignments are designed to build on top of each other, so it is in your interest to make sure that earlier assignments are rock-solid.",
      "tags": [
        "CSE333"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 340: Interaction Programming",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse340/20sp/",
      "desc": "Interactive technology is changing society. Some of today’s interfaces are used by a billion people at a time. Almost everything we create is created for people to use, through user interfaces. We will learn about interactive systems, including programming paradigms and design of event handling, layout, undo, accessibility and context awareness.",
      "tags": [
        "CSE340"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 341: Programming Languages",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse341/20sp/",
      "desc": "Successful course participants will: Internalize an accurate understanding of what functional and object-oriented programs mean, develop the skills necessary to learn new programming languages quickly, master many specific language concepts such that they can recognize them in strange guises, learn to evaluate the power and elegance of programming languages and their constructs, and attain reasonable proficiency in the ML, Racket, and Ruby languages (and, as a by-product, become more proficient in languages they already know)",
      "tags": [
        "CSE341"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 344: Introduction to Data Management",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://sites.google.com/cs.washington.edu/cse-344-20sp/home",
      "desc": "Description: In this course, we will introduce the basics of modern data management. You will learn about schema design, data modeling, query languages, building database applications, transactions, and many other topics. Through lectures, sections, and assignments, you will learn about and understand how real-world data management systems work, and how they touch upon many aspects of our daily lives.",
      "tags": [
        "CSE344"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 351: The Hardware/Software Interface",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse351/20sp/",
      "desc": "This course should develop students' sense of what really happens when software runs — and that this question can be answered at several levels of abstraction, including the hardware architecture level, the assembly level, the C programming level, and the Java programming level. The core around which the course is built is C, assembly, and low-level data representation, but this is connected to higher levels (roughly how basic Java could be implemented), lower levels (the general structure of a processor), and the role of the operating system (but not how the operating system is implemented).",
      "tags": [
        "CSE351"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 369: Introduction to Digital Design",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse369/20sp/",
      "desc": "Introduces the implementation of digital logic and its specification and simulation. Covers Boolean algebra; combinational circuits including arithmetic circuits and regular structures; sequential circuits including finitestate-machines; and use of field-programmable gate arrays (FPGAs). Emphasizes simulation, high-level specification, and automatic synthesis techniques. Prerequisite: CSE 311.",
      "tags": [
        "CSE369"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-EE/CSE",
      "title": "EE/CSE 371: Design of Digital Circuits and Systems",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse371/20sp/",
      "desc": "Provides a theoretical background in, and practical experience with, tools, and techniques for modeling complex digital systems with the Verilog hardware description language, maintaining signal integrity, managing power consumption, and ensuring robust intra- and inter-system communication. Prerequisite: either E E 205 or E E 215; either E E 271 or CSE 369. Offered: jointly with E E 371.",
      "tags": [
        "EE/CSE371"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 373: Data Structures and Algorithms",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse373/20sp/",
      "desc": "The primary focus of this class is on gaining a strong theoretical and conceptual understanding of common data structures and algorithms as well as how they can be practically applied within larger programming projects.",
      "tags": [
        "CSE373"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 374: Programming Concepts and Tools",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse374/20sp/",
      "desc": "There is an amorphous set of things computer scientists know about and novice programmers don’t. Knowing them empowers you in computing, lessens the “friction” of learning in other classes, and makes you a mature programmer. The goal is to give you a sense of what's out there and what you can expect – and how you can learn more later when you need to.",
      "tags": [
        "CSE374"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 391: System and Software Tools",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse391/20sp/",
      "desc": "In this course you will learn about topics such as: basics of navigating a Unix/Linux environment; setting up a basic Unix/Linux system, using a Unix command-line shell, Unix file system; file and directory management; processes and process management, and permissions, groups, and users",
      "tags": [
        "CSE391"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 401/M501: Compiler Construction",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse401/20sp/",
      "desc": "Fundamentals of compilers and interpreters; symbol tables, lexical analysis, syntax analysis, semantic analysis, code generation, and optimization for general purpose programming languages. No credit to students who have taken 413. Credits: 4.",
      "tags": [
        "CSE401"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 402: Design and Implementation of Domain-Specific Languages",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse402/20wi/",
      "desc": "You will learn how to design and implement a domain-specific language. We will cover several strategies for implementing a DSL, and practice most of them in programming assignments.  All told, you will implement a compiler, an interpreter, a parser, and an optimizer.",
      "tags": [
        "CSE402"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 403: Software Engineering",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse403/20sp/",
      "desc": "In this course, students learn and gain practical experience with software engineering principles, techniques, and tools. Topics in this course include requirements analysis, specification, design, abstraction, programming style, testing, maintenance, communication, teamwork, and software project management. The practical experience centers on a quarter-long team project, in which a software development project is carried through all the stages of the software life cycle. Particular emphasis is placed on communication skills and on developing maintainable software. In-class activities further provide a hands-on experience in using state-of-the-art techniques and tools.",
      "tags": [
        "CSE403"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 410: Computer Systems",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse410/20wi/",
      "desc": "CSE 410 is an undergraduate course on computer systems, spanning from processor organization through the operating system. Assignments will be a combination of reading, paper and pencil, and software implementation. We will use, but not master, RISC-V assembler, C, and possibly Python, as well as associated Linux tools. While programming experience is required, no experience with these languages is necessary.",
      "tags": [
        "CSE410"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 414: Introduction to Data Management",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://sites.google.com/cs.washington.edu/cse414-20sp/",
      "desc": "This seminar introduces database management systems and techniques that use such systems; data models, query languages, database tuning and optimization, data warehousing, and parallel processing. Intended for undergraduate students who are not CSE-majors.",
      "tags": [
        "CSE414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 415: Introduction to Artificial Intelligence",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse415/20wi/",
      "desc": "This course begins with a discussion of what \"artificial intelligence\" means and how it can be useful. Next is a grounding in state-space search, problem formulation and solving. We then consider state-space search in the context of game playing, which then leads to alpha-beta pruning, expectimax search and the modeling of uncertainty. After that, we focus primarily on machine learning, starting with methods for reasoning under uncertainty. We cover reinforcement learning in Markov Decision Processes, perceptron learning, and deep learning. We touch briefly on ethical issues and the future of AI.",
      "tags": [
        "CSE415"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE/STAT",
      "title": "CSE/STAT 416: Introduction to Machine Learning",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse416/20sp/",
      "desc": "Provides practical introduction to machine learning. Modules include regression, classification, clustering, dimensionality reduction with a focus on an intuitive understanding grounded in real-world applications. Intelligent applications are designed and used to make predictions on large, complex datasets.",
      "tags": [
        "CSE/STAT416"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 417: Algorithms and Computational Complexity",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse417/20wi/lectures/index.html",
      "desc": "Design and analysis of algorithms and data structures. Efficient algorithms for manipulating graphs and strings. Fast Fourier Transform. Models of computation, including Turing machines. Time and space complexity. NP-complete problems and undecidable problems",
      "tags": [
        "CSE417"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 421: Introduction to Algorithms",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse421/20sp/",
      "desc": "Techniques for design of efficient algorithms. Methods for showing lower bounds on computational complexity. Particular algorithms for sorting, searching, set manipulation, arithmetic, graph problems, pattern matching.",
      "tags": [
        "CSE421"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 427: Computational Biology",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse427/20wi/",
      "desc": "In this course, we will discuss ML approaches, with an emphasis on those that address the black-box nature of ML, to solve a wide variety of problems in biology and medicine. Class projects will provide opportunities to solve real-world research problems in biology and medicine.",
      "tags": [
        "CSE427"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 440: Introduction to HCI",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse440/20wi/",
      "desc": "This course provides an introduction to human-computer interaction and the design process. Students will learn methods and skills for designing and prototyping interactive systems. The course covers a design process from the initial formulation of a design problem to creation of digital prototypes. The course structure is a mix of lectures, classroom activities, and design critiques by peers and course staff. The course is overwhelmingly organized around a group project, in which students:",
      "tags": [
        "CSE440"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 441: Advanced HCI: User Interface Design, Prototyping, and Evaluation",
      "source": "Washington",
      "year": "Spring 2013",
      "url": "https://courses.cs.washington.edu/courses/cse441/13sp/",
      "desc": "Advanced Human-Computer Interaction (HCI) theory and techniques.The primary objectives of the course are for students to learn advanced ideas in human-computer interaction (HCI) and to gain experience with advanced techniques in user interface prototyping and evaluation. Students will also learn basic design principles by applying each principle individually and gaining feedback in a studio style critique.",
      "tags": [
        "CSE441"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 442: Data Visualization",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse442/20wi/",
      "desc": "In this course we will study techniques and algorithms for creating effective visualizations based on principles from graphic design, perceptual psychology, and cognitive science. Students will learn how to design and build interactive visualizations for the web, using the D3.js (Data-Driven Documents) framework.",
      "tags": [
        "CSE442"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 444: Database Internals",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse444/20sp/",
      "desc": "Databases are at the heart of modern commercial application development. Their use extends beyond this to many other environments and domains where large amounts of data must be stored for efficient update, retrieval, and analysis. In the previous course, CSE 344, we learned how to use a variety of data management systems and we learned some basic data management principles. In this course, we will study the principles behind building data management systems. For the detailed list of topics and schedule, please see the course calendar.",
      "tags": [
        "CSE444"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 446: Machine Learning",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse446/20wi/",
      "desc": "This course will introduce the fundamental concepts and algorithms that enable computational artifacts to modify and improve their performance through experience. We will cover a variety of topics, including decision trees, logistic regression, support vector machines, ensemble methods, Bayesian methods, neural networks, clustering, and dimensionality reduction.",
      "tags": [
        "CSE446"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 447/547: Natural Language Processing",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse447/20wi/",
      "desc": "Methods for designing systems that usefully and/or intelligently process natural language text data. Language models, text categorization, syntactic and semantic analysis, machine translation. This course emphasizes algorithms and data-driven methods. Prerequisite: CSE 312 and CSE 332; recommended: MATH 308 ; CSE 446 is recommended before or concurrently.",
      "tags": [
        "CSE447"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 451: Operating Systems",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse451/20sp/",
      "desc": "CSE 451 is an undergraduate course on operating systems. During the course you will complete several labs, working in teams of two. Each lab will add a new feature to a primitive operating system called xk. At the end of this class you will be able to find your way around the source code of most operating systems, and more generally, be comfortable with systems software.",
      "tags": [
        "CSE451"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 452: Distributed Systems",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse452/20sp/",
      "desc": "Distributed systems have become central to many aspects of how computers are used, from web applications to e-commerce to content distribution. This senior-level course will cover abstractions and implementation techniques for the construction of distributed systems, including client server computing, the web, cloud computing, peer-to-peer systems, and distributed storage systems. Topics will include remote procedure call, preventing and finding errors in distributed programs, maintaining consistency of distributed state, fault tolerance, high availability, and scaling.",
      "tags": [
        "CSE452"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 455: Computer Vision",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse455/20sp/",
      "desc": "Introduction to image analysis and interpreting the 3D world from image data. Topics may include segmentation, motion estimation, image mosaics, 3D-shape reconstruction, object recognition, and image retrieval.",
      "tags": [
        "CSE455"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 457: Introduction to Computer Graphics",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse457/20sp/",
      "desc": "Introduction to computer image synthesis, modeling, and animation. Topics may include visual perception, displays and framebuffers, image processing, affine and projective transformations, hierarchical modeling, hidden surface elimination, shading, ray-tracing, anti-aliasing, texture mapping, curves, surfaces, particle systems, dynamics, character animation, and animation principles.",
      "tags": [
        "CSE457"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 469: Computer Arch I",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse469/20wi/",
      "desc": "Introduction to computer architecture. Assembly and machine language, microprocessor organization including control and datapath. Computer arithmetic. Memory systems and caching. Performance modeling of microprocessors.",
      "tags": [
        "CSE469"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 470: Computer Arch II",
      "source": "Washington",
      "year": "Spring 2019",
      "url": "https://courses.cs.washington.edu/courses/cse470/19sp/",
      "desc": "Advanced computer architecture. Performance evaluation and energy efficiency. Instruction set architectures. Instruction-level parallelism. Modern microprocessor micro-architecture. Thread-level parallelism. Cache coherency and memory consistency in shared-memory multiprocessors. Memory hierarchy. GPU architecture. Warehouse-scale computing. Trends in computer design.",
      "tags": [
        "CSE470"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 478: Autonomous Robotics",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse478/20wi/",
      "desc": "Mobile Robots delves into the building blocks of autonomous systems that operate in the wild. We will cover topics related to state estimation (bayes filtering, probabilistic motion and sensor models), control (feedback, Lyapunov, LQR, MPC), planning (roadmaps, heuristic search, incremental densification) and online learning. Students will be forming teams and implementing algorithms on 1/10th sized rally cars as part of their assignments. Concepts from all of the assignments will culminate into a final project with a demo on the rally cars. The course will involve programming in a Linux and Python environment along with ROS for interfacing to the robot.",
      "tags": [
        "CSE478"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 484/CSE M 584: Computer Security",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse484/20sp/",
      "desc": "Foundations of modern computer security, including software security, operating system security, network security, applied cryptography, human factors, authentication, anonymity, and web security.",
      "tags": [
        "CSE484"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 503: Software Engineering",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse503/20wi/",
      "desc": "Software is becoming ever more complex and difficult to understand, at the same time as it is used ever more pervasively. It is hopeless to understand how software systems work (or why they do not work!) without automated assistance. Programmers need tool assistance during design, implementation, testing, debugging, and modification (\"maintenance\"). This graduate course will investigate a variety of program analysis techniques that address these software engineering tasks. Topics include static analysis (e.g., abstract interpretation), dynamic analysis (e.g., testing and debugging), and probabilistic methods. While the course focuses on the design and implementation of program analysis tools, the material will be useful to anyone who wishes to improve his or her programming or understand the state of the art.",
      "tags": [
        "CSE503"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 505: Programming Lectures",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse505/20sp/",
      "desc": "Design and formal semantics of modern programming languages, includes functional and object-oriented languages.",
      "tags": [
        "CSE505"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 510: Advanced Topics in HCI",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse510/20sp/",
      "desc": "This course provides an introduction to forms of contribution several major areas of research in Human-Computer Interaction (HCI). It is based in a combination of readings and discussion, a small statistics lab, and a self-defined project. The course readings will require preparing reports on a combination of historic framing papers and more recent contributions. This will help you examine what the HCI community considers a research contribution across a variety of problems, thus preparing you to understand and make meaningful research contributions in these and other areas of HCI.",
      "tags": [
        "CSE510"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Winter-CSE",
      "title": "CSE 515: Statistical Methods in Computer Science",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse515/20wi/",
      "desc": "Introduction to the probabilistic and statistical techniques used in modern computer systems. Graphical models, probabilistic inference, statistical learning, sequential models, decision theory.",
      "tags": [
        "CSE515"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE",
      "title": "CSE 526: Cryptography",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse526/20sp/",
      "desc": "This course gives a comprehensive introduction to cryptography. The focus is on (1) understanding how existing tools work; (2) how to formalize the security goals they achieve, and (3) how to prove that they achieve these goals. The class will aim to be both of interest to theory students, as well as to a broader audience interested in using cryptography in a sound way. In partcular, a main objective is exposure to the paradigm of provable security which allows us to reason rigorously about cryptographic security.",
      "tags": [
        "CSE526"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE/NEUBEH",
      "title": "CSE/NEUBEH 528: Computational Neuroscience",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse528/20sp/",
      "desc": "This course provides an introduction to basic computational methods for understanding what nervous systems do and for determining how they function. We will explore the computational principles governing various aspects of vision, sensory-motor control, learning, and memory. Specific topics that will be covered include representation of information by spiking neurons, processing of information in neural circuits, and algorithms for adaptation and learning. We will make use of Matlab demonstrations and exercises to gain a deeper understanding of concepts and methods introduced in the course. (Prerequisites: Familiarity with basic concepts in calculus, differential equations, linear algebra, and probability theory).",
      "tags": [
        "CSE/NEUBEH528"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE531:",
      "title": "CSE531: Computational Complexity",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse531/20sp/",
      "desc": "We seek to give a rigorous mathematical framework that will enable us to answer some of these questions. Along the way, we shall encounter several interesting mathematical tools. Complexity theory has been around as an area for more than 50 years, but it is still in its infancy. It is notorious for generating the hardest open questions in computer science.",
      "tags": [
        "CSE531"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Winter-CSE544:",
      "title": "CSE544: Principles of Data Management",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse544/20wi/",
      "desc": "In this course we discuss principles of modern data management. We will cover the fundamentals of relational modeling and query languages (SQL, Relational Algebra, Datalog), advanced optimizations (including worst-case optimal algorithms and magic sets), the architecture of modern relational database systems (including parallel database systems and column-oriented database systems), and transactions.",
      "tags": [
        "CSE544"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Fall-CSE546:",
      "title": "CSE546: Machine Learning",
      "source": "Washington",
      "year": "Fall 2018",
      "url": "https://courses.cs.washington.edu/courses/cse546/18au/",
      "desc": "Machine learning explores the study and construction of algorithms that can learn from historical data and make inferences about future outcomes. This study is a marriage of algorithms, computation, and statistics so this class will be have healthy doses of each. The goals of this course are to provide a thorough grounding in the fundamental methodologies and algorithms of machine learning.",
      "tags": [
        "CSE546"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CS547:",
      "title": "CS547: Machine Learning for Big Data",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse547/20sp/",
      "desc": "One of the main goals of CS547 is to prepare you to apply state-of-the-art data mining tools and algorithms to an application. If you are interested in research, CS547 will also leave you well-qualified to do data mining research. The class's final project will offer you an opportunity to do exactly this.",
      "tags": [
        "CS547"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE549:",
      "title": "CSE549: High-Performance Computer Architecture",
      "source": "Washington",
      "year": "Spring 2014",
      "url": "https://courses.cs.washington.edu/courses/cse549/14sp/",
      "desc": "Algorithm design, software techniques, computer organizations for high-performance computing systems. Selected topics from: VLSI complexity for parallel algorithms, compiling techniques for parallel and vector machines, large MIMD machines, interconnection networks, reconfigurable systems, memory hierarchies in multiprocessors, algorithmically specialized processors, data flow architectures.",
      "tags": [
        "CSE549"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE562:",
      "title": "CSE562: Mobile Systems and Applications",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse562/20sp/",
      "desc": "Signal processing fundamentals, acoustic device and device-free tracking, physiological sensing using phones and speakers, IMU tracking and GPS localization, Wi-Fi localization and sensing, designing and building IoT device hardware, backscatter systems, mobile privacy and security, and robotics mobile systems",
      "tags": [
        "CSE562"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Winter-CSE564:",
      "title": "CSE564: Computer Security and Privacy",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse564/20wi/",
      "desc": "Computer systems play a critical role in modern society. Unfortunately, there exist individuals -- including vandals and professional criminals -- who wish to compromise the security and privacy of these computer systems. Computer security is the discipline dedicated to protecting computer systems and their users from the malicious actions of adversaries. This course is designed to bring participants to the forefront of modern computer security research, thereby giving students the foundations for advancing the state-of-the-art in the field. This course also targets individuals in other fields who wish to address security and privacy in their own research.",
      "tags": [
        "CSE564"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Spring-CSE571:",
      "title": "CSE571: Robotics",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse571/20sp/",
      "desc": "Overview of mobile robot control and sensing. Behavior-based control, world modeling, localization, navigation, and planning Probabilistic sensor interpretation, Bayers filters, particle filters. Projects: Program real robots to perform navigation tasks.",
      "tags": [
        "CSE571"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "washington-Winter-CSE573:",
      "title": "CSE573: Introduction to Artificial Intelligence",
      "source": "Washington",
      "year": "Winter 2020",
      "url": "https://courses.cs.washington.edu/courses/cse573/20wi/",
      "desc": "Introduction to computational models of thought and construction of intelligent information systems. Topics include search algorithms, data dependencies and truth-maintenance systems, approaches to knowledge representation, automated deduction, reasoning under uncertainty, and machine learning.",
      "tags": [
        "CSE573"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "washington-Spring-CSE576:",
      "title": "CSE576: Computer Vision",
      "source": "Washington",
      "year": "Spring 2020",
      "url": "https://courses.cs.washington.edu/courses/cse576/20sp/",
      "desc": "This class is a general introduction to computer vision. It covers standard techniques in image processing like filtering, edge detection, stereo, flow, etc. (old-school vision), as well as newer, machine-learning based computer vision.",
      "tags": [
        "CSE576"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0030:",
      "title": "CSCI0030: Introduction to Computation for the Humanities and Social Sciences",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci0030",
      "desc": "Introduces students to the use of computation for solving problems in the social sciences and the humanities. We will investigate a series of real-world problems taken from the news, from books such as Freakonomics, and from current research. Topics covered include data gathering, analysis, and visualization; web-based interfaces; algorithms; and scripting.",
      "tags": [
        "CSCI0030"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0040:",
      "title": "CSCI0040: Introduction to Scientific Computing and Problem Solving",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci0040/",
      "desc": "CSCI0040 provides an introduction to using computers to solve STEM (Science, Technology, Engineering and Mathematics) data analysis, visualization and simulation problems from engineering, neuroscience, biology, mathematics and finance. Students will access and analyze a number of \"real world\" data sets while becoming fluent MATLAB programmers. Other tools utilized may include Excel, Wolframalpha and Python.",
      "tags": [
        "CSCI0040"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0060:",
      "title": "CSCI0060: Practical Systems Skills",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci0060/index.html",
      "desc": "This class is an introduction to develop hands-on-computing skills necessary to comfortably work within a UNIX-like operating system. Topics include the shell, its filesystem, bash scripting, SSH, version control, as well as how to locally develop, deploy and publish a website.",
      "tags": [
        "CSCI0060"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0080:",
      "title": "CSCI0080: A First Byte of Computer Science",
      "source": "Brown",
      "year": "Spring 2017",
      "url": "http://cs.brown.edu/courses/csci0080",
      "desc": "Introduces non-CS concentrators to the academic discipline of computer science, its thought processes, and its relevance to other fields and modern life more generally. The target audience is students who are interested in learning more about what computer science is about and the ideas it has to offer tomorrow's citizens and scholars. Topics include the basics of computation and programming, a taste of theoretical computer science and algorithms, and an introduction to codes and artificial intelligence. Although students will learn to read and understand short programs, the course will not teach or require advanced programming skills.",
      "tags": [
        "CSCI0080"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0100:",
      "title": "CSCI0100: Data Fluency for All",
      "source": "Brown",
      "year": "Fall 2019",
      "url": "http://cs.brown.edu/courses/csci0100/",
      "desc": "This course introduces students to a variety of statistical and computational techniques that data scientists use to tell stories. The subject matter for such stories might range from the American slave trade to local elections. As an example of the former, data scientists have designed powerful visualizations demonstrating the growth and demise of the slave trade over time, highlighting the extent of the human displacement. For the latter, one could imagine mining Twitter feeds to measure the public’s relative interest in various political candidates, and then using the content of these feeds to predict election winners.",
      "tags": [
        "CSCI0100"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0111:",
      "title": "CSCI0111: Computing Foundations: Data",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci0111/fall2020/index.html",
      "desc": "An introduction to computing and programming that focuses on understanding and manipulating data. Students will learn to write programs to process both tabular and structured data, to assess programs both experimentally and theoretically, to apply basic data science concepts, and to discuss big ideas around the communication, use, and social impacts of digital information.",
      "tags": [
        "CSCI0111"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0112:",
      "title": "CSCI0112: Computing Foundations: Program Organization",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci0112/fall-2020/",
      "desc": "CSCI 0112 builds on the data-focused programming introduced in CSCI 0111. Students will learn how to structure their programs so that subproblems can be solved in isolation. We will discuss several algorithms–abstract descriptions of computations–and students will get practice implementing working programs from these abstract descriptions. We will continue our study of data organization, covering several new ways of storing and accessing information. We will also continue to discuss program efficiency; students will learn how to reason about the performance of their programs. Finally, like CSCI 0111, CSCI 0112 will foreground the ethical considerations programmers must think about when developing software.",
      "tags": [
        "CSCI0112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0150:",
      "title": "CSCI0150: Introduction to Object-Oriented Programming and Computer Science",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci0150",
      "desc": "Emphasizes object-oriented design and programming in Java, an effective modern technique for producing modular, reusable, internet-aware programs. Also introduces interactive computer graphics, user interface design, and some fundamental data structures and algorithms. The course features a sequence of successively more complex graphics programs, including Tetris, and culminating in a significant final project such as an interactive sketching program, Othello, PacMan or a student-designed application. CS15 helps provide a serious introduction to the field intended for both potential concentrators and those who may take only a single course. No prerequisites, no prior knowledge of programming required.",
      "tags": [
        "CSCI0150"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Summer-CSCI0160:",
      "title": "CSCI0160: Introduction to Algorithms and Data Structures",
      "source": "Brown",
      "year": "Summer 2021",
      "url": "http://cs.brown.edu/courses/csci0160",
      "desc": "This course teaches fundamental techniques for problem solving by computer that are relevant to most areas of Computer Science, both theoretical and applied. Algorithms and data structures for sorting, searching, graph problems and geometric problems are covered. Programming assignments conform with the object-oriented methodology introduced in CSCI0150. Prerequisite: CSCI0150 or written permission.",
      "tags": [
        "CSCI0160"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0170:",
      "title": "CSCI0170: CS: An Integrated Introduction",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "https://cs17-spring2021.github.io/",
      "desc": "CSCI0170/0180 is an introductory sequence that helps students begin to develop the skills, knowledge, and confidence to solve computational problems elegantly, correctly, efficiently, and with ease. The sequence is unique in teaching the functional and imperative programming paradigms---the first using the languages Scheme and ML in CSCI0170; the second two using Java and Scala in CSCI0180. The sequence requires no previous programming experience. Indeed, few high school students are exposed to functional programming; hence even students with previous programming experience often find this sequence an invaluable part of their education.",
      "tags": [
        "CSCI0170"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Summer-CSCI0180:",
      "title": "CSCI0180: CS: An Integrated Introduction",
      "source": "Brown",
      "year": "Summer 2021",
      "url": "https://cs18-summer-2021.github.io/",
      "desc": "A continuation of CSCI0170. Students learn to program in Java while continuing to develop their algorithmic and analytic skills. Emphasis is placed on object-oriented design, imperative programming, and the implementation and use of data structures. Examples are drawn from such areas as databases, strategy games, web programming, graphical user interfaces, route finding, and data compression. Lab work done with the assistance of TAs. Prerequisite: CSCI 0170 or CSCi 0190.",
      "tags": [
        "CSCI0180"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0190:",
      "title": "CSCI0190: Accelerated Introduction to Computer Science",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci0190/2020/",
      "desc": "A one-semester introduction to CS covering programming integrated with core data structures, algorithms, and analysis techniques, similar to the two-course introductory sequences (CSCI 0150-0160 and CSCI 0170-0180). Students wishing to take CSCI 0190 must pass a a sequence of online placement assignments. Though the placement process is most appropriate for students who have had some prior programming experience, it is self-contained so all are welcome to try learning the provided material and attempting placement.",
      "tags": [
        "CSCI0190"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "brown-Summer-CSCI0220:",
      "title": "CSCI0220: Discrete Structures and Probability",
      "source": "Brown",
      "year": "Summer 2021",
      "url": "https://cs22.netlify.app/",
      "desc": "The objective of the course is to place on solid foundations the most common structures of Computer Science, to illustrate proof techniques, to provide the background for an introductory course in computational theory and to introduce basic concepts of probability theory. It introduces Boolean algebras, logic, set theory, elements of algebraic structures, graph theory, combinatorics and probability. No prerequisites.",
      "tags": [
        "CSCI0220"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0240:",
      "title": "CSCI0240: Visual Thinking/Visual Computing",
      "source": "Brown",
      "year": "Spring 2005",
      "url": "http://cs.brown.edu/courses/csci0240/",
      "desc": "Visual Thinking/Visual Computing\" is an interdisciplinary course designed to provide a systematic grounding in both technical and theoretical areas of visual research and communication, with a focus on the key role of computer graphics.",
      "tags": [
        "CSCI0240"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI0300:",
      "title": "CSCI0300: Fundamentals of Computer Science",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci0300/2021/",
      "desc": "The goal of CSCI 0300/CS 300 is to teach the fundamentals behind the \"magic\" of computer systems from the hardware level to the global internet. We'll cover the ideas, principles and abstractions that unify computer systems design – from how your laptop runs multiple programs at the same time, to how companies like Instagram, AirBnB, and Google operate large websites, to how easy it is to exploit security vulnerabilities on badly designed systems. This is a great class for students who are interested in learning what systems programming is, how systems work, and why these systems are so critical to modern technology.",
      "tags": [
        "CSCI0300"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0310:",
      "title": "CSCI0310: Introduction to Computer Systems",
      "source": "Brown",
      "year": "Fall 2011",
      "url": "http://cs.brown.edu/courses/csci0310/assignments.xml",
      "desc": "This course covers the basic principles behind the organization of modern computers. It starts with machine representation of data types and logic design, then explores the architecture and operations of computer systems, including I/O, pipelining, and memory hierarchies. Assembly language is introduced as an intermediate abstraction and is used to study introductory operating system and compiler concepts",
      "tags": [
        "CSCI0310"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0320:",
      "title": "CSCI0320: Introduction to Software Engineering",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci0320",
      "desc": "Techniques for designing, building, and maintaining large,scalable, and reusable systems. We will cover advanced programming techniques using Java and Javascript. Course assignments will familiarize students with software testing, relational databases, concurrency techniques such as threads, and software engineering tools like git, profilers, and debuggers.",
      "tags": [
        "CSCI0320"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0330:",
      "title": "CSCI0330: Introduction to Computer Systems",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "https://brown-cs0330.github.io/website/index.html",
      "desc": "High-level computer architecture and systems programming. The course covers the organization of computer systems (in terms of storage units, caches, processors, and I/O controllers) and teaches students assembly-language programming and C-language programming. Extensive programming exercises introduce students to systems-level programming on Linux systems, as well as to multi-threaded programming with POSIX threads. Students will be introduced to the functions of operating systems.",
      "tags": [
        "CSCI0330"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI0530:",
      "title": "CSCI0530: Coding the Matrix: an Introduction to Linear Algebra for Computer Science",
      "source": "Brown",
      "year": "Fall 2017",
      "url": "http://cs.brown.edu/courses/csci0530/current/index.htm",
      "desc": "The aim of this course is to provide students interested in computer science an introduction to vectors and matrices and their use in CS applications. The course will be driven by applications from areas chosen from among: combinatorial optimization, computer vision, cryptography, game theory, graphics, information retrieval and web search, maching learning, and scientific visualization. For example, students will learn Google's PageRank method for ranking web pages. This course satisfies the linear algebra requirement for the Computer Science Sc.B.and the Applied-Math/CS Sc.B.",
      "tags": [
        "CSCI0530"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI0920:",
      "title": "CSCI0920: The Educational Software Seminar",
      "source": "Brown",
      "year": "Spring 2005",
      "url": "http://cs.brown.edu/courses/csci0920/",
      "desc": "Students examine the purpose, design, production, use and evaluation of educational software, electronically mediated curriculum, and other educational technologies, while working in teams to design software for clients in local classrooms (K-12 and university). CS4 or 15 is helpful, as is coursework or strong interest in education or digital production, but there are no prerequisites. Enrollment limited to 30; written permission required.",
      "tags": [
        "CSCI0920"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI1010:",
      "title": "CSCI1010: Theory of Computation",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1010",
      "desc": "The course introduces basic models of computation including languages, finite-state automata and Turing machines. Proves fundamental limits on computation (incomputability, the halting problem). Provides the tools to compare the hardness of computational problems (reductions). Introduces computational complexity classes (P, NP, PSPACE and others).",
      "tags": [
        "CSCI1010"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1260:",
      "title": "CSCI1260: Compilers and Program Analysis",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1260/spring-2021/",
      "desc": "Lexical analysis, syntactic analysis, semantic analysis, code generation, code optimization, translator writing systems.",
      "tags": [
        "CSCI1260"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1270:",
      "title": "CSCI1270: Database Management Systems",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1270/website_2020/lectures.html",
      "desc": "Introduction to database structure, organization, languages and implementation. Relational model. Query languages, query processing, query optimization, normalization, file structures, concurrency control and recovery algorithms, and distributed databases. Studies of actual systems. While database management system usage is covered, emphasis is on the systems-building aspects of these large, complex systems. We also relate the material to modern applications such as the web",
      "tags": [
        "CSCI1270"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI1290:",
      "title": "CSCI1290: Computational Photography and Image Manipulation",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1290/",
      "desc": "We will cover topics such as cameras, human visual perception, image processing and manipulation, image based lighting and rendering, high dynamic range, single view reconstruction, photo quality assessment, non photorealistic rendering, the use of Internet-scale data, and many more topics. The course will consist of several programming assignments and a final project. Students are encouraged to capture and process their own data. Students can earn graduate credit for the course but will need to meet higher requirements on all projects throughout the semester and need the instructor's permission.",
      "tags": [
        "CSCI1290"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1300:",
      "title": "CSCI1300: User Interfaces and User Experience",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1300/",
      "desc": "Have you ever walked into a door thinking that you were supposed to pull instead of push? Have you ever been stuck on a website, not sure how to proceed next? Learn when to use different interfaces, how to model and represent user interaction, how to elicit requirements and feedback from users, as well as the principles of user experience design, methods for designing and prototyping interfaces, and user interface evaluation. Students interested in both learning the process behind building an effective interface and gaining hands-on experience designing a user interface should take this course. There will be assignments, readings, and studios, where students will have the opportunity to work alongside TAs and interact with industry guests as they learn critical tools for interface and web design.",
      "tags": [
        "CSCI1300"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1301:",
      "title": "CSCI1301: Livestreaming Reimagined",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1301/",
      "desc": "Livestreaming today is comprised of video game streams and Zoom classes. But as video production becomes more accessible, and devices become more mobile, the blending of the Instagram photo feed and TV reality show could produce a new generation of streaming personalities. In this project-based course, we’ll investigate together the space of livestreaming technology beyond desktop gaming, exploring new configurations, interfaces, and improvements to current livestreaming systems. We’ll focus on creative (music, art, food, travel) or educational streaming, exploring how to support new forms of streamer-audience interaction and presence.",
      "tags": [
        "CSCI1301"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI1310:",
      "title": "CSCI1310: Fundamentals of Computer Systems (Master's)",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1310/2020/",
      "desc": "Covers fundamental concepts, principles, and abstractions that underlie the design and engineering of computer systems. Students will learn how a computer works, how to write safe and performant systems software, and what systems abstractions support today’s complex, high-performance systems developed in industry. Specific topics include machine organization, systems programming and performance, key concepts of operating systems, isolation, security, virtualization, concurrent programming, and the basics of distributed systems. Combined lectures, labs, and several hands-on projects involving programming exercises in C/C++.",
      "tags": [
        "CSCI1310"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1320:",
      "title": "CSCI1320: Creating Modern & Mobile Web Applications",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1320/",
      "desc": "This course covers all aspects of web application development, including the initial concept, user-centric design, development methodologies, front end development, databases, back end development, security, testing, load testing, accessibility, and deployment. There will be a substantial team project. The course is designed both for students with substantial programming background (equivalent to CS32 or CS33) who want to learn how to use this background to build web applications, and for students with a substantial background in web design including HTML and Javascript who are interested in learning how to extend design techniques to incorporate the technologies needed in modern web applications",
      "tags": [
        "CSCI1320"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1340:",
      "title": "CSCI1340: Innovating Game Development",
      "source": "Brown",
      "year": "Spring 2008",
      "url": "http://cs.brown.edu/courses/csci1340/2008/Home.html",
      "desc": "What technologies will shape the next generation of video games? This project-centered course focuses on computational innovations for game development. Students examine innovative game technology through case studies of existing games and talks by industrial and academic game professionals. In teams, students propose and implement a project demonstrating a novel technology for gaming. Recommended: strong computational or engineering background.",
      "tags": [
        "CSCI1340"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1370:",
      "title": "CSCI1370: Virtual Reality Design for Science",
      "source": "Brown",
      "year": "Fall 2019",
      "url": "http://cs.brown.edu/courses/cs137/",
      "desc": "Explores the visual and human-computer interaction design process for scientific applications in Brown's immersive virtual reality Cave. Joint with RISD. Computer Science and design students learn how to work effectively together; study the process of design, learn about scientific problems, create designs for scientific applications; critique, evaluate, realize and iterate designs, and demonstrate final projects.",
      "tags": [
        "CSCI1370"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1380:",
      "title": "CSCI1380: Distributed Computer Systems",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1380/s21/",
      "desc": "Explores the fundamental principles and practice underlying networked information systems. We first cover basic distributed computing mechanisms (e.g., naming, replication, fault tolerance, security) and enabling middleware technologies. We then discuss how these mechanisms and technologies fit together to realize distributed databases and file systems, web-based and mobile information systems.",
      "tags": [
        "CSCI1380"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1410:",
      "title": "CSCI1410: Artificial Intelligence",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1410",
      "desc": "Algorithms and representations used in artificial intelligence. Introduction and implementation of algorithms for search, planning, perception, knowledge representation, logic, probabilistic representation and reasoning, robotics and machine learning",
      "tags": [
        "CSCI1410"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1420:",
      "title": "CSCI1420: Machine Learning",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1420/",
      "desc": "How can artificial systems learn from examples, and discover information buried in massive datasets? We explore the theory and practice of statistical machine learning, focusing on computational methods for supervised and unsupervised data analysis. Specific topics include empirical risk minimization, probably approximately correct learning, maximum likelihood parameter estimation, kernel methods, neural networks, the expectation maximization algorithm, and principal component analysis.",
      "tags": [
        "CSCI1420"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1430:",
      "title": "CSCI1430: Introduction to Computer Vision",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "https://browncsci1430.github.io/webpage/index.html",
      "desc": "How can computers understand the visual world of humans? This course treats vision as a process of inference from noisy and uncertain data and emphasizes probabilistic and statistical approaches. Topics may include perception of 3D scene structure from stereo, motion, and shading; image filtering, smoothing, edge detection; segmentation and grouping; texture analysis; learning, recognition and search; tracking and motion estimation. Strongly recommended: basic linear algebra, basic calculus and exposure to probability.",
      "tags": [
        "CSCI1430"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1440:",
      "title": "CSCI1440: Topics In Algorithmic Game Theory",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1440/",
      "desc": "This course examines topics in game theory and mechanism design from a computer scientist's perspective. Through the lens of computation, the focus is the design and analysis of systems utilized by self-interested agents. Students will investigate how the potential for strategic agent behavior can/should influence system design, and the ramifications of conflicts of interest between system designers and participating agents.",
      "tags": [
        "CSCI1440"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1450:",
      "title": "CSCI1450: Advanced Introduction to Probability for Computing and Data Science",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1450/",
      "desc": "Probability and statistics have become indispensable tools in computer science. Probabilistic methods and statistical reasoning play major roles in machine learning, cryptography, network security, communication protocols, web search engines, robotics, program verification, and more. This course introduces the basic concepts of probability and statistics, focusing on topics that are most useful in computer science applications. Topics include: modeling and solution in sample space, random variables, simple random processes and their probability distributions, Markov processes, limit theorems, and basic elements of statistical inference.",
      "tags": [
        "CSCI1450"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1460:",
      "title": "CSCI1460: Introduction to Computational Linguistics",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1460/",
      "desc": "The application of computational methods to problems in natural-language processing. In particular we examine techniques due to recent advances in deep learning: word embeddings, recurrent neural networks (e.g., LSTMs), sequence-to-sequence models, and generative adversarial networks (GANs). Programming projects include parsing, machine translation, question answering, and chat-bots.",
      "tags": [
        "CSCI1460"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1470:",
      "title": "CSCI1470: Deep Learning",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "https://brown-deep-learning.github.io/dl-website-2020/index.html",
      "desc": "Deep Learning belongs to a broader family of machine learning methods. It is a particular version of artificial neural networks -- a version that emphasizes learning representation with multiple layers of networks. Deep Learning, plus the specialized techniques that it has inspired (e.g. convolutional neural networks, recurrent neural networks, and transformers), have led to rapid improvements in many applications, such as computer vision, machine learning, sound understanding, and robotics. This course intends to give students an overview of the prominent techniques of Deep Learning and its applications in computer vision, language understanding, and other areas. It also aims at providing hands-on practice of implementing deep learning algorithms in Python.",
      "tags": [
        "CSCI1470"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1550:",
      "title": "CSCI1550: Probabilistic Methods in Computer Science",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1550/",
      "desc": "Randomization and probabilistic techniques play an important role in modern computer science, with applications ranging from combinatorial optimization and machine learning to communications networks and secure protocols. This course introduces the most fundamental probabilistic techniques used in computer science applications, in particular in randomized algorithms, probabilistic analysis of algorithms and machine learning.",
      "tags": [
        "CSCI1550"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1570:",
      "title": "CSCI1570: Design and Analysis of Algorithms",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1570",
      "desc": "A single algorithmic improvement can have a greater impact on our ability to solve a problem than ten years of incremental improvements in CPU speed. We study techniques for designing and analyzing algorithms. Typical problem areas addressed include hashing, searching, dynamic programming, graph algorithms, network flow, optimization algorithms including linear programming.",
      "tags": [
        "CSCI1570"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI1580:",
      "title": "CSCI1580: Information Retrieval and Web Search",
      "source": "Brown",
      "year": "Spring 2013",
      "url": "http://cs.brown.edu/courses/csci1580/",
      "desc": "Covers traditional material as well as recent advances in information retrieval (IR), the study of indexing, processing, and querying of textual data. The focus will be on newer techniques geared to hypertext documents available on the World Wide Web. Topics include efficient text indexing; Boolean and vector space retrieval models; evaluation and interface issues; Web crawling, link-based algorithms, and Web metadata; text/Web clustering, classification; text mining.",
      "tags": [
        "CSCI1580"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1590:",
      "title": "CSCI1590: Introduction to Computational Complexity",
      "source": "Brown",
      "year": "Spring 2009",
      "url": "http://cs.brown.edu/courses/csci1590",
      "desc": "Introduction to serial and parallel models of computation; time and space complexity classes on these models; the circuit model of computation and its relation to serial and parallel time complexity; space-time tradeoffs on serial computers; area-time tradeoffs on the VLSI computational model; interactive and probabilistically checkable proofs; the definition of NP in terms of probabilistically checkable proofs; hardness of approximations to solutions to NP-hard problems",
      "tags": [
        "CSCI1590"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI1600:",
      "title": "CSCI1600: Real-time and Embedded Software",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1600/",
      "desc": "Comprehensive introduction to the design and implementation of software for programmable embedded computing systems, in applications such as Internet of Things, transportation, and mobile. Includes the overall embedded real-time software design and development processes, with a focus on engineering for reliability.",
      "tags": [
        "CSCI1600"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1610:",
      "title": "CSCI1610: Building High-Performance Servers",
      "source": "Brown",
      "year": "Fall 2005",
      "url": "http://cs.brown.edu/courses/csci1610/",
      "desc": "In-depth study of modern server design. Considers architectures for building high-performance, robust, scalable and secure servers. We consider all aspects of 'mission-critical' servers. Topics include threaded and non-blocking programming paradigms, high-performance I/O (network and disk), secure programming techniques, database access, performance profiling, security, and redundancy.",
      "tags": [
        "CSCI1610"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1650:",
      "title": "CSCI1650: Software Security and Exploitation",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1650/",
      "desc": "CSCI 1650 covers software exploitation techniques and state-of-the-art mechanisms for hardening software. The course begins with a summary of prevalent software defects, typically found in applications written in memory unsafe languages, like C/C++, and proceeds with studying traditional and modern exploitation techniques, ranging from classical code injection and code reuse up to the latest goodies (e.g., JIT-ROP).",
      "tags": [
        "CSCI1650"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1670:",
      "title": "CSCI1670: Operating Systems",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "https://brown-cs1690.github.io/brown-cs167-s21/#/",
      "desc": "Covers not just the principles of operating systems but the intricacies of how they work. Topics include multithreaded programming, managing threads and interrupts, managing storage, processor scheduling, operating-system structure, virtualization, security, and the design of file systems (both local and distributed).",
      "tags": [
        "CSCI1670"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1680:",
      "title": "CSCI1680: Computer Networks",
      "source": "Brown",
      "year": "Fall 2019",
      "url": "http://cs.brown.edu/courses/csci1680/f19/",
      "desc": "Covers the technologies supporting the Internet, from Ethernet and WiFi through the routing protocols that govern the flow of traffic and the web technologies that are generating most of it. A major concern is understanding the protocols used on the Internet: what the issues are, how they work, their shortcomings, and what improvements are on the horizon.",
      "tags": [
        "CSCI1680"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1710:",
      "title": "CSCI1710: Logic for Systems",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1710/",
      "desc": "The course will focus on proving properties about systems and programs. We will study the distinction between programs and specifications, and check for whether the former obey the latter. We will work with tools that have extensive automation such as model constructors, model checkers, and proof assistants. Problems and projects will apply to real-world systems.",
      "tags": [
        "CSCI1710"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI1760:",
      "title": "CSCI1760: Multiprocessor Synchronization",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1760/",
      "desc": "This course examines the theory and practice of multiprocessor synchronization. Subjects covered include multiprocessor architecture, mutual exclusion, wait-free and lock-free synchronization, spin locks, monitors, load balancing, concurrent data structures, and transactional synchronization.",
      "tags": [
        "CSCI1760"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1810:",
      "title": "CSCI1810: Computational Molecular Biology",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci1810/",
      "desc": "High-throughput experimental approaches now allow molecular biologists to make large-scale measurements of DNA, RNA, and protein, the three fundamental molecules of the cell. The resulting datasets are often too large for manual analysis and demand computational techniques. This course introduces algorithms for sequence comparison and alignment; molecular evolution and phylogenetics; DNA/RNA sequencing and assembly; recognition of genes and regulatory elements; and RNA and protein structure.",
      "tags": [
        "CSCI1810"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1820:",
      "title": "CSCI1820: Algorithmic Foundations of Computational Biology",
      "source": "Brown",
      "year": "Spring 2020",
      "url": "http://cs.brown.edu/courses/csci1820/",
      "desc": "This course is devoted to computational and statistical methods as well as software tools for DNA, RNA, and protein sequence analysis. The focus is on understanding the algorithmic and mathematical foundations of the methods, the design of the associated genomics tools, as well as on their applications. A comprehensive set of programming assignments provides a hands-on journey for the student into the complexities of real genomic data.",
      "tags": [
        "CSCI1820"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI1850:",
      "title": "CSCI1850: Deep Learning in Genomics",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1850/",
      "desc": "Deep learning models have achieved impressive performance in fields like computer vision and NLP. The collection of vast quantities of biological data naturally leads to the question -- can deep learning help us understand genomics? We will cover deep learning models like Auto-encoders and Convolutional Neural Networks and how have they been applied to solve problems in genomics. We will learn about different biological datasets, interpretation methods that help explain predictions, and what unique challenges are presented by the data in this field. Critical thinking and learning from the practical application of models to data are expected outcomes.",
      "tags": [
        "CSCI1850"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI1971:",
      "title": "CSCI1971: Topics in 2D Game Engines",
      "source": "Brown",
      "year": "Fall 2013",
      "url": "http://cs.brown.edu/courses/csci1971/",
      "desc": "Welcome to 2D Game Engines! This is a largely student-run course, similar to an independent study, and you'll learn lots of techniques needed to create a fledgling game engine. These topics include animation, simple AI, collision detection, physics, and raycasting. You will create a game engine of your own over the course of the semester, adding a few features to it each week. At the same time, you will also create a series of games using your engine that demonstrate the use of the features you add. Near the end of the semester, you will design and implement a final project that uses your game engine to create a complete, polished game.",
      "tags": [
        "CSCI1971"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI1950U:",
      "title": "CSCI1950U: Topics in 3D Game Engine Development",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci1972/index.shtml",
      "desc": "Covers core techniques in 3D game development with an emphasis on engine architecture. Students independently develop their own engines using C++, OpenGL, and the Qt framework, then work in groups to create a polished game. Topics include: spatial subdivision, player representation, collision detection and response, game networking, GPUs, and OpenGL.",
      "tags": [
        "CSCI1950U"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI2270:",
      "title": "CSCI2270: Managing and Mining Massive Time Series",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "https://www.francosolleza.com/CS227/",
      "desc": "In-depth treatment of advanced issues in database management systems. Topics vary from year to year and may include distributed databases, mobile data management, data stream processing and web-based data management.",
      "tags": [
        "CSCI2270"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Spring-CSCI2300:",
      "title": "CSCI2300: Human-Computer Interaction Seminar",
      "source": "Brown",
      "year": "Spring 2020",
      "url": "http://cs.brown.edu/courses/csci2300",
      "desc": "This seminar covers methods for conducting research in human-computer interaction (HCI). These topics will be pursued through independent reading, assignments, and class discussion. The seminar comprises four assignments that are designed to be meaningful and have the potential to be widely visible. We will have readings that teach HCI experimental research methods and provide examples of valuable contributions.",
      "tags": [
        "CSCI2300"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI2340:",
      "title": "CSCI2340: Software Engineering",
      "source": "Brown",
      "year": "Fall 2018",
      "url": "https://cs.brown.edu/courses/cs234/2018/",
      "desc": "This source provides an overview of particular topics relevant to software engineering with a strong emphasis on research directions and where the field is going. It is designed both to familiarize the student with current research directions and where the field is going, and to lay the foundations for students wising to do research in the area.",
      "tags": [
        "CSCI2340"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI2370:",
      "title": "CSCI2370: Interdisciplinary Scientific Visualization",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci2370/2020/",
      "desc": "Description: Learn how to do interdisciplinary scientific visualization research, from soup to nuts, in one semester. Projects will involve the solution of scientific problems using computer graphics, modeling, and visualization. Working in small groups, students will identify scientific problems, propose solutions involving computational modeling and visualization, evaluate the proposals, design and implement the solutions, apply them to the problems, evaluate their success, and report on results. Examples might include interactive software systems, immersive virtual reality applications, quantitative analysis tools, or new applications of existing visualizations methods.",
      "tags": [
        "CSCI2370"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI2390:",
      "title": "CSCI2390: Privacy-Conscious Computer Systems",
      "source": "Brown",
      "year": "Fall 2020",
      "url": "http://cs.brown.edu/courses/csci2390/2020/",
      "desc": "The goal of CSCI 2390 is to understand privacy-related challenges for computer systems, learn what design trade-offs we face as engineers, and to identify new research directions that might help address these challenges. We will examine research papers on distributed system design, privacy-preserving, and secure computing techniques, and discuss how to apply these ideas in practice. The goal is to understand if, and how, we can answer questions like these:",
      "tags": [
        "CSCI2390"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Fall-CSCI2420:",
      "title": "CSCI2420: Probabilistic Graphical Models",
      "source": "Brown",
      "year": "Fall 2016",
      "url": "http://cs.brown.edu/courses/csci2420",
      "desc": "Probabilistic graphical models provide a flexible framework for modeling large, complex, heterogeneous collections of random variables. After a brief introduction to their representational power, we provide a comprehensive survey of state-of-the-art methods for statistical learning and inference in graphical models.",
      "tags": [
        "CSCI2420"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI2520:",
      "title": "CSCI2520: Computational Geometry",
      "source": "Brown",
      "year": "Spring 2005",
      "url": "http://cs.brown.edu/courses/csci2520/home.html",
      "desc": "Algorithms and data structures for fundamental geometric problems in two and three dimensions. Topics include point location, range searching, convex hull, intersection, Voronoi diagrams and graph drawing. Applications to computer graphics, circuit layout, information visualization and computer-aided design are also discussed",
      "tags": [
        "CSCI2520"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI2530:",
      "title": "CSCI2530: Internet and Web Algorithms",
      "source": "Brown",
      "year": "Spring (Unknown)",
      "url": "http://cs.brown.edu/courses/csci2530/",
      "desc": "Graduate course/seminar focuses on the mathematical foundations of algorithms for handling large amounts of data over networks. We'll read and discuss recent papers in information retrieval, search engines, link analysis, probabilistic modeling of the web and social networks, and more.",
      "tags": [
        "CSCI2530"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "brown-Fall-CSCI2570:",
      "title": "CSCI2570: Introduction to Nanocomputing",
      "source": "Brown",
      "year": "Fall 2007",
      "url": "http://cs.brown.edu/courses/csci2570/slides.html",
      "desc": "Nanoscale technologies employing materials whose smallest dimension is on the order of a few nanometers are expected to replace lithography in the design of chips. We introduce to computational nanotechnologies and explore problems presented by their stochastic nature. Nanotechnologies based on the use of DNA and semiconducting materials are explored.",
      "tags": [
        "CSCI2570"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "brown-Spring-CSCI2820:",
      "title": "CSCI2820: Advanced Algorithms in Computational Biology and Medical Bioinformatics (Master's)",
      "source": "Brown",
      "year": "Spring 2021",
      "url": "http://cs.brown.edu/courses/csci2820/",
      "desc": "Devoted to computational problems and methods in the emerging field of Medical Bioinformatics where genomics, computational biology and bioinformatics impact medical research. We will present challenging problems and solutions in three areas: Disease Associations, Protein Folding and Immunogenomics.",
      "tags": [
        "CSCI2820"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS107:",
      "title": "CS107: Data Science Discovery",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs107/fa2020/",
      "desc": "Data Science Discovery is the intersection of statistics, computation, and real-world relevance. As a project-driven course, students perform hands-on-analysis of real-world datasets to analyze and discover the impact of the data. Throughout each experience, students reflect on the social issues surrounding data analysis such as privacy and design",
      "tags": [
        "CS107"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS126:",
      "title": "CS126: Software Design Studio",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs126/fa2020/",
      "desc": "Fundamental principles and techniques of software development. Design, documentation, testing, and debugging software, with a significant emphasis on code review.",
      "tags": [
        "CS126"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS173:",
      "title": "CS173: Discrete Structures",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs173/fa2020/",
      "desc": "Discrete mathematical structures frequently encountered in the study of Computer Science. Sets, propositions, Boolean algebra, induction, recursion, relations, functions, and graphs.",
      "tags": [
        "CS173"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS225:",
      "title": "CS225: Data Structures",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs225/fa2020/",
      "desc": "Data abstractions: elementary data structures (lists, stacks, queues, and trees) and their implementation using an object-oriented programming language. Solutions to a variety of computational problems such as search on graphs and trees. Elementary analysis of algorithms.",
      "tags": [
        "CS225"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS240:",
      "title": "CS240: Introduction to Computer Systems",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs240/fa2020/",
      "desc": "Basics of computer systems. Number representations, assembly/machine language, abstract models of processors (fetch/execute, memory hierarchy), processes/process control, simple memory management, file I/O and directories, network programming, usage of cloud services.",
      "tags": [
        "CS240"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS241:",
      "title": "CS241: Systems Programming",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs241/fa2020/",
      "desc": "Basics of system programming, including POSIX processes, process control, inter-process communication, synchronization, signals, simple memory management, file I/O and directories, shell programming, socket network programming, RPC programming in distributed systems, basic security mechanisms, and standard tools for systems programming such as debugging tools.",
      "tags": [
        "CS241"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS265:",
      "title": "CS265: Innovation Illinois - From Accessible Design to Supercomputing Cultures",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs265/fa2020/",
      "desc": "For the duration of the course, we’ll work with various perspectives from different parts of our campus to imagine, research, and develop—via paper, multimedia, and code-based prototypes–future innovation ideas. We’ll be introduced to and get to experiment with mixed media resources and prototyping methods, spanning on- and off-line archives, digital editing, low and high-fidelity prototyping, and online data collection. We’ll also “visit” campus sites and speak to key figures related to Illinois’ world-changing interdisciplinary innovation histories and collaborations. Our work will culminate in a research project that surveys interdisciplinary practice on our campus, and explores innovation as a phenomenon that necessarily emerges from creative innovation cultures that cross the arts, humanities, social sciences, and computer science.",
      "tags": [
        "CS265"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS357:",
      "title": "CS357: Numerical Methods I",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs357/fa2020/",
      "desc": "Fundamentals of numerical methods for students in science and engineering; floating-point computation, systems of linear equations, approximation of functions and integrals, the single nonlinear equation, and the numerical solution of ordinary differential equations; various applications in science and engineering; programming exercises and use of high quality mathematical library routines",
      "tags": [
        "CS357"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS361:",
      "title": "CS361: Probability & Statistics for Computer Science",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs361/fa2020/",
      "desc": "Introduction to probability theory and statistics with applications to computer science. Topics include: visualizing datasets, summarizing data, basic descriptive statistics, conditional probability, independence, Bayes theorem, random variables, joint and conditional distributions, expectation, variance and covariance, central limit theorem. Markov inequality, Chebyshev inequality, law of large numbers, Markov chains, simulation, the PageRank algorithm, populations and sampling, sample mean, standard error, maximum likelihood estimation, Bayes estimation, hypothesis testing, confidence intervals, linear regression, principal component analysis, classification, and decision trees.",
      "tags": [
        "CS361"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS374:",
      "title": "CS374: Introduction to Algorithms & Models of Computation",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs374/fa2020/",
      "desc": "Analysis of algorithms, major paradigms of algorithm design including recursive algorithms, divide-and-conquer algorithms, dynamic programming, greedy algorithms, and graph algorithms. Formal models of computation including finite automata and Turing machines. Limitations of computation arising from fundamental notions of algorithm and from complexity-theoretic constraints. Reductions, undecidability and NP-completeness.",
      "tags": [
        "CS374"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS410:",
      "title": "CS410: Text Information Systems",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs410/fa2020/",
      "desc": "Theory, design, and implementation of text-based information systems. Text analysis, retrieval models (e.g., Boolean, vector space, probabilistic), text categorization, text filtering, clustering, retrieval system design and implementation, and applications to web information management",
      "tags": [
        "CS410"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS418:",
      "title": "CS418: Interactive Computer Graphics",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs418/fa2020/",
      "desc": "Basic mathematical tools and computational techniques for modeling, rendering, and animating 3-D scenes.",
      "tags": [
        "CS418"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS412:",
      "title": "CS412: Programming Languages & Compilers",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs421/fa2020/",
      "desc": "Structure of programming languages and their implementation. Basic language design principles; abstract data types; functional languages; type systems; object-oriented languages. Basics of lexing, parsing, syntax-directed translation, semantic analysis, and code generation.",
      "tags": [
        "CS412"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS424:",
      "title": "CS424: Real-Time Systems",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs424/fa2020/",
      "desc": "Supervisory control aspects of Cyber Physical Systems (CPS): fundamentals of reliability analysis, real-time scheduling, simple feedback control, software fault tolerance architecture, wireless networking and energy saving, principles of safety critical system engineering. Student groups design and demonstrate supervisory control architecture for a robot.",
      "tags": [
        "CS424"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS425:",
      "title": "CS425: Distributed Systems",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs425/fa2020/",
      "desc": "Protocols, specification techniques, global states and their determination, reliable broadcast, transactions and commitment, security, and real-time systems.",
      "tags": [
        "CS425"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS426:",
      "title": "CS426: Compiler Construction",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs426/fa2020/",
      "desc": "Compiler structure, syntax analysis, syntax-directed translation, automatically constructed recognizers, semantic analysis, code generation, intermediate language, optimization techniques",
      "tags": [
        "CS426"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS433:",
      "title": "CS433: Computer System Organization",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs433/fa2020/",
      "desc": "Computer hardware design and analysis and interface with software. Advanced processor design, including superscalar, out-of-order issue, branch prediction, and speculation. Memory hierarchy design, including advanced cache optimizations, main memory, and virtual memory. Principles of multiprocessor design, including shared-memory, cache coherence, synchronization, and consistency. Other advanced topics depending on time; e.g., GPUs and accelerators, warehouse computers and data centers, security.",
      "tags": [
        "CS433"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS438:",
      "title": "CS438: Communication Networks",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs438/fa2020/",
      "desc": "Layered architectures and the OSI Reference Model; design issues and protocols in the transport, network, and data link layers; architectures and control algorithms of local-area, point-to-point, and satellite networks; standards in networks access protocols; models of network interconnection; overview of networking and communication software.",
      "tags": [
        "CS438"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS439:",
      "title": "CS439: Wireless Networks",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs439/fa2020/",
      "desc": "Overview of wireless network architectures including cellular networks, local area networks, multi-hop wireless networks such as ad hoc networks, mesh networks, and sensor networks; capacity of wireless networks; medium access control, routing protocols, and transport protocols for wireless networks; mechanisms to improve performance and security in wireless networks; energy-efficient protocols for sensor networks.",
      "tags": [
        "CS439"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS440:",
      "title": "CS440: Artificial Intelligence",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs440/fa2020/",
      "desc": "Major topics in and directions of research in artificial intelligence: basic problem solving techniques, knowledge representation and computer inference, machine learning, natural language understanding, computer vision, robotics, and societal impacts.",
      "tags": [
        "CS440"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CSS445:",
      "title": "CSS445: Computational Photography",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs445/fa2020/",
      "desc": "Computer vision techniques to enhance, manipulate, and create media from photo collections, such as panoramic stitching, face morphing, texture synthesis, blending, and 3D reconstruction.",
      "tags": [
        "CSS445"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS446:",
      "title": "CS446: Machine Learning",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs446/fa2020/",
      "desc": "Principles and applications of machine learning. Main paradigms and techniques, including discriminative and generative methods, reinforcement learning: linear regression, logistic regression, support vector machines, deep nets, structured methods, dimensionality reduction, k-means, Gaussian mixtures, expectation maximization, Markov decision processes, and Q-learning. Application areas such as natural language and text understanding, speech recognition, computer vision, data mining, and adaptive computer systems, among others.",
      "tags": [
        "CS446"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS447:",
      "title": "CS447: Natural Language Processing",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs447/fa2020/",
      "desc": "Part-of-speech tagging, parsing, semantic analysis and machine translation. Relevant linguistics concepts from morphology (word formation) and lexical semantics (the meaning of words) to syntax (sentence structure) and compositional semantics (the meaning of sentences).",
      "tags": [
        "CS447"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS450:",
      "title": "CS450: Numerical Analysis",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs450/fa2020/",
      "desc": "Linear system solvers, optimization techniques, interpolation and approximation of functions, solving systems of nonlinear equations, eigenvalue problems, least squares, and quadrature; numerical handling of ordinary and partial differential equations.",
      "tags": [
        "CS450"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS461:",
      "title": "CS461: Computer Security I",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs461/fa2020/",
      "desc": "Fundamental principles of computer and communications security and information assurance: ethics, privacy, notions of threat, vulnerabilities, and risk in systems, information warfare, malicious software, data secrecy and integrity issues, network security, trusted computing, mandatory and discretionary access controls, certification and accreditation of systems against security standards. Security mechanisms: authentication, auditing, intrusion detection, access control, cryptography, security protocols, key distribution.",
      "tags": [
        "CS461"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS466:",
      "title": "CS466: Introduction to Bioinformatics",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs466/fa2020/",
      "desc": "Algorithmic approaches in bioinformatics: (i) biological problems that can be solved computationally (e.g., discovering genes, and interactions among different genes and proteins); (ii) algorithmic techniques with wide applicability in solving these problems (e.g., dynamic programming and probabilistic methods); (iii) practical issues in translating the basic algorithmic ideas into accurate and efficient tools that biologists may use.",
      "tags": [
        "CS466"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS473:",
      "title": "CS473: Algorithms",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs473/fa2020/",
      "desc": "Design and analysis techniques, approximation algorithms, randomized algorithms and amortized analysis, and advanced topics such as network flow, linear programming, and dynamic data structures, among others.",
      "tags": [
        "CS473"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS483:",
      "title": "CS483: Applied Parallel Programming",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs483/fa2020/",
      "desc": "The aim of this course is to provide knowledge and hands-on experience in developing software for processors with massively parallel computing resources. In general, we refer to a processor as massively parallel if it has the hardware ability to allow more than 64 threads to make simultaneous progress.",
      "tags": [
        "CS483"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS419:",
      "title": "CS419: Scientific Visualization",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs519/fa2020/",
      "desc": "Visualization techniques useful in analysis of engineering and scientific data. Physical models; methods of computational science; two- and three-dimensional data types; visual representation schemes for scalar, vector, and tensor data; isosurface and volume visualization methods; visual monitoring; interactive steering",
      "tags": [
        "CS419"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS523:",
      "title": "CS523: Advanced Operating Systems",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs523/fa2020/",
      "desc": "Advanced concepts in operating system design and coverage of recent research directions. Resource management for parallel and distributed systems. Interaction between operating system design and computer architectures. Process management, virtual memory, interprocess communication, context switching, parallel and distributed file system designs, persistent objects, process and data migration, load balancing, security, protection.",
      "tags": [
        "CS523"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS524:",
      "title": "CS524: Concurrent Programming Languages",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs524/fa2020/",
      "desc": "Theory of concurrency and concurrent programming languages. Formal models of concurrent computation such as process algebras, nets, and actors; high level concurrent programming languages and their operational semantics; methods for reasoning about correctness and complexity of concurrent programs.",
      "tags": [
        "CS524"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS527:",
      "title": "CS527: Advanced Compiler Construction",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs527/fa2020/",
      "desc": "Incremental and interactive compiling, error correction, code optimization, models of code generators.",
      "tags": [
        "CS527"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "uiuc-Fall-CS556:",
      "title": "CS556: Iterative & Multigrid Methods",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs556/fa2020/",
      "desc": "Comprehensive treatment of algebraic and multigrid iterative methods to solve systems of equations, primarily linear equations arising from discretization of partial differential equations.",
      "tags": [
        "CS556"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "uiuc-Fall-CS563:",
      "title": "CS563: Advanced Computer Security",
      "source": "UIUC",
      "year": "Fall 2020",
      "url": "https://courses.physics.illinois.edu/cs563/fa2020/",
      "desc": "Current research trends in computer and network security. Privacy, tamper-resistance, unwanted traffic, monitoring and surveillance, and critical infrastructure protection. Subtopics will vary depending upon current research trends. Students work in teams in close coordination with the course instructor to develop one of the topics in depth by carrying out background research and an exploratory project.",
      "tags": [
        "CS563"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS106",
      "title": "CIS106: Visualizing the Past",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis106",
      "desc": "Most people's information about the Past is drawn from coffee table picture books, popular movies, video games, documentaries about discoveries of \"ancient, mysterious, and lost\" civilizations, and tours often lead by guides of limited or even dubious credentials. How are these ideas presented, formed, and circulated? Who creates and selects the information presented in this diverse media? Are these presentations accurate? Do they promote or hurt scientific explanations? Can the artistic, aesthetic, and scientific realms be bridged to effectively promote and interpret the past? How can modern technologies be applied to do a better job at presenting what is difficult to experience firsthand? This class will focus on case studies, c and methods of how archaeology and the past are created, presented and used in movies, museums, games, the internet, and art.",
      "tags": [
        "CIS106"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS110",
      "title": "CIS110: Introduction to Computer Programming",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis110",
      "desc": "Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems.",
      "tags": [
        "CIS110"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS120",
      "title": "CIS120: Programming Languages and Techniques I",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis120",
      "desc": "A fast-paced introduction to the fundamental concepts of programming and software design. This course assumes some previous programming experience, at the level of a high school computer science class or CIS110.",
      "tags": [
        "CIS120"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS189",
      "title": "CIS189: Solving Hard Problems in Practice",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis189",
      "desc": "What does Sudoku have in common with debugging, scheduling exams, and routing shipments? All of these problems are provably hard -- no one has a fast algorithm to solve them. But in reality, people are quickly solving these problems on a huge scale with clever systems and heuristics! In this course, we'll explore how researchers and organizations like Microsoft, Google, and NASA are solving these hard problems, and we'll get to use some of the tools they've built!",
      "tags": [
        "CIS189"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS190",
      "title": "CIS190: C++ Programming",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis190",
      "desc": "This course will provide an introduction to programming in C++ and is intended for students who already have some exposure to programming in another language such as Java, C++ provides the programmer with a greater level of control over machine resources and are commonly used in situations where low level access or performance are important. This course will illuminate the issues associated with programming at this level and will cover issues such as explicit memory management, pointers, the compilation process and debugging.",
      "tags": [
        "CIS190"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS192",
      "title": "CIS192: Python Programming",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://cis192.github.io/",
      "desc": "Python is an elegant, concise, and powerful language that is useful for tasks large and small. Python has quickly become a popular language for getting things done efficiently in many in all domains: scripting, systems programming, research tools, and web development. This course will provide an introduction to this modern high-level language using hands-on experience through programming assignments and a collaborative final application development project.",
      "tags": [
        "CIS192"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS193",
      "title": "CIS193: C# Programming",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis193",
      "desc": "C# is the premier programming language for the .NET framework. Over the last decade, the language has evolved to meet the needs of a variety of programming styles while supporting the ever-growing capabilities of the the .NET runtime and libraries. This course provides a thorough introduction to the C# language and the .NET framework, building on the skills gained in the introductory programming courses",
      "tags": [
        "CIS193"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS194",
      "title": "CIS194: Haskell",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis194",
      "desc": "Haskell is a high-level, purely functional programming language with a strong static type system and elegant mathematical underpinnings. It is being increasingly used in industry by organizations such as Facebook, AT&T, and NASA, along with several financial firms. We will explore the joys of function programming, using Haskell as a vehicle. The aim of the course will be to allo you to use Haskell to easily and conveniently write practical programs.",
      "tags": [
        "CIS194"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS195",
      "title": "CIS195: Mobile App Development",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis195/201617_tutorials.html",
      "desc": "This project-oriented course is centered around application development on current mobile platforms like iOS and Android. The first half of the course will involve fundamentals of mobile app development, where students learn about mobile app lifecycles, event-based programming, efficient resource management, and how to interact with the range of sensors available on modern mobile devices. In the second half of the course, students work in teams to conceptualize and develop a significant mobile application",
      "tags": [
        "CIS195"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS196",
      "title": "CIS196: Ruby on Rails Web Development",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis196",
      "desc": "This course will teach the fundamentals of developing web applications using Ruby on Rails, a rapid-development web framework developed by Basecamp, and adopted by companies like Airbnb, GitHub, Bloomberg, CrunchBase, and Shopify. The first part of the course will focus on Ruby, the language that powers Rails. Along the way, students will also pick up essential skills such as git, bash, HTML and CSS. The second part will focus on Rails, the web framework and will include all topics required to develop and deploy production-ready modern web applications with Rails.",
      "tags": [
        "CIS196"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS197",
      "title": "CIS197: JavaScript",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis197",
      "desc": "This course provides an introduction to modern web development frameworks, techniques, and practices used to deliver robust client side applications on the web. The emphasis will be on developing JavaScript programs that run in the browser. Topics covered include the JavaScript language, web browser internals, the Document Object Model (DOM), HTML5, client-side app architecture and compile-to-JS languages like (Coffeescript, TypeScript, etc.). This course is most useful for students who have some programming and web development experience and want to develop moderate JavaScript skills to be able to build complex, interactive applications in the browser.",
      "tags": [
        "CIS197"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS262",
      "title": "CIS262: Automata, Computability, and Complexity",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis262",
      "desc": "This course explores questions fundamental to computer science such as which problems cannot be solved by computers, can we formalize computing as a mathematical concept without relying upon the specifics of programming languages and computing platforms, and which problems can be solved efficiently. The topics include finite automata and regular languages, context-free grammars and pushdown automata, Turing machines and undecidability, tractability and NP-completeness.",
      "tags": [
        "CIS262"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS277",
      "title": "CIS277: Introduction to Computer Graphics",
      "source": "Penn",
      "year": "Spring 2016",
      "url": "https://www.seas.upenn.edu/~cis277/current/",
      "desc": "This course covers the technical aspects of 3D Modeling including viewing transformations, polygon and mesh data structures, keyframe animation, and interactive manipulation. You will write a series program assignments in C++ that build up to a 3D game final project.",
      "tags": [
        "CIS277"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS331",
      "title": "CIS331: Introduction to Networks and Security",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis331",
      "desc": "This course introduces principles and practices of computer and network security. We will cover basic concepts, threat models, and the security mindset; an introduction to cryptography and cryptographic protocols including encryption, authentication, message authentication codes, hash functions, public-key cryptography, and secure channels; an introduction to networks and network security including IP, TCP, routing, network protcols, web architecture, attacks, firewalls, and intrusion detection systems; an introduction to software security including defensive programming, memory protection, buffer overflows, and malware; and discuss broader issues and case studies such as privacy, security and the law, digital rights management, denial of service, and ethics.",
      "tags": [
        "CIS331"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS341",
      "title": "CIS341: Compilers and Interpreters",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis341",
      "desc": "You know how to program, but do you know how to implement a programming language? In CIS341 you'll learn how to build a compiler. Topics covered include: lexical analysis, grammars and parsing, intermediate representations, syntax-directed translation, code generation, type checking, simple dataflow and control-flow analyses, and optimizations. Along the way, we study objects and inheritance, first-class functions (closures), data representation and runtime-support issues such as garbage collection.",
      "tags": [
        "CIS341"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS371",
      "title": "CIS371: Computer Organization and Design",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis371",
      "desc": "This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",
      "tags": [
        "CIS371"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS391",
      "title": "CIS391: Artificial Intelligence",
      "source": "Penn",
      "year": "Fall 2015",
      "url": "https://www.seas.upenn.edu/~cis391/",
      "desc": "Artificial Intelligence is considered from the point of view of a resource-limited knowledge-based agent who must reason and act in the world. Topics include search, knowledge representation and reasoning, probabilistic reasoning, machine learning, logic, automatic theorem proving, and natural language processing. Programming assignments in Python.",
      "tags": [
        "CIS391"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS399",
      "title": "CIS399: The Science of Data Ethics",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis399",
      "desc": "This course is about the social and human problems that can arise from algorithms, AI and machine learning, and how we might design these technologies to be \"better behaved\" in the first place. It is first and foremost a science or engineering course, since we will be developing algorithm design principles. You can get a broad sense of course themes and topics by visiting the websites for the 2020 and 2019 offerings.",
      "tags": [
        "CIS399"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS455",
      "title": "CIS455: Internet and Web Systems",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis455",
      "desc": "This course focuses on the challenges encountered in building Internet and web systems: scalability, interoperability (of data and code), security and fault tolerance, consistency models, and location of resources, services, and data.",
      "tags": [
        "CIS455"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS460",
      "title": "CIS460: Interactive Computer Graphics",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis460",
      "desc": "This course focuses on programming the essential mathematical and geometric concepts underlying modern computer graphics. Using 3D interactive implementations, it covers fundamental topics such as mesh data structures, transformation sequences, rendering algorithms, and curve interpolation for animation.",
      "tags": [
        "CIS460"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS471",
      "title": "CIS471: Computer Organization and Design",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis471",
      "desc": "This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",
      "tags": [
        "CIS471"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS497",
      "title": "CIS497: Senior Capstone Project",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis497",
      "desc": "The goal of this course is to provide an opportunity to define, design, and execute a project of your own choosing. Evaluation is based on your ability to select an interesting topic, communicate your objectives in writing and presentations, to accurately gauge what resources are required to complete your chosen task, and your ability to execute your plan.",
      "tags": [
        "CIS497"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS500",
      "title": "CIS500: Software Foundations",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis500",
      "desc": "This course introduces basic concepts and techniques in the foundational study of programming languages. The central theme is the view of programs and programming languages as mathematical objects for which precise claims may be made and proved. Particular topics include operational techniques for formal definition of language features, type systems and type safety properties, polymorphism, constructive logic, and the Coq proof assistant.",
      "tags": [
        "CIS500"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS501",
      "title": "CIS501: Computer Architecture",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis501",
      "desc": "This course is an introductory graduate course on computer architecture with an emphasis on a quantitative approach to cost/performance design tradeoffs. The course covers the fundamentals of classical and modern uniprocessor design: performance and cost issues, instruction sets, pipelining, superscalar, out-of-order, and speculative execution mechanisms, caches, physical memory, virtual memory, and I/O. Other topics include: static scheduling, VLIW and EPIC, software speculation, long (SIMD) and short (multimedia) vector execution, multithreading, and an introduction to shared memory multiprocessors.",
      "tags": [
        "CIS501"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS505",
      "title": "CIS505: Software Systems",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis505",
      "desc": "This course provides an introduction to fundamental concepts of distributed systems, and the design principles for building large scale computational systems. Topics covered include communication, concurrency, programming paradigms, naming, managing shared state, caching, synchronization, reaching agreement, fault tolerance, security, middleware, and distributed applications.",
      "tags": [
        "CIS505"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS511",
      "title": "CIS511: Theory of Computation",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis511",
      "desc": "Review of regular and context-free languages and machine models. Turing machines and RAM models, Decidability, Halting problem, Reductions, Recursively enumerable sets, Universal TMs, Church/Turing thesis. Time and space complexity, hierarchy theorems, the complexity classes P, NP, PSPACE, L, NL, and co-NL",
      "tags": [
        "CIS511"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS515",
      "title": "CIS515: Fundamentals of Linear Algebra & Computation",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis515",
      "desc": "This course provides firm foundations in linear algebra and basic optimization techniques. Emphasis is placed on teaching methods and tools that are widely used in various areas of computer science. Both theoretical and algorithmic aspects will be discussed.",
      "tags": [
        "CIS515"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS519",
      "title": "CIS519: Applied Machine Learning",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis519",
      "desc": "Machine learning has been essential to the success of many recent technologies, including autonomous vehicles, search engines, genomics, automated medical diagnosis, image recognition, and social network analysis, among many others. This course will introduce the fundamental concepts and algorithms that enable computers to learn from experience, with an emphasis on their practical application to real problems. This course will introduce supervised learning (decision trees, logistic regression, support vector machines, Bayesian methods, neural networks and deep learning), unsupervised learning (clustering, dimensionality reduction), and reinforcement learning. Additionally, the course will discuss evaluation methodology and recent applications of machine learning, including large scale learning for big data and network analysis.",
      "tags": [
        "CIS519"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS520",
      "title": "CIS520: Machine Learning",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://alliance.seas.upenn.edu/~cis520/dynamic/2020/wiki/index.php?n=Main.HomePage",
      "desc": "This course covers the foundations of statistical machine learning. The focus is on probabilistic and statistical methods for prediction and clustering in high dimensions. Topics covered include linear and logistic regression, SVMs, PCA and dimensionality reduction, EM and HMMs, and deep learning. Elementary probability, calculus, and linear algebra. Basic programming experience.",
      "tags": [
        "CIS520"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS521",
      "title": "CIS521: Artificial Intelligence",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "http://artificial-intelligence-class.org/lectures.html#now",
      "desc": "This course investigates algorithms to implement resource-limited knowledge-based agents which sense and act in the world. Topics include, search, machine learning, probabilistic reasoning, natural language processing, knowledge representation and logic. After a brief introduction to the language, programming assignments wil l be in Python.",
      "tags": [
        "CIS521"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS522",
      "title": "CIS522: Deep Learning for Data Science",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis522",
      "desc": "Deep learning techniques now touch on data systems of all varieties. Sometimes, deep learning is a product; sometimes, deep learning optimizes a pipeline; sometimes, deep learning provides critical insights; sometimes, deep learning sheds light on neuroscience or vice versa. The purpose of this course is to deconstruct the hype by teaching deep learning theories, models, skills, and applications that are useful for applications.",
      "tags": [
        "CIS522"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS545",
      "title": "CIS545: Big Data Analytics",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis545",
      "desc": "In the new era of big data, we are increasingly faced with the challenges of processing vast volumes of data. Given the limits of individual machines (compute power, memory, bandwidth), increasingly the solution is to process the data in parallel on many machines. This course focuses on the fundamentals of scaling computation to handle common data analytics tasks.",
      "tags": [
        "CIS545"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS552",
      "title": "CIS552: Advanced Programming",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis552",
      "desc": "The goals of this course are twofold: (1) to take good programmers and turn them into excellent ones, and (2) to introduce them to a range of modern software engineering practices, in particular those embodied in advanced functional programming languages. Four courses involving significant programming and a discrete mathematics or modern algebra course.",
      "tags": [
        "CIS552"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS553",
      "title": "CIS553: Networked Systems",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis553",
      "desc": "This course provides an introduction to fundamental concepts in the design and implementation of networked systems, their protocols, and applications. Topics to be covered include: Internet architecture, network applications, addressing, routing, transport protocols, network security, and peer-to-peer networks. The course will involve written assignments, examinations, and programming assignments.. Students will work in teams to design and implement networked systems in layers, from routing protocols, transport protocols, to peer-to-peer networks.",
      "tags": [
        "CIS553"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS555",
      "title": "CIS555: Internet and Web Systems",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis555",
      "desc": "This course focuses on the challenges encountered in building Internet and web systems: scalability, interoperability (of data and code), security and fault tolerance, consistency models, and location of resources, services, and data.",
      "tags": [
        "CIS555"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS556",
      "title": "CIS556: Cryptography",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis556",
      "desc": "This course is an introduction to cryptography, both theory and applications, intended for advanced undergraduates and graduate students. Topics covered include symmetric cryptography, message authentication, public-key cryptography, digital signatures, cryptanalysis, cryptographic security, and secure channels, as well as a selection of more advanced topics such as zero-knowledge proofs, secure multiparty computation, privacy-enhancing technologies, or lattice-based cryptography.",
      "tags": [
        "CIS556"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS565",
      "title": "CIS565: GPU Programming and Architecture",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis565",
      "desc": "This course examines the architecture and capabilities of modern GPUs. The graphics processing unit (GPU) has grown in power over recent years, to the point where many computations can be performed faster on the GPU than on a traditional CPU. GPUs have also become programmable, allowing them to be used for a diverse set of applications far removed from traditional graphics settings.",
      "tags": [
        "CIS565"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS568",
      "title": "CIS568: Game Design Practicum",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis568",
      "desc": "The objective of the game design practicum is to provide students with hands on experience designing and developing 3D computer games.",
      "tags": [
        "CIS568"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "penn-Spring-CIS571",
      "title": "CIS571: Computer Organization and Design",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis571",
      "desc": "This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",
      "tags": [
        "CIS571"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS610",
      "title": "CIS610: Advanced Geometric Methods in Computer Science",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis610",
      "desc": "The purpose of this course is to present some of the advanced geometric methods used in geometric modeling, computer graphics, computer vision, etc.",
      "tags": [
        "CIS610"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "penn-Spring-CIS620",
      "title": "CIS620: Advanced Topics in Machine Learning",
      "source": "Penn",
      "year": "Spring 2021",
      "url": "https://www.seas.upenn.edu/~cis620",
      "desc": "This course covers a variety of advanced topics in machine learning, such as the following: statistical learning theory (statistical consistency properties of surrogate loss minimizing algorithms); approximate inference in probabilistic graphical models (variational inference methods and sampling-based inference methods); structured prediction (algorithms and theory for supervised learning problems involving complex/structured labels); and online learning in complex/structured domains.",
      "tags": [
        "CIS620"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP",
      "title": "COMP7 - Bioinformatics",
      "source": "Tufts",
      "year": "Fall 2019",
      "url": "http://www.cs.tufts.edu/comp/7",
      "desc": "This course is designed to introduce future biological scientists and physicians to bioinformatics tools, analysis methods, \"systems thinking,\" and simple computer scripting. Upon completion of the course, students should be more comfortable working with the vast amounts of biomedical information that will be relevant to their work in the coming decades.",
      "tags": [
        "COMP"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP",
      "title": "COMP9 - Exploring Computer Science",
      "source": "Tufts",
      "year": "Spring 2011",
      "url": "http://www.cs.tufts.edu/comp/9",
      "desc": "The goals of this course are: to have students gain an appreciation of the areas that make up modern computer science; to understand that computers have limitations; to have a working command of the Ruby programming language such that they could approach a repetitive task programmatically rather than tediously; to develop problem-solving skills and computational thinking.",
      "tags": [
        "COMP"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP15",
      "title": "COMP15: Data Structures",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/15",
      "desc": "A second course in computer science. Data structures and algorithms are studied through major programming projects in the C++ programming language. Topics include linked lists, trees, graphs, dynamic storage allocation, and recursion.",
      "tags": [
        "COMP15"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP23",
      "title": "COMP23: Game Design",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://tuftsdev.github.io/GameDevelopment/",
      "desc": "Principles, design, and development of games. Game structure, engineering, physics, testing, 2D and 3D rendering, user interfaces, sound, and animation. Security of online games. Applications of Economics, Music, and Psychology in crafting games. Projects include writing game design documents, developing an interactive fiction game, and building a functional game in a team.",
      "tags": [
        "COMP23"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP40",
      "title": "COMP40: Machine Structure & Asssembly-Language Programming",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/40",
      "desc": "In COMP 40, you will learn about both high-level programming design principles and the low-level structure of computing machines. Design strategies will focus on modularity, abstraction, and separation of interface from implementation. The following topics on machine structure are covered: memory, caches, registers, machine arithmetic, and bitwise operations. We will also investigate the structure of assembly code, relocatable object code, binary machine code, and the translations between them. You will gain a deep understanding of all of these concepts via large-scale, realistic programming projects.",
      "tags": [
        "COMP40"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP50",
      "title": "COMP50: Problem Solving by Computer",
      "source": "Tufts",
      "year": "Fall 2013",
      "url": "http://www.cs.tufts.edu/comp/50",
      "desc": "COMP 50 is a course in problem-solving by computer, where you will learn to solve problems ``starting from a blank page.'' The course is open to any student who is motivated to work hard, regardless of background. ``Starting from a blank page'' means that you have some opportunity to design a solution from scratch, as opposed to starting with a design or incomplete software prepared by the course staff.",
      "tags": [
        "COMP50"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP61",
      "title": "COMP61: Discrete Mathematics",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/61",
      "desc": "Sets, relations and functions, logic and methods of proof, combinatorics, graphs and digraphs.",
      "tags": [
        "COMP61"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP103",
      "title": "COMP103: Introduction to VLSI Design",
      "source": "Tufts",
      "year": "Fall 2003",
      "url": "http://www.cs.tufts.edu/comp/103",
      "desc": "This course focuses on the basics of designing VLSI circuits and modules.  The topics covered are:  characteristics of NMOS and PMOS transistors and CMOS inverters, designing combinational and sequential logic in CMOS, basic design principals that consider timing and interconnect, memory and array structures and overviews of current design practices.",
      "tags": [
        "COMP103"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP112",
      "title": "COMP112: Networks and Protocols",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/112",
      "desc": "Design and implementation of computer communication networks, protocols, and applications, with an emphasis on the Internet protocol suite. Network architectures and programming interfaces. Data link, transport, and routing protocols. Congestion sources and remedies. Addressing and naming in local area and wide area networks. Network security and network management.",
      "tags": [
        "COMP112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP115",
      "title": "COMP115: Database Systems",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/115",
      "desc": "Fundamental concepts of database management systems. Topics include: data models (relational, object-oriented, and others); the SQL query language; implementation techniques of database management systems (storage and index structures, concurrency control, recovery, and query processing); management of unstructured and semistructured data; and scientific data collections.",
      "tags": [
        "COMP115"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP116",
      "title": "COMP116: Computer System Security",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "https://comp116.org/",
      "desc": "A systems perspective on host-based and network-based computer security. Current vulnerabilities and measures for protecting hosts and networks. Firewalls and intrusion detection systems. Principles illustrated through hands-on programming projects.",
      "tags": [
        "COMP116"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP117",
      "title": "COMP117: Internet-scale Distributed Systems",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/117",
      "desc": "We will introduce and draw comparisons with more traditional distributed system designs, including distributed objects, client/server, pub/sub, reliable queuing, etc. We will also study a few (easily understood) research papers and some of the core specifications of the Web. Specific topics to be covered include: global uniform naming; location-independence; layering and leaky abstractions; end-to-end arguments and decentralized innovation; Metcalfe's law and network effects; extensibility and evolution of distributed systems; declarative vs. procedural languages; Postel's law; caching; and HTML/XML/JSON document-based computing vs. RPC.",
      "tags": [
        "COMP117"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP118",
      "title": "COMP118: Cloud Computing",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/118",
      "desc": "Cloud computing fundamentals, including cloud architecture, scalability, elasticity, and metrics of cloud performance including service-level objectives (SLOs) and service-level agreements (SLAs). Cloud programming models and abstractions including Map/Reduce. Persistent storage mechanisms, including key/value stores and cold storage. Geo-distributed cloud systems. Cloud networking, including data center architecture, software defined networking, and middleboxes. Cloud security.",
      "tags": [
        "COMP118"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP120",
      "title": "COMP120: Web Programming and Engineering",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/120",
      "desc": "Web applications as complex systems that deliver a plethora of functionality to a large number of users, and exhibit unique behaviors and demands in terms of performance, scalability, usability, and security. How the web works, limitations of client-side and server-side technologies including frameworks and APIs, content optimization, and data persistence and storage. Projects will involve search, using the cloud infrastructure, location-based services, mobile web development, and using tools to assess the security and privacy of web applications.",
      "tags": [
        "COMP120"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP121",
      "title": "COMP121: Software Engineering",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/121",
      "desc": "Software engineering is an engineered discipline in which the aim is the production of software products, delivered on time and within a set budget, that satisfies the client’s needs. It covers all aspects of software production ranging from the early stage of product concept to design and implementation to post-delivery maintenance.",
      "tags": [
        "COMP121"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP131",
      "title": "COMP131: Artificial Intelligence",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/131",
      "desc": "History, theory, and computational methods of artificial intelligence. Basic concepts include representation of knowledge and computational methods for reasoning. One or two application areas will be studied, to be selected from expert systems, robotics, computer vision, natural language understanding, and planning.",
      "tags": [
        "COMP131"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP135",
      "title": "COMP135: Introduction to Machine Learning",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/135",
      "desc": "An overview of methods whereby computers can learn from data or experience and make decisions accordingly. Topics include supervised learning, unsupervised learning, reinforcement learning, and knowledge extraction from large databases with applications to science, engineering, and medicine.",
      "tags": [
        "COMP135"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP136",
      "title": "COMP136: Statistical Pattern Recognition",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/136",
      "desc": "This course provides the theoretical and computational foundations for probabilistic machine learning. The focus is on probabilistic models, which are especially useful for any application where observed data could be noisy, sometimes missing, or not available in large quantities. We emphasize representing uncertainty with formal distributions and trying to average over these distributions when making decisions (as done in the Bayesian approach).",
      "tags": [
        "COMP136"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP139",
      "title": "COMP139: Ethics for AI, Robotics, and Human-Robot Interaction",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/139",
      "desc": "This course will provide an overview of the ethical problems and challenges prompted by current and future technological advances in AI, robotics, and human-robot interaction. It will start by reviewing the philosophical foundations of the main ethical theories (virtue ethics, deontology, utilitarianism) and link them to different algorithmic approaches in artificial agents (rule-based, utility-based, behavior-based, etc.).  Explicating and contrasting the assumptions underlying each algorithmic approach (e.g., policy-based decision-making vs. rule-based reasoning), functional tradeoffs and implications for autonomous robots and AI systems will be discussed.",
      "tags": [
        "COMP139"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP140",
      "title": "COMP140: Advanced Computer Architecture",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/140",
      "desc": "Fundamentals of Computer Architecture, and the Current State of Computer, Hardware, The Processor: Instruction Set Principles, The Processor: Building a Data Path, Instruction Pipelining: Data and Control Hazards, Exploiting Memory Hierarchy: Caches, Virtual Memory, Data-Level Parallelism (Vector, SIMD, and GPU architectures), and Building a MIPS simulator.",
      "tags": [
        "COMP140"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP160",
      "title": "COMP160: Algorithms",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/160",
      "desc": "Introduction to the study of algorithms. Strategies such as divide-and-conquer, greedy methods, and dynamic programming. Graph algorithms, sorting, searching, integer arithmetic, hashing, and NP-complete problems.",
      "tags": [
        "COMP160"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP163",
      "title": "COMP163: Computational Geography",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/163",
      "desc": "Design and analysis of algorithms for geometric problems. Topics include proof of lower bounds, convex hulls, searching and point location, plane sweep and arrangements of lines, Voronoi diagrams, intersection problems, decomposition and partitioning, farthest-pairs and closest-pairs, rectilinear computational geometry.",
      "tags": [
        "COMP163"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP167",
      "title": "COMP167: Introduction to Computational Biology",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/167",
      "desc": "Comprehend the biological background, nature, and relevance of computational problems in molecular biology. Assess the efficiency of computational methods for handling data-rich problems in the field. Understand computational techniques and probabilistic models for working effectively with large data sets. Discuss and evaluate tradeoffs involved in choosing how to tackle hard computational problems.",
      "tags": [
        "COMP167"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "tufts-Spring-COMP170",
      "title": "COMP170: Computation Theory",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/170",
      "desc": "Models of computation: Turing machines, pushdown automata, and finite automata. Grammars and formal languages including context-free languages and regular sets. Important problems including the halting problem and language equivalence theorems.",
      "tags": [
        "COMP170"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP175",
      "title": "COMP175: Graphics",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/175",
      "desc": "This course explores the fundamentals of computer graphics, including 3D rendering via ray casting, ray tracing and radiosity, viewing transformations, 3D shape representation, and an introduction to modeling and computer animation. Assignments and projects require a good working knowledge of linear algebra and the C and C++ programming languages.",
      "tags": [
        "COMP175"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP177",
      "title": "COMP177: Data Visualization",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/177",
      "desc": "Visualization as a tool for data analysis, recall, inference, and decision-making. Tools for visual description and presentation. Principles of effective visualization, including data-visual mapping, interaction techniques, color theory, cognitive and perceptual psychology, and human factors of visual depictions of data.",
      "tags": [
        "COMP177"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tufts-Spring-COMP189",
      "title": "COMP189: The Engineering Method of Technical Writing",
      "source": "Tufts",
      "year": "Spring 2021",
      "url": "http://www.cs.tufts.edu/comp/189",
      "desc": "The techniques taught in this class have been developed through many years' research, primarily at the University of Chicago and at Stony Brook University. With these techniques, you will produce texts that readers like better, and you will produce them more quickly, more consistently, and with less effort than you do now. And by the end of the class, you will be ready to make your own decisions about what further techniques you wish to master in the future.",
      "tags": [
        "COMP189"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS1100",
      "title": "CS1100: Introduction to Computing Using Python",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1110/2021sp/schedule/",
      "desc": "Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recusion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding.",
      "tags": [
        "CS1100"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS1112",
      "title": "CS1112: Introduction to Computing Using MATLAB",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1112",
      "desc": "Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays, recursion, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation.",
      "tags": [
        "CS1112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS1114",
      "title": "CS1114: Introduction to Computing using Matlab and Robotics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1114",
      "desc": "This is an honors course that teaches basic programming concepts to students using two robot platforms: the Sony Aibo and the Wowwee Rovio.",
      "tags": [
        "CS1114"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS/INF",
      "title": "CS/INFO 1305: Computation & Culture in the Digital Age",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1305",
      "desc": "Computing and information science is relevant to many aspects of our lives, from explorations in science and medicine, the arts, to commerce and entertainment. This course explores some ideas and technologies of computing and information science as well as their role in society from the ethical, legal, historical, and cultural perspectives. Students are introduced to the user-centered development life cycle for web site design with a focus on critique and usability testing.",
      "tags": [
        "CS/INF"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS1340",
      "title": "CS1340: Choices and Consequences in Computing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1340",
      "desc": "As this is an area in which the pace of technological development raises new challenges on a regular basis, the broader goal of the course is to enable students to develop their own analyses of new situations as they emerge at the interface of computing and societal interests.",
      "tags": [
        "CS1340"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS1380",
      "title": "CS1380: Data Science for All",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs1380",
      "desc": "This course provides an introduction to data science. Given data from economics, medicine, biology, or physics, collected from internet denizens, survey respondents, or wireless sensors, how can one understand the phenomenon generating the data, make predictions, and improve decisions?",
      "tags": [
        "CS1380"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS2022",
      "title": "CS2022: Introduction to C",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2022",
      "desc": "This course provides a brief introduction to the C programming language and standard libraries for students with programming experience at the CS1110 level. We will cover basic syntax, programming paradigm, standard libraries, and debugging for C on the GNU/Linux platform.",
      "tags": [
        "CS2022"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2026",
      "title": "CS2026: Introduction to C#",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2026",
      "desc": "The primary goal of this course is to introduce the C# programming language. Some of the C# features are already found in existing languages, while others are unique to C#. We will focus mainly on the new features in C# with respect to C++ and Java.",
      "tags": [
        "CS2026"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2042",
      "title": "CS2042: Unix Tools",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2042",
      "desc": "An introduction to Unix, emphasizing tools for file management, communication, process control, managing your Unix environment, and rudimentary shell scripts. Knowledge of at least one programming lanugauge is encouraged. Assignments assume no previous knowledge of Unix or expertise in any particular language..",
      "tags": [
        "CS2042"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2044",
      "title": "CS2044: Advanced Unix Tools",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2044",
      "desc": "A focus on GNU Linux/Unix as a programming environment for people with a basic knowledge of Linux/Unix and experience programming in at least one language. Projects cover advanced shell scripts (bash) Makefiles, and more modern scripting languages such as Perl and Python. Students with little or no experience with Unix should take CS 2042 first.",
      "tags": [
        "CS2044"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2046",
      "title": "CS2046: Introduction to Mobile Application Development",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2046",
      "desc": "A rapid introduction to developing applications for mobile platforms, using the Android platform. Covers mobile user interface design, methods for storing and retrieving information, Internet communication, multimedia and mobile security. Aimed at students with moderate Java experience, at least at the level of CS 2110.",
      "tags": [
        "CS2046"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2049",
      "title": "CS2049: Intermediate iPhone Development",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2049",
      "desc": "The course covers intermediate topics in iOS development with a hands-on approach. During each lecture students develop an application along with the lecturer. Covered topic include AVFoundation (audio and video framework, including video capture), SpriteKit, CoreMotion, Auto-Layout, and multi-threaded application development.",
      "tags": [
        "CS2049"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS2112",
      "title": "CS2112: Object-Oriented Design and Data Structures (Honors)",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2112",
      "desc": "Topics are similar to those in CS 2110 but are covered in greater depth, with more challenging assignments. Topics include object-oriented programming, program structure and organization, program reasoning using specifications and invariants, recursion, design patterns, concurrent programming, graphical user interfaces, data structures as in CS 2110, sorting and graph algorithms, asymptotic complexity, and simple algorithm analysis. Java is the principal programming language.",
      "tags": [
        "CS2112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS2802",
      "title": "CS2802: Discrete Structures (Honors)",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs2802",
      "desc": "Covers the mathematics that underlies most of computer science. Topics include mathematical induction; logical proof; propositional and predicate calculus; combinatorics and discrete mathematics; some basic elements of basic probability theory; basic number theory; sets, functions, and relations; graphs; and finite-state machines. These topics are discussed in the context of applications to many areas of computer science, such as the RSA cryptosystem and web searching.",
      "tags": [
        "CS2802"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS3110",
      "title": "CS3110: Data Structures and Functional Programming",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs3110/2021sp/textbook/",
      "desc": "Advanced programming course that emphasizes functional programming techniques and data structures. Programming topics include recursive and higher-order procedures, models of programming language evaluation and compilation, type systems, and polymorphism. Data structures and algorithms covered include graph algorithms, balanced trees, memory heaps, and garbage collection. Also covers techniques for analyzing program performance and correctness.",
      "tags": [
        "CS3110"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS3152",
      "title": "CS3152: Introduction to Computer Game Architecture",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs3152",
      "desc": "A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience.",
      "tags": [
        "CS3152"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS3220",
      "title": "CS3220: Computational Mathematics for Computer Science",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs3220",
      "desc": "Introduction to computational mathematics covering topics in (numerical) linear algebra, statistics, and optimization. Topics included are those of particular relevance to upper-division computer science courses in machine learning, numerical analysis, graphics, vision, robotics, and more. An emphasis is placed both on understanding core mathematical concepts and introducing associated computational methodologies.",
      "tags": [
        "CS3220"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS3420",
      "title": "CS3420: Embedded Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs3420",
      "desc": "An introduction to the design of embedded systems, with an emphasis on understanding the interaction between hardware, software, and the physical world. Topics covered include assembly language programming, interrupts, I/O, concurrency management, scheduling, resource management, and real-time constraints.",
      "tags": [
        "CS3420"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS3810",
      "title": "CS3810: Introduction to Theory of Computing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs3810",
      "desc": "CS 3810 is an introduction to the modern theory of computing: Automata theory, formal languages, and effective computability.",
      "tags": [
        "CS3810"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4110",
      "title": "CS4110: Programming Languages and Logics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4110",
      "desc": "An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.",
      "tags": [
        "CS4110"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4120",
      "title": "CS4120: Introduction to Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4120",
      "desc": "An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.",
      "tags": [
        "CS4120"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4121",
      "title": "CS4121: Practicum in Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4121",
      "desc": "Students will build a working compiler for an object-oriented language.",
      "tags": [
        "CS4121"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4152",
      "title": "CS4152: Advanced Topics in Computer Game Architecture",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4152",
      "desc": "Project-based follow-up course to CS 3152. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices. There is a special emphasis on developing games that can be submitted to festivals and competitions.",
      "tags": [
        "CS4152"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4160",
      "title": "CS4160: Formal Verification",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4160",
      "desc": "An introduction to formal verification, focusing on correctness of functional and imperative programs relative to mathematical specifications. Topics include computer-assisted theorem proving, logic, programming language semantics, and verification of algorithms and data structures. Assignments involve extensive use of a proof assistant to develop and check proofs.",
      "tags": [
        "CS4160"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4220",
      "title": "CS4220: Numerical Analysis: Linear and Nonlinear Problems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4220",
      "desc": "Introduction to the fundamentals of numerical analysis: error analysis, approximation, interpolation, numerical integration. In the second half of the course, the above are used to build approximate solvers for ordinary and partial differential equations. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.",
      "tags": [
        "CS4220"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4320",
      "title": "CS4320: Introduction to Database Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4320",
      "desc": "Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database designs, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelation data storage systems.",
      "tags": [
        "CS4320"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4321",
      "title": "CS4321: Practicum in Database Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4321",
      "desc": "Students build part of a database system in Java.",
      "tags": [
        "CS4321"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4410",
      "title": "CS4410: Operating Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4410",
      "desc": "Introduction to the design of systems programs, with emphasis on multiprogrammed operating systems. Topics include concurrency, synchronization, deadlocks, memory management, protection, input-output methods, networking, file systems and security. The impact of network and distributed computing environments on operating systems is also discussed.",
      "tags": [
        "CS4410"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4411",
      "title": "CS4411: Practicum in Operating Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4411",
      "desc": "Studies the practical aspects of operating systems through the design and implementation of an operating system kernel that supports multiprogramming, virtual memory, and various input-output devices. All the programming for the project is in a high-level language.",
      "tags": [
        "CS4411"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4414",
      "title": "CS4414: Systems Programming",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4414",
      "desc": "CS 4414 exposes students to programming applications at the systems level and to the operating-systems abstractions that these applications depend on. Students learn to make design choices guided by performance, hardware, security and other systems properties. Operating systems abstractions covered include process and memory management, file systems and storage, networking, threads and multiprocess concurrency along with synchronization abstractions including locks and condition variables, and security abstractions for isolation and authorization.",
      "tags": [
        "CS4414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4420",
      "title": "CS4420: Computer Architecture",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4420",
      "desc": "This course aims to provide a strong foundation for students to understand modern computer system architecture and to apply these insights and principles to future computer designs",
      "tags": [
        "CS4420"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4450",
      "title": "CS4450: Introduction to Computer Networks",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4450",
      "desc": "This course introduces the basic architectural and design principles of computer networking including the design of communication protocols, congestion control, routing and switching, Internet, data center networks and wireless networks.",
      "tags": [
        "CS4450"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4620",
      "title": "CS4620: Introduction to Computer Graphics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4620",
      "desc": "Introduction to the principles of computer graphics in two and three dimensions.  Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. This course emphasizes fundamental techniques in graphics, with both written and practical assignments.  May be taken with or without concurrent enrollment in CS 4621.",
      "tags": [
        "CS4620"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4564",
      "title": "CS4564: Design in Virtual Reality",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4654",
      "desc": "This class has been organized as a design studio with collaboration between architectural designers and computer graphics majors. A significant amount of reading in multiple disciplines (visual perception, digital photography, modeling, geometry capture, color science, display technology & computer graphics) will be required.",
      "tags": [
        "CS4564"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4701",
      "title": "CS4701: Practicum in Artificial Intelligence",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4701",
      "desc": "Topics include knowledge representation systems, search procedures, game-playing, automated reasoning, concept learning, reinforcement learning, neural nets, genetics algorithms, planning, and truth maintenance.",
      "tags": [
        "CS4701"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4732",
      "title": "CS4732: Ethical and Social Issues in AI",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4732",
      "desc": "We will consider social and ethical issues in AI, including some subset the following: potential job losses in AI; the ethics of computer making decisions on our behalf (perhaps using machine learning)' ethical issues involving robots, autonomous cars, and drones; and privacy and surveillance.  The course will run for 7-8 weeks.  Most weeks, there will be an initial one-hour lecture (typically offered by a specialist in some area), followed by a discussion session with the speaker.",
      "tags": [
        "CS4732"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4750",
      "title": "CS4750: Foundations of Robotics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4750",
      "desc": "Robotics is interdisciplinary and draws inspiration from many different fields towards solving a variety of tasks in real-world environments using physical systems. This course is a challenging introduction to basic computational concepts used broadly in robotics.",
      "tags": [
        "CS4750"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4758/6758",
      "title": "CS4758/6758: Robot Learning",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4758",
      "desc": "We study the problem of how a robot can learn to perceive its world well enough to act in it, to make reliable plans, and to learn from its own experience. The focus will be on algorithms and machine learning techniques for autonomous operation of robots.",
      "tags": [
        "CS4758/6758"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS4786",
      "title": "CS4786: Machine Learning for Data Science",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4786",
      "desc": "An introduction to machine learning for data-science applications. Topics include dimensionality-reduction (such as principal components analysis, canonical correlation analysis, and random projection); clustering (such as k-means and single-link); probabilistic modeling (such as mixture models and the EM algorithm).",
      "tags": [
        "CS4786"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4787",
      "title": "CS4787: Principles of Large-Scale Machine Learning Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4787",
      "desc": "An introduction to the mathematical and algorithms design principles and tradeoffs that underlie large-scale machine learning on big training sets. Topics include: stochastic gradient descent and other scalable optimization methods, mini-batch training, accelerated methods, adaptive learning rates, parallel and distributed training, and quantization and model compression.",
      "tags": [
        "CS4787"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4810",
      "title": "CS4810: Introduction to Theory of Computing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4810",
      "desc": "Introduction to the modern theory of computing: automata theory, formal languages, and effective computability.",
      "tags": [
        "CS4810"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CSS4812",
      "title": "CSS4812: Quantum Information Processing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4812",
      "desc": "This course is intended for physicists, unfamiliar with computational complexity theory or cryptography, and for computer scientists and mathematicians with prior exposure to quantum mechanics. Topics include: simple quantum algorithms, error correction, cryptography, teleportation, and uses of quantum computing devices either currently available or to be available in the near future.",
      "tags": [
        "CSS4812"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4814",
      "title": "CS4814: Introduction to Computational Complexity",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4814",
      "desc": "Explores the power and limitations of efficient computation. Understanding how the notion of efficient computation changes with respect to resources such as time, space, randomness, advice, and interaction. Concrete computational models that we will study will include Turing machines, Boolean circuits, Decision trees, and Branching Programs. Advanced topics may include error-correcting codes, probabilistic checkable proofs, and circuit lower bounds.",
      "tags": [
        "CS4814"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CSS4820",
      "title": "CSS4820: Introduction to Analysis of Algorithms",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4820",
      "desc": "Develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology.",
      "tags": [
        "CSS4820"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS4860",
      "title": "CS4860: Applied Logic",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs4860",
      "desc": "Topics chosen from the following: Propositional Logic, First-Order Logic, and Higher Order logic, both classical and intuitionistic versions, including completeness, incompleteness and compactness results. Natural deduction and tableaux style logics and connection to  the lambda calculus and programming languages and logics, and program verification.",
      "tags": [
        "CS4860"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5120",
      "title": "CS5120: Introduction to Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5120",
      "desc": "An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.",
      "tags": [
        "CS5120"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5121",
      "title": "CS5121: Practicum in Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5121",
      "desc": "Students will build a working compiler for an object-oriented language.",
      "tags": [
        "CS5121"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5142",
      "title": "CS5142: Scripting Languages",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5142",
      "desc": "Perl, PHP, JavaScript, VisualBasic -- they are often-requested skills for employment, but most of us do not have the time to find out what they are all about. In this course, you learn how to use scripting languages for rapid prototyping, web programming, data processing, and application extension. Besides covering traditional programming languages concepts as they apply to scripting (e.g., dynamic typing and scoping), this course looks at new concepts rarely found in traditional languages (e.g., string interpolation, hashes, and polylingual code). Through a series of small projects, you use different languages to achieve programming tasks that highlight the strengths and weaknesses of scripting. As a side effect, you practice teaching yourself new languages.",
      "tags": [
        "CS5142"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5150",
      "title": "CS5150: Software Engineering",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5150",
      "desc": "Introduction to the practical problems of specifying, designing, building, testing, and delivering reliable software systems. Special topics include professionalism, project management, and the legal framework for software development. As a central part of the course, student teams carry out projects for real clients, using concepts of agile software development. Each project includes all aspects of software development from a feasibility study to final delivery.”",
      "tags": [
        "CS5150"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5152",
      "title": "CS5152: Open-Source Software Engineering",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5152",
      "desc": "Students will collaborate with mentors from industry to learn how to become a part of the open-source community and contribute to open-source projects, with students actively committing to open-source projects throughout the semester. Lectures, in addition to discussing open-source processes and tools, will teach students how to be proactive members of larger systems, such as teams, projects, companies, and society at large, by delving into topics from psychology, sociology, business, economics, gender studies, ethnic studies, writing, speaking, and ethics.",
      "tags": [
        "CS5152"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5154",
      "title": "CS5154: Software Testing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5154",
      "desc": "Software testing is a widely used approach for detecting flaws in software. Systematic and organized approaches to software testing will be covered, including test adequacy criteria, manual and automatic generation of test inputs, regression testing, debugging, and dynamic analyses for detecting known classes of software errors.",
      "tags": [
        "CS5154"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5220",
      "title": "CS5220: Applications of Parallel Computers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5220",
      "desc": "Models for parallel programming and survey of parallel machines. Existing parallel programming languages, vectorizing compilers, and parallel libraries and toolboxes.",
      "tags": [
        "CS5220"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5223",
      "title": "CS5223: Numerical Analysis: Linear and Nonlinear Problems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5223",
      "desc": "Scientists, engineers, mathematicians, and computer scientists use models to describe everything from the ringing of bells to the evolution of animal populations to the relationships between web pages. We turn to computers to help us analyze all but the simplest such models; but how can an inherently discrete device such as a computer solve continuous problems quickly and reliably? This is the fundamental question we address in CS 4220: Numerical Analysis: Linear and Nonlinear Problems.",
      "tags": [
        "CS5223"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5320",
      "title": "CS5320: Introduction to Database Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5320",
      "desc": "Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database design, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelational data storage systems.",
      "tags": [
        "CS5320"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5321",
      "title": "CS5321: Practicum in Database Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5321",
      "desc": "Students build part of a real database system in C++ Java.",
      "tags": [
        "CS5321"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5356",
      "title": "CS5356: Building Startup Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5356",
      "desc": "This course aims to bridge the gap between academic studies of computer science and production software engineering. The course provides a fast-paced introduction to key tools and techniques that can facilitate the building of prototypes and of actual working systems. It introduces technologies for building Web applications and mobile applications, systems for effective storage of data, and tools that support and ease code writing, such as distributed version-control systems, editors and debuggers.",
      "tags": [
        "CS5356"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5412",
      "title": "CS5412: Cloud Computing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5412",
      "desc": "Focuses on cloud computing, large-scale Internet applications, and other practical issues in designing and implementing trustworthy, scalable distributed software.",
      "tags": [
        "CS5412"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5413",
      "title": "CS5413: High Performance Systems and Networking",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5413",
      "desc": "This is a graduate-level course targeting Masters and PhD students. This course broadly examines high performance systems and networks. It especially covers systems and networks built from low cost commodity components like modern datacenters that provide platforms for cloud and other online services.",
      "tags": [
        "CS5413"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5430",
      "title": "CS5430: System Security",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5430",
      "desc": "Discusses security and survivability for computers and communications networks. Includes discussions of policy issues (e.g., the national debates on cryptography policy) as well as discussions of the technical alternatives for implementing the properties that comprise “trustworthiness” in a computing system. Covers mechanisms for authorization and authentication as well as cryptographic protocols.",
      "tags": [
        "CS5430"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5432",
      "title": "CS5432: Advanced System Security",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5432",
      "desc": "This course is concerned with system security solutions that build on ideas from logic, programming languages, and distributed systems. Topics include: information-flow policies and enforcement (static and dynamic), authorization logics, measured principals, distributed trust, and moving-target defenses. Some homework assignments could involve programming.",
      "tags": [
        "CS5432"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5434",
      "title": "CS5434: Defending Computer Networks",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5434",
      "desc": "In this course, we discuss attacks on operational computer networks, with a focus on how to prevent them or detect them if we fail to prevent them.",
      "tags": [
        "CS5434"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5437",
      "title": "CS5437: Principals and Practice of Cryptocurrencies",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5437",
      "desc": "An introduction to the theoretical concepts and practical concerns of cybercurrencies. Topics include hashing, cryptographic signatures, peer to peer networks, distributed consensus with proof of work, and the security and privacy of cyber-currencies. Also discussed are Bitcoin’s use and ecosystem, digital currency history, economy and legal aspects.",
      "tags": [
        "CS5437"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5438",
      "title": "CS5438: Security and Privacy: Practice and Case Studies",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5438",
      "desc": "This course surveys computer security and digital privacy from a practical perspective. Topics include computer attacks and defenses, current practices and policies in industry and government, security and privacy entrepreneurship, laws and regulations, \"cyberwarfare,\" surveillance, and economics of security.",
      "tags": [
        "CS5438"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5620",
      "title": "CS5620: Introduction to Computer Graphics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5620",
      "desc": "Introduction to the principles of computer graphics in two and three dimensions. Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. Homework assignments require some Java programming.",
      "tags": [
        "CS5620"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5621",
      "title": "CS5621: Computer Graphics Practicum",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5621",
      "desc": "Provides CS 4620 students with hands-on experience in computer graphics programming on modern graphics hardware. This course emphasizes effective use of graphics APIs and the architecture of graphics applications.  A final project involves building a substantial interactive graphics system.  The course uses Javascript and WebGL for code development.",
      "tags": [
        "CS5621"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5643",
      "title": "CS5643: Physically Based Animation for Computer Graphics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5643",
      "desc": "Modern computer animation and interactive digital entertainment are making increasingly sophisticated use of tools from scientific and engineering computing. This course introduces students to common physically based modeling techniques for animation of virtual characters, fluids and gases, rigid and deformable solids, and other systems. Aspects of interactive simulation and multi-sensory feedback will also be discussed.  A hands-on programming approach will be taken, with an emphasis on small interactive computer programs.",
      "tags": [
        "CS5643"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5650",
      "title": "CS5650: Virtual and Augmented Reality",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5650",
      "desc": "Offered in New York City at Cornell Tech. Intermediate programming ability in C# or other object-oriented lagnuages. Familiarity with 3D game engines or strong desire to learn basic linear algebra.",
      "tags": [
        "CS5650"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5670",
      "title": "CS5670: Introduction to Computer Vision",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5670",
      "desc": "An in-depth introduction to computer vision. The goal of computer vision is to compute properties of our world-the 3D shape of an environment, the motion of objects, the names of people or things-through analysis of digital images or videos.  The course covers a range of topics, including 3D reconstruction, image segmentation, object recognition, and vision algorithms from the Internet, as well as key algorithmic, optimization, and machine learning techniques, such as graph cuts, non-linear least squares, and deep learning.",
      "tags": [
        "CS5670"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5678",
      "title": "CS5678: Topics in Mixed Reality",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5678",
      "desc": "Head-worn mixed reality devices require real-time computer vision for multiple purposes, such as motion tracking, scene understanding, and interaction input. This course presents a hands-on overview of these computer vision techniques for mixed reality, from monocular pose estimation to stereo-view hand tracking, and scene reconstruction with depth sensors and multiple cameras.",
      "tags": [
        "CS5678"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS5740",
      "title": "CS5740: Natural Language Processing",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5740",
      "desc": "This course constitutes an introduction to natural language processing (NLP), the goal of which is to enable computers to use human languages as input, output, or both. NLP is at the heart of many of today’s most exciting technological achievements, including machine translation, automatic conversational assistants and Internet search.",
      "tags": [
        "CS5740"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5831",
      "title": "CS5831: Security Protocols and Privacy",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5831",
      "desc": "This course covers advanced security and privacy protocols. Topics include basic key-exchange protocols, Internet Security Protocols (e.g., SSL/TLS), Oblivious RAM, Secure Two-party Computation, Voting protocols, and methods for data sanitization (i.e., how to ensure that publicly released data does not violate individuals’ privacy).",
      "tags": [
        "CS5831"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS5846",
      "title": "CS5846: Decision Theory I",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs5846",
      "desc": "Research on decision theory resides in a variety of disciplines including computer science, economics, game theory, philosophy, and psychology. This course attempts to integrate these various approaches. The course is taught jointly by faculty from Game Theory and Computer Science.",
      "tags": [
        "CS5846"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6112",
      "title": "CS6112: Foundations of Concurrency",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6112",
      "desc": "CS 6112 provides an introduction to the theoretical foundations of languages for concurrent programming. It presents general models (e.g., CSP, CCS, pi-calculus), their associated reasoning techniques, and topics such as coordination, fault-tolerance, mobility, security, and scalability. The course material will draw on both classic and recent papers. Although it is primarily aimed at graduate students in Computer Science, students from other fields and well-prepared undergraduates are welcome with the permission of the instructor.",
      "tags": [
        "CS6112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6113",
      "title": "CS6113: Language-Based Security",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6113",
      "desc": "An exploration of methods for using programming languages and language semantics to enforce security. We will read recent papers on a variety of topics, including language-based authorization, enforcement of both confidentiality and integrity using type systems for controlling information flow, quantitative security measures, secure distributed computing, and methods for incorporating and checking uses of cryptography.",
      "tags": [
        "CS6113"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6115",
      "title": "CS6115: Certified Software Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6115",
      "desc": "In recent years, it has become practical to build large software systems using formal proof assistants. Examples of such certified systems include the seL4 microkernel, the CompCert C compiler, the Vellvm LLVM compiler, and the Bedrock library. This course provides a hands-on introduction to programming using the Coq proof assistant. Assessment is based on participation and a substantial course project.",
      "tags": [
        "CS6115"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6117",
      "title": "CS6117: Category Theory for Computer Sciences",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6117",
      "desc": "An introduction to category theory, with a focus on material with established applications to computer science and programming languages, in particular. The course emphasizes developing comfort with abstraction and instantiation.",
      "tags": [
        "CS6117"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6118",
      "title": "CS6118: Types and Semantics",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6118",
      "desc": "Types and Semantics is about designing and understand programming languages, whether they be domain specific or general purpose. The goal of this class is to provide a variety of tools for designing custom (programming) languages for whatever task is at hand. Part of that will be a variety of insights on how languages work along with experiences from working with academics and industry on creating new languages such as Ceylon and Kotlin. The class focuses on types and semantics and the interplay between them.",
      "tags": [
        "CS6118"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6120",
      "title": "CS6120: Advanced Compilers",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6120",
      "desc": "This is a hands-on course about implementing programming languages. It covers intermediate representations, classic optimization, runtime systems, and more advanced techniques such as parallelization, just-in-time compilation, and garbage collection. Course work consists of reading and discussing both classic and modern research papers and implementation projects based on the LLVM compiler infrastructure.",
      "tags": [
        "CS6120"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6156",
      "title": "CS6156: Runtime Verification",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6156",
      "desc": "Runtime Verification (RV) is a lightweight formal method for checking program executions against specifications. Foundations, algorithms, and tools for major approaches to RV will be covered, including monitor synthesis, specification languages, parametric monitoring, monitorability, instrumentation, and static analysis for reducing RV overhead. Students will become familiar with recent research results and challenges in RV, gain experience with RV tools, and conduct a research project.",
      "tags": [
        "CS6156"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6180",
      "title": "CS6180: Introduction to Constructive Type Theory",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6180",
      "desc": "Constructive type theory is the mathematical foundation for modern proof assistants, which are software systems used to help verify the correctness of programs and mathematical proofs. Proof assistants are also used in teaching advanced programming and are essential tools in the study of formal methods.",
      "tags": [
        "CS6180"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6210",
      "title": "CS6210: Matrix Computations",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6210",
      "desc": "Stable and efficient algorithms for linear equations, least squares, and eigenvalue problems. Direct and iterative methods are considered. Numerical programming is used extensively.",
      "tags": [
        "CS6210"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6241",
      "title": "CS6241: Numerical Methods for Data Science",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6241",
      "desc": "A discussion of numerical methods in the context of data analysis, machine learning, and network science problems. The course will focus on matrix and tensor decompositions, numerical algorithms for graph data, least squares, regression, and iterative methods.",
      "tags": [
        "CS6241"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6410",
      "title": "CS6410: Advanced Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6410",
      "desc": "Advanced course in systems, emphasizing contemporary research in distributed systems. Topics may include communication protocols, consistency in distributed systems, faulttolerance, knowledge and knowledge-based protocols, performance, scheduling, concurrency control, and authentication and security issues.",
      "tags": [
        "CS6410"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6411",
      "title": "CS6411: Systems Principles",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6411",
      "desc": "The design of computer systems is driven by a small number of principles that are leveraged to achieve both functionality and performance. These principles, and the key techniques used to instantiate them, are the subject of this course. We will study them both in isolation and in the context of systems in which they have been applied.",
      "tags": [
        "CS6411"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6432",
      "title": "CS6432: Distributed Consensus and Blockchains",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6432",
      "desc": "Distributed consensus protocols have been widely adopted in replicated databases and decentralized cryptocurrencies. In this course, we will explore how to design formally secure protocols that allow nodes to reach consensus in a distributed system. Both classical consensus and modern blockchains will be discussed.",
      "tags": [
        "CS6432"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6450",
      "title": "CS6450: Advanced Computer Networking",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6450",
      "desc": "This course explores state-of-the-art network architectures and protocols through a review of recent research literature, discussions during lectures and class projects. Students will complete a semester-long research project based on one of the topics covered in the class.",
      "tags": [
        "CS6450"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6453",
      "title": "CS6453: Big Data Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6453",
      "desc": "This course introduces the critical technology trends, the state-of-the-art systems, and the key challenges that make the big data era exciting, both from academic and industrial perspective. The course will focus on providing both breadth and depth in big data systems.",
      "tags": [
        "CS6453"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6464",
      "title": "CS6464: Advanced Distributed Storage Systems",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6464",
      "desc": "This course broadly examines distributed storage systems in its many manifestations. It explores how to harness and maintain the collective storage capabilities in storage systems from global-scale enterprises and cloud computing to peer-to-peer, ad hoc, and home networks. It teaches abstractions, design and implementation techniques that allow students to build the kind of scalable high performance distributed systems that can deal with real-world workload.",
      "tags": [
        "CS6464"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6465",
      "title": "CS6465: Emerging Cloud Technologies and Systems Challenges",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6465",
      "desc": "This course explores new trends in cloud computing systems, with a focus on understanding the research challenges that will arise as we use cloud computing to solve challenging new problems. The class will center on a mix of readings, discussion, and individualized research activities.",
      "tags": [
        "CS6465"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6480",
      "title": "CS6480: Systems Software and Formal Methods",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6480",
      "desc": "This is a graduate course on systems software and formal methods. The increasing complexity and scale of software systems has led to significant challenges for their reliability, performance, manageability, and security. Examples of such systems include entire operating systems, file systems, databases, networks, distributed systems, device drivers, and so on.",
      "tags": [
        "CS6480"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6630",
      "title": "CS6630: Realistic Image Synthesis",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6630",
      "desc": "CS6630 is an introduction to physics-based rendering at the graduate level. Starting from the fundamentals of light transport we will look at formulations of the Rendering Equation, and a series of Monte Carlo methods, from sequential sampling to multiple importance sampling to Markov Chains, for solving the equation to make pictures. We'll look at light reflection from surfaces and scattering in volumes, illumination from luminaires and environments, and diffusion models for translucent materials. We will build working implementations of many of the algorithms we study, and learn how to make sure they are actually working correctly. It's fun to watch integrals and probability distributions transform into photographs of a slightly too perfect synthetic world.",
      "tags": [
        "CS6630"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6640",
      "title": "CS6640: Computational Photography",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6640",
      "desc": "From Courses of Study: A course on the emerging applications of computation in photography. Likely topics include digital photography, unconventional cameras and optics, light field cameras, image processing for photography, techniques for combining multiple images, advanced image editing algorithms, and projector-camera systems. Course work includes implementing several algorithms and a final project.",
      "tags": [
        "CS6640"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6650",
      "title": "CS6650: Computational Motion",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6650",
      "desc": "Covers computational aspects of motion, broadly construed. Topics include the computer representation, modeling, analysis, and simulation of motion, and its relationship to various areas, including computational geometry, mesh generation, physical simulation, computer animation, robotics, biology, computer vision, acoustics, and spatio-temporal databases. Students implement several of the algorithms covered in the course and complete a final project.  This offering will also explore the special role of motion processing in physically based sound rendering.",
      "tags": [
        "CS6650"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6670",
      "title": "CS6670: Computer Vision",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6670",
      "desc": "This course will introduce the core problems of computer vision and discuss both classical approaches based on the geometry and physics of image formation as well as current approaches based on recent advances in deep learning. Topics include stereopsis and 3D reconstruction, optical flow, image segmentation, object recognition, feature representations of images and patches, and convolutional networks.",
      "tags": [
        "CS6670"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "cornell-Spring-CS6700",
      "title": "CS6700: Advanced Artificial Intelligence",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6700",
      "desc": "Covers a variety of areas in AI, including knowledge representation, automated reasoning, learning, game-playing, and planning, with an emphasis on computational issues.",
      "tags": [
        "CS6700"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "cornell-Spring-CS6702",
      "title": "CS6702: Topics in Computational Sustainability",
      "source": "Cornell",
      "year": "Spring 2021",
      "url": "https://www.cs.cornell.edu/courses/cs6702",
      "desc": "The main goal of the course is to identify interesting computational research questions concerning sustainability problems and more generally we hope the course will provide additional insights towards the understanding of the boundaries and central methodologies in Computational Sustainability.",
      "tags": [
        "CS6702"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Spring-CS100",
      "title": "CS100: Introduction to Computing through Applications",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs100",
      "desc": "Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to computer and network organization, digital information, HTML, and CSS. Algorithms underlying the functional components of web search engines and their influence on data access.",
      "tags": [
        "CS100"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Winter-CS106",
      "title": "CS106: Introduction to Computer Science 2",
      "source": "Waterloo",
      "year": "Winter 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs106",
      "desc": "The course explores the use of graphics in art, design and visualization contexts. It is a required course for students in the Global Business and Digital Arts program.",
      "tags": [
        "CS106"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Fall-CS133",
      "title": "CS133: Developing Programming Principles",
      "source": "Waterloo",
      "year": "Fall 2007",
      "url": "https://student.cs.uwaterloo.ca/~cs133/",
      "desc": "Fundamental concepts of computer programming and computer science, how to write small object-oriented programs in Java, and an introduction to graphical user interface (GUI) components.",
      "tags": [
        "CS133"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Spring-CS135",
      "title": "CS135: Designing Functional Programs",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs135",
      "desc": "CS 135 is for students who would prefer a more conceptual treatment of introductory computer science in a simple language that is educationally effective but not commercially relevant. While the course is designed to be taken by those with no prior programming experience, students with prior experience will also find it relevant, due to its unusual focus. It is suitable for both CS majors and non-majors.",
      "tags": [
        "CS135"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Spring-CS136",
      "title": "CS136: Elementary Algorithm Design and Data Abstraction",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs136/",
      "desc": "This course builds on the techniques and patterns learned in CS 135 while making the transition to use of an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations.",
      "tags": [
        "CS136"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Spring-CS200",
      "title": "CS200: Concepts for Advanced Computer Usage",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs200",
      "desc": "Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments.",
      "tags": [
        "CS200"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Spring-CS240",
      "title": "CS240: Data Structures and Data Management",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs240",
      "desc": "The course introduces widely used and effective methods of data organization, focusing on data structures, algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing.",
      "tags": [
        "CS240"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS247",
      "title": "CS247: Software Engineering Principles",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs247",
      "desc": "This course introduces systematic methods for designing, coding, testing, and documenting medium-sized programs. Major topics include abstraction, modularity, software modeling, object-oriented programming and design, generic programming, and testing and debugging.",
      "tags": [
        "CS247"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS341",
      "title": "CS341: Algorithms",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs341",
      "desc": "The main focus is to learn basic techniques to the design and analysis of efficient algorithms through the study of various classical algorithms. Towards the end, we will also study the notion of NP-completeness and prove that many natural problems are \"hard\" using polynomial time reductions. The specific topics include:",
      "tags": [
        "CS341"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS349",
      "title": "CS349: User Interfaces",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs349",
      "desc": "This course teaches the principles of creating user interfaces (UIs) including underlying UI architecture and algorithms, how to implement UIs from scratch and using UI frameworks, theories and methods for UI design, and an introduction to the field of human-computer interaction.",
      "tags": [
        "CS349"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS350",
      "title": "CS350: Operating Systems",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs350",
      "desc": "An introduction to the fundamentals of operating system function, design, and implementation. Topics include concurrency, synchronization, processes, threads, scheduling, memory management, file systems, device management, and security.",
      "tags": [
        "CS350"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS431",
      "title": "CS431: Data-Intensive Distributed Computing",
      "source": "Waterloo",
      "year": "Winter 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs431",
      "desc": "This course provides an introduction to data-intensive distributed computing. Our focus is algorithm design and \"thinking at scale\": we will cover data mining and machine learning techniques as applied to text, graphs, and relational data. Most of the course will be taught in a combination of MapReduce and Spark, two representative dataflow abstractions for large-scale data analysis, although we will introduce alternative abstractions such as bulk-synchronous parallel and streaming models as well.",
      "tags": [
        "CS431"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS442",
      "title": "CS442: Principles of Programming Languages",
      "source": "Waterloo",
      "year": "Winter 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs442",
      "desc": "CS442 is rightly named: The principles of programming languages. This course covers the ideas underpinning programming languages, by covering the formal, mathematical model behind programming languages as calculi, and then discussing many programming language paradigms, and how these paradigms affect both the formal semantics and the implementation of language interpreters, compilers, and virtual machines.",
      "tags": [
        "CS442"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS446",
      "title": "CS446: Software Design and Architecture",
      "source": "Waterloo",
      "year": "Winter 2017",
      "url": "https://student.cs.uwaterloo.ca/~cs446/1171/",
      "desc": "SE2: Software Design and Architecture is the second course of the three software engineering capstone project courses, offered jointly by the David R. Cheriton School of Computer Science and the Department of Electrical and Computer Engineering at the University of Waterloo.",
      "tags": [
        "CS446"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS448",
      "title": "CS448: Database Systems Implementation",
      "source": "Waterloo",
      "year": "Winter 2012",
      "url": "https://student.cs.uwaterloo.ca/~cs448",
      "desc": "This is a second course on databases that focuses on DBMS internals. It is a project-oriented course that will provide the students, upon successful completion, with an appreciation of the intricacies and complexities of a DBMS and enable them to be able to design and implement the major components of it. The course objective will be achieved by focusing on three fundamental sub-objectives:",
      "tags": [
        "CS448"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS449",
      "title": "CS449: Human-Computer Interaction",
      "source": "Waterloo",
      "year": "Spring 2019",
      "url": "https://student.cs.uwaterloo.ca/~cs449",
      "desc": "Human-Computer Interaction teaches the fundamental issues that underlie the creation and evaluation of usable and useful computational artifacts.",
      "tags": [
        "CS449"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS452",
      "title": "CS452: Real-time Programming",
      "source": "Waterloo",
      "year": "Winter 2020",
      "url": "https://student.cs.uwaterloo.ca/~cs452",
      "desc": "The course presents tools and techniques for real-time programming, including system support for real-time applications and calibrating interfaces to hardware. One part of the course is writing a small, real-time-capable operating system that runs on stand-alone computers and provides a low-level interface to control electric trains. The other part is concerned with implementing a control application for the trains.",
      "tags": [
        "CS452"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Fall-CS466",
      "title": "CS466: Design and Analysis of Algorithms",
      "source": "Waterloo",
      "year": "Fall 2019",
      "url": "https://student.cs.uwaterloo.ca/~cs466",
      "desc": "Advanced design and analysis of algorithms. Topics include: amortized analysis, randomized algorithms, lower bounds, approximation algorithms, and on-line algorithms.",
      "tags": [
        "CS466"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Fall-CS472",
      "title": "CS472: Numerical Solution of Large Sparse Systems of Equations",
      "source": "Waterloo",
      "year": "Fall 2007",
      "url": "https://student.cs.uwaterloo.ca/~cs472",
      "desc": "In many domains, large linear systems must routinely be solved.  For instance, in many branches of engineering and physics, partial differential equations are often approximated by large linear systems;  in machine learning, least square linear regression also leads to large linear systems; in computational vision, image denoising can also be formulated as a linear system; in decision-theoretic planning, policy iteration algorithms for Markov decision processes require the solution of a series of linear systems.",
      "tags": [
        "CS472"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS475",
      "title": "CS475: Computational Linear Algebra",
      "source": "Waterloo",
      "year": "Spring 2016",
      "url": "https://student.cs.uwaterloo.ca/~cs475",
      "desc": "Numerical linear algebra is a basic part of many problems in scientific computation. This course provides an overview of algorithms and numerical linear algebra techniques to solve common problems that arise in many areas such as image processing, search engines, natural language processing, computational finance, aircraft design and artificial intelligence. The course is structured around four major topics:",
      "tags": [
        "CS475"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS485",
      "title": "CS485: Machine Learning",
      "source": "Waterloo",
      "year": "Winter 2016",
      "url": "https://student.cs.uwaterloo.ca/~cs485",
      "desc": "Computers are traditionally programmed by listing a set of instructions that dictate the operation of the machine step by step.  As a result, machines tend to have a predetermined and rigid behaviour.  However, in many situations it would be desirable to endow machines with the ability to adapt and learn.  This course provides an introduction to the field of machine learning, which studies the principles and algorithms that allow a computer to learn new concepts from some examples.  The course will cover both the theoretical foundations of machine learning as well as the design of algorithms for machine learning.",
      "tags": [
        "CS485"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Spring-CS488",
      "title": "CS488: Introduction to Computer Graphics",
      "source": "Waterloo",
      "year": "Spring 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs488",
      "desc": "Welcome to the home page for CS488/688, the introductory computer graphics course in the School of Computer Science at the University of Waterloo. This course focuses on 3D graphics, although it does discuss some aspects of user interface design.",
      "tags": [
        "CS488"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS489",
      "title": "CS489: Big Data Infrastructure",
      "source": "Waterloo",
      "year": "Winter 2016",
      "url": "http://lintool.github.io/bigdata-2016w/index.html",
      "desc": "This course provides an introduction to big data infrastructure for analytics. The focus is algorithm design and \"thinking at scale\": we will cover data mining and machine learning techniques as applied to text, graphs, and relational data. Most of the course will be taught in a combination of MapReduce and Spark, two representative dataflow abstractions for large-scale data analysis, although we will introduce alternative abstractions such as bulk-synchronous parallel and streaming models as well.",
      "tags": [
        "CS489"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS492",
      "title": "CS492: Social Implications of Computing",
      "source": "Waterloo",
      "year": "Winter 2021",
      "url": "https://student.cs.uwaterloo.ca/~cs492",
      "desc": "Technology Change and Social Impact, The Internet and how it changes communication, Personal identity, security and computer technology, The impact of computers on work environments, and Electronic Commerce.",
      "tags": [
        "CS492"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Fall-CS497",
      "title": "CS497: Frontiers in Computer Science",
      "source": "Waterloo",
      "year": "Fall 2007",
      "url": "https://student.cs.uwaterloo.ca/~cs497",
      "desc": "CS 497 is a course that is temporarily offered to CS major students. In some cases, a course might only be available one time, for example, to take advantage of a visiting professor's expertise. At other times, a course will be offered experimentally until it is determined whether the course should become part of the regular course offerings.",
      "tags": [
        "CS497"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Winter-CS682",
      "title": "CS682: Computational Techniques in Biological Sequence Analysis",
      "source": "Waterloo",
      "year": "Winter 2020",
      "url": "https://student.cs.uwaterloo.ca/~cs682",
      "desc": "Computer science principles and algorithms in biological sequence analysis. Topics include algorithms for sequence comparison, for large-scale database search in biological databases, for evolutionary tree reconstruction, for identifying important features in DNA and RNA sequences, for protein sequence identification and underlying computational techniques.",
      "tags": [
        "CS682"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "waterloo-Fall-CS745",
      "title": "CS745: Computer-Aided Verification",
      "source": "Waterloo",
      "year": "Fall 2009",
      "url": "https://student.cs.uwaterloo.ca/~cs745",
      "desc": "This course introduces the theory and practice of computer-aided verification for the design and analysis of digital systems (i.e., hardware and software systems). It emphasizes formal methods techniques, i.e., techniques based on logical reasoning and mathematical modelling, which are gradually being incorporated into CASE and CAD tools. These techniques have been used to find subtle, critical logic and safety errors in industrial hardware and software systems.",
      "tags": [
        "CS745"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Fall-CS774",
      "title": "CS774: Advanced Computational Finance",
      "source": "Waterloo",
      "year": "Fall 2009",
      "url": "https://student.cs.uwaterloo.ca/~cs774",
      "desc": "This course will cover such topics as: Monte Carlo methods, lattice methods, and numerical PDE (Partial Differential Equation) techniques for pricing and hedging options. Methods for valuing exotic options (Asian, Parisian, barrier, and shout) will be presented. Particular attention will be paid to models which more accurately represent real markets: jump processes, regime switching, the effect of trading price impact and transaction costs, and optimal decision making. This will lead us to a discussion of algorithms for partial integro differential equations, and optimal stochastic control (dynamic programming, Hamilton Jacobi Bellman equations).",
      "tags": [
        "CS774"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "waterloo-Fall-CS798",
      "title": "CS798: Software Foundations",
      "source": "Waterloo",
      "year": "Fall 2018",
      "url": "https://student.cs.uwaterloo.ca/~cs798",
      "desc": "The goal of this book, and our goal, is to study topics in functional programming, logic, semantics, and type theory using the proof assistant Coq.",
      "tags": [
        "CS798"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "yale-Spring-CS112",
      "title": "CS112: Introduction to Computer Programming",
      "source": "Yale",
      "year": "Spring 2020",
      "url": "https://cs112.cs.yale.edu/2020A/",
      "desc": "CS 112: Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems.",
      "tags": [
        "CS112"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "yale-Spring-CS421",
      "title": "CS421: Compilers and Interpreters",
      "source": "Yale",
      "year": "Spring 2021",
      "url": "http://www.cs.yale.edu/homes/soule/cpsc421/",
      "desc": "This course focuses on the design and implementation of compilers. Topics covered include the structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. This course requires a substantial, semester-long programming project implementing a functional compiler that includes lexical and syntactic analyzers, a type checker, and a code generator.",
      "tags": [
        "CS421"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "yale-Fall-CS430",
      "title": "CS430: Formal Semantics",
      "source": "Yale",
      "year": "Fall 2013",
      "url": "http://flint.cs.yale.edu/cs430/",
      "desc": "CS 430/530 teaches the formal semantics of programming languages. That is, a mathematically rigorous description of what a computer program means. The course should be useful to anyone who is serious about programming, and is essential for anyone planning either to do research in programming languages or to design a programming language. The course is intended to accomplish two things:",
      "tags": [
        "CS430"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "yale-Fall-CS469",
      "title": "CS469: Randomized Algorithms",
      "source": "Yale",
      "year": "Fall 2020",
      "url": "http://www.cs.yale.edu/homes/aspnes/classes/469/notes.pdf",
      "desc": "A study of randomized algorithms from several areas: graph algorithms, algorithms in algebra, approximate counting, probabilistically checkable proofs, and matrix algorithms. Topics include an introduction to tools from probability theory, including some inequalities such as Chernoff bounds.",
      "tags": [
        "CS469"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "yale-Fall-CS610",
      "title": "CS610: Topics in Computer Science and Law",
      "source": "Yale",
      "year": "Fall 2019",
      "url": "http://www.cs.yale.edu/homes/jf/CPSC610-Fall2019.html",
      "desc": "CPSC 610 is a graduate seminar that focuses on socio-technical problems in computing, i.e., problems that cannot be solved through technological progress alone but rather require legal, political, or cultural progress as well. Examples include but are not limited to computer security, intellectual property protection, cyber crime, cyber war, surveillance, and online privacy.",
      "tags": [
        "CS610"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "yale-Fall-CS462",
      "title": "CS462: Spectral Graph Theory",
      "source": "Yale",
      "year": "Fall 2019",
      "url": "http://www.cs.yale.edu/homes/spielman/462/syllabus.html",
      "desc": "The main purpose of this course is to explore what eigenvalues and eigenvectors of graphs can tell us about their structure, and to exploit this knowledge for algorithmic purposes. It will also include some related content that is not strictly linear algebraic, and some that does not have much to do with graphs, but which I include because it is worth knowing.",
      "tags": [
        "CS462"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "yale-Fall-CS462",
      "title": "CS462: Graphs and Networks",
      "source": "Yale",
      "year": "Fall 2013",
      "url": "https://sites.google.com/a/yale.edu/462-562-graphs-and-networks/",
      "desc": "The purpose of this class is to introduce many types of graphs that are studied in the sciences and engineering, to examine some elementary processes that take place on those graphs, and to introduce standard analyses of graphs. “Network” is just another word for “graph”.",
      "tags": [
        "CS462"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "yale-Spring-CS745",
      "title": "CS745: Advanced Topics in Machine Learning and Data Mining",
      "source": "Yale",
      "year": "Spring 2018",
      "url": "http://cpsc745.guywolf.org/",
      "desc": "Modern data analysis methods are expected to handle massive amounts of data that are being collected in a variety of domains, including the biological/biomedical, social, economic, artistic, and cultural domains. This seminar will provide an overview of the advances that have been made in the last decade in machine-learning and automatic data-mining approaches for dealing with the challenges that arise in such settings. This year, the seminar will focus on a broad scope of data analysis tasks, with emphasis on deep learning approaches towards them. Additional approaches, such as kernel methods and dictionary learning, will be included as well to provide a wide perspective on the field.",
      "tags": [
        "CS745"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "caltech-Spring-CS179",
      "title": "CS179: GPU Programming",
      "source": "Caltech",
      "year": "Spring 2021",
      "url": "http://courses.cms.caltech.edu/cs179/",
      "desc": "The use of Graphics Processing Units for rendering is well known, but their power for general parallel computation has only recently been explored. Parallel algorithms running on GPUs can often achieve up to 100x speedup over similar CPU algorithms, with many existing applications for physics simulations, signal processing, financial modeling, neural networks, and countless other fields.",
      "tags": [
        "CS179"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "nyu-Spring-CSCI0202",
      "title": "CSCI0202: Operating Systems",
      "source": "NYU",
      "year": "Spring 2015",
      "url": "http://www.cs.nyu.edu/~mwalfish/classes/15sp/index.html",
      "desc": "We hope you learn three sets of interrelated things. The first thing is how computers work. Students graduating with CS degrees should believe \"there is no magic\": they should be able to describe the chain of events that occurs when they hit a key and cause a letter to appear on the screen from the register level (or logical gate level or transistor level) to the system architecture level to the operating system level to the application level. This is philosophically important, but it is also of practical interest to developers who need to figure out how to make a system do what they want it to do.",
      "tags": [
        "CSCI0202"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "hunter-Fall-CSCI360",
      "title": "CSCI360: Computer Architecture 3",
      "source": "Hunter",
      "year": "Fall 2014",
      "url": "http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci360/csci360_f14.php",
      "desc": "Appreciate the use of buffers to control data-flow. Identify the memory technologies found in a computer and be aware of the way in which memory technology is changing. Describe the various ways of organizing cache memory and appreciate the cost-performance trade-offs for each arrangement. Appreciate the need for cache coherency in multiprocessor systems.",
      "tags": [
        "CSCI360"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "hunter-Spring-CSCI493.75",
      "title": "CSCI493.75: Parallel Computing",
      "source": "Hunter",
      "year": "Spring 2014",
      "url": "http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci493.65/csci493.65_spr14.php",
      "desc": "Learn how to write a correct and scalable parallel algorithm using both a message-passing based paradigm (MPI) and a shared-memory based paradigm (OpenMP). Read and analyze a program using MPI and/or OpenMPI.",
      "tags": [
        "CSCI493.75"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.828",
      "title": "6.828: Operating Systems",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "https://pdos.csail.mit.edu/6.828/2014/schedule.html",
      "desc": "Design and implementation of operating systems, and their use as a foundation for systems programming. Topics include virtual memory; file systems; threads; context switches; kernels; interrupts; system calls; interprocess communication; coordination, and interaction between software and hardware. A multi-processor operating system for RISC-V, xv6, is used to illustrate these topics. Individual laboratory assignments involve extending the xv6 operating system, for example to support sophisticated virtual memory features and networking.",
      "tags": [
        6.828
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "chicago-Winter-CS223",
      "title": "CS223: Purely Functional Data Structures In Elm",
      "source": "Chicago",
      "year": "Winter 2016",
      "url": "https://www.classes.cs.uchicago.edu/archive/2016/winter/22300-1/",
      "desc": "The course project is an opportunity to design and implement something of your choosing. Generally the idea is to work in groups of one or two and build something fun and interesting in Elm that makes use of web programming and data structures in some way. Bite off as much as you can chew. The project will be split into several milestones, culminating in demos at the end of the quarter.",
      "tags": [
        "CS223"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.945",
      "title": "6.945: Adventures in Advanced Symbolic Programming",
      "source": "MIT",
      "year": "Spring 2021",
      "url": "https://groups.csail.mit.edu/mac/users/gjs/6.945/index.html",
      "desc": "Concepts and techniques for the design and implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Means for decoupling goals from strategy. Mechanisms for implementing additive data-directed invocation. Working with partially-specified entities. Managing multiple viewpoints. Topics include combinators, generic operations, pattern matching, pattern-directed invocation, rule systems, backtracking, dependencies, indeterminacy, memoization, constraint propagation, and incremental refinement. Substantial weekly programming assignments are an integral part of the subject.",
      "tags": [
        6.945
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "harvard-Fall-CS224",
      "title": "CS224: Advanced Algorithms",
      "source": "Harvard",
      "year": "Fall 2014",
      "url": "http://people.seas.harvard.edu/~minilek/cs224/fall14/index.html",
      "desc": "An algorithm is a well-defined procedure for carrying out some computational task. Typically the task is given, and the job of the algorithmist is to find such a procedure which is efficient, for example in terms of processing time and/or memory consumption. CS 224 is an advanced course in algorithm design, and topics we will cover include the word RAM model, data structures, amortization, online algorithms, linear programming, semidefinite programming, approximation algorithms, hashing, randomized algorithms, fast exponential time algorithms, graph algorithms, and computational geometry.",
      "tags": [
        "CS224"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "hunter-Spring-CSCI135",
      "title": "CSCI135: Software Design and Analysis I",
      "source": "Hunter",
      "year": "Spring 2013",
      "url": "http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci135/csci135_36_fall12.php",
      "desc": "This course is an intensive introduction to problem solving and programming. It is not specifically a course in the C++ programming language. It uses C++ to implement the concepts presented in class since one cannot learn how to program without learning a programming language! The details of C++ will sometimes be a distraction from learning important concepts, but the only way to learn programming is to program.",
      "tags": [
        "CSCI135"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "hunter-Spring-CSCI235",
      "title": "CSCI235: Software Design and Analysis II",
      "source": "Hunter",
      "year": "Spring 2018",
      "url": "http://compsci.hunter.cuny.edu/~sweiss/courses/csci235.php",
      "desc": "This course is a sequel to CSci 135 Software Design and Analysis I. It introduces the concept of abstract data types, called ADTs for short, as well as specific ADTS such as queues, stacks, lists, and binary trees. It also introduces algorithms for a few common problems such as sorting. Practically speaking, it furthers the students' programming skills with topics such as recursion, pointers, and exception handling, and provides a chance to improve software engineering skills and to give the students practical experience for more productive programming.",
      "tags": [
        "CSCI235"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "hunter-Spring-CSCI335",
      "title": "CSCI335: Software Design and Analysis III",
      "source": "Hunter",
      "year": "Spring 2020",
      "url": "http://compsci.hunter.cuny.edu/~sweiss/courses/csci335.php",
      "desc": "This course is a sequel to CSCI 235 Software Design and Analysis II. Its principal objective is to expand on topics in the design and analysis of algorithms and data structures. This includes the introduction of hashes, heaps, various forms of trees, and graphs. It also revisits recursion and the sorting problem from a higher perspective than was presented in the prequels. On top of this, it is intended to introduce methods of algorithmic analysis.",
      "tags": [
        "CSCI335"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "davis-Fall-ECS122A",
      "title": "ECS122A: Algorithm Design and Analysis",
      "source": "Davis",
      "year": "Fall 2010",
      "url": "http://web.cs.ucdavis.edu/~gusfield/cs122f10/",
      "desc": "The purpose of the course is to introduce fundamental techniques and viewpoints for the design and the analysis of efficient algorithms, and to study important specific algorithms. The course relies heavily on mathematics and mathematical thinking in two ways. First as a way of proving properties about particular algorithms such as termination, and correctness. Second, as a way of establishing bounds on the worst case (or average case) use of some resource, usually time, by a specific algorithm.",
      "tags": [
        "ECS122A"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "davis-Winter-ECS222A",
      "title": "ECS222A: Graduate Level Algorithm Design and Analysis",
      "source": "Davis",
      "year": "Winter 2011",
      "url": "http://web.cs.ucdavis.edu/~gusfield/cs222w11/",
      "desc": "In some ways, this course examines the same issues as the undergraduate course (cs 122A here), but chooses more advanced and complex algorithms, examines some issues more deeply, and requires .more difficult and interesting homework",
      "tags": [
        "ECS222A"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Fall-6.006",
      "title": "6.006: Introduction to Algorithms",
      "source": "MIT",
      "year": "Fall 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm",
      "desc": "This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems.",
      "tags": [
        6.006
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.046J",
      "title": "6.046J: Design and Analysis of Algorithms",
      "source": "MIT",
      "year": "Spring 2015",
      "url": "http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/index.htm",
      "desc": "This is an intermediate algorithms course with an emphasis on teaching techniques for the design and analysis of efficient algorithms, emphasizing methods of application. Topics include divide-and-conquer, randomization, dynamic programming, greedy algorithms, incremental improvement, complexity, and cryptography.",
      "tags": [
        "6.046J"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.851",
      "title": "6.851: Advanced Data Structures",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "http://courses.csail.mit.edu/6.851/spring14/index.html",
      "desc": "Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures:",
      "tags": [
        6.851
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Fall-6.854",
      "title": "6.854: Advanced Algorithms",
      "source": "MIT",
      "year": "Fall 2020",
      "url": "http://courses.csail.mit.edu/6.854/current/",
      "desc": "This course is designed to be a capstone course in algorithms that surveys some of the most powerful algorithmic techniques and key computational models. It aims to bring the students up to the level where they can read and understand research papers.",
      "tags": [
        6.854
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "fayetteville-Spring-CSCE3193",
      "title": "CSCE3193: Programming Paradigms",
      "source": "Fayetteville",
      "year": "Spring 2011",
      "url": "http://www.csce.uark.edu/~sgauch/3193/S11/index.html",
      "desc": "Programming in different paradigms with emphasis on object oriented programming, network programming and functional programming. Survey of programming languages, event driven programming, concurrency, software validation.",
      "tags": [
        "CSCE3193"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Spring-6.045",
      "title": "6.045: Great Ideas in Theoretical Computer Science",
      "source": "MIT",
      "year": "Spring 2015",
      "url": "https://stellar.mit.edu/S/course/6/sp15/6.045/index.html",
      "desc": "This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power.",
      "tags": [
        6.045
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "utah-Fall-CS1410-2",
      "title": "CS1410-2: Computer Science I for Hackers",
      "source": "Utah",
      "year": "Fall 2011",
      "url": "http://www.eng.utah.edu/~cs1410-20/",
      "desc": "This course will teach you how to begin with a problem statement and then systematically design a computer program that solves the problem.",
      "tags": [
        "CS1410-2"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "utah-Spring-CS2420-20",
      "title": "CS2420-20: Computer Science II for Hackers",
      "source": "Utah",
      "year": "Spring 2012",
      "url": "http://www.eng.utah.edu/~cs2420-20/",
      "desc": "Section 20 of CS 2420 specifically builds on section 20 of CS 1410. Section 20 will cover the same programing concepts as other sections of CS 2420, but with additional concepts and through a different approach that is particularly targeted to students who are interested in “systems.”",
      "tags": [
        "CS2420-20"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "fayetteville-Spring-CSCE2004",
      "title": "CSCE2004: Programming Foundations I",
      "source": "Fayetteville",
      "year": "Spring 2014",
      "url": "http://www.csce.uark.edu/~sgauch/2004/S14/index.html",
      "desc": "Introductory course for students majoring in computer science or computer engineering. Software development process: problem specification, program design, implementation, testing and documentation. Programming topics: data representation, conditional and iterative statements, functions, arrays, strings, file I/O, and classes. Using C++ in a UNIX environment. Prerequisite: MATH 2554 (Calculus I) with a C or better.",
      "tags": [
        "CSCE2004"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "mit-Spring-6.001",
      "title": "6.001: Structure and Interpretation of Computer Programs",
      "source": "MIT",
      "year": "Spring 2005",
      "url": "http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm",
      "desc": "This course features projects and supporting documentation. This course has virtually all of its course materials online. 6.001 is the first course in the core of departmental subjects which is required for all undergraduates in Electrical Engineering and Computer Science. It offers an online version of the textbook for the course, Structure and Interpretation of Computer Programs, 2nd ed., by Abelson, Sussman, and Sussman.",
      "tags": [
        6.001
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Fall-6.005",
      "title": "6.005: Software Construction",
      "source": "MIT",
      "year": "Fall 2016",
      "url": "http://web.mit.edu/6.005/www/fa16/",
      "desc": "6.005 Software Construction introduces fundamental principles and techniques of software development, i.e., how to write software that is safe from bugs, easy to understand, and ready for change. The course includes problem sets and a final project. Important topics include specifications and invariants; testing; abstract data types; design patterns for object-oriented programming; concurrent programming and concurrency; and functional programming.",
      "tags": [
        6.005
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "caltech-Spring-CS156",
      "title": "CS156: Learning from Data",
      "source": "Caltech",
      "year": "Spring 2012",
      "url": "https://work.caltech.edu/telecourse.html",
      "desc": "This is an introductory course in machine learning (ML) that covers the basic theory, algorithms, and applications. ML is a key technology in Big Data, and in many financial, medical, commercial, and scientific applications.",
      "tags": [
        "CS156"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "harvard-Fall-CS229r",
      "title": "CS229r: Algorithms for Big Data",
      "source": "Harvard",
      "year": "Fall 2015",
      "url": "http://people.seas.harvard.edu/~minilek/cs229r/fall15/index.html",
      "desc": "Big data is data so large that it does not fit in the main memory of a single machine, and the need to process big data by efficient algorithms arises in Internet search, network traffic monitoring, machine learning, scientific computing, signal processing, and several other areas. This course will cover mathematically rigorous models for developing such algorithms, as well as some provable limitations of algorithms operating in those models.",
      "tags": [
        "CS229r"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "nyu-Spring-DS-GA1008",
      "title": "DS-GA1008: Deep Learning",
      "source": "NYU",
      "year": "Spring 2014",
      "url": "http://cilvr.cs.nyu.edu/doku.php?id=deeplearning2015:schedule",
      "desc": "The CILVR Lab (Computational Intelligence, Learning, Vision, and Robotics) regroups faculty members, research scientists, postdocs, and students working on AI, machine learning, and a wide variety of applications, notably computer perception, natural language understanding, robotics, and health care.",
      "tags": [
        "DS-GA1008"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "columbia-Spring-EECSE6894",
      "title": "EECSE6894: Deep Learning for Computer Vision and Natural Language Processing",
      "source": "Columbia",
      "year": "Spring 2015",
      "url": "http://llcao.net/cu-deeplearning15/index.html",
      "desc": "This graduate level research class focuses on deep learning techniques for vision and natural language processing problems. It gives an overview of the various deep learning models and techniques, and surveys recent advances in the related fields. This course uses Theano as the main programminging tool. GPU programming experiences are preferred although not required. Frequent paper presentations and a heavy programming workload are expected.",
      "tags": [
        "EECSE6894"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "rpi-Spring-CSCI4968",
      "title": "CSCI4968: Modern Binary Exploitation",
      "source": "RPI",
      "year": "Spring 2015",
      "url": "https://github.com/RPISEC/MBE",
      "desc": "This repository contains the materials as developed and used by RPISEC to teach Modern Binary Exploitation at Rensselaer Polytechnic Institute in Spring 2015. This was a university course developed and run solely by students to teach skills in vulnerability research, reverse engineering, and binary exploitation.",
      "tags": [
        "CSCI4968"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "rpi-Fall-CSCI4976",
      "title": "CSCI4976: Malware Analysis",
      "source": "RPI",
      "year": "Fall 2015",
      "url": "https://github.com/RPISEC/Malware",
      "desc": "This repository contains the materials as developed and used by RPISEC to teach Malware Analysis at Rensselaer Polytechnic Institute in Fall 2015. This was a university course developed and run soley by students, primarily using the Practical Malware Analysis book by Michael Sikorski and Andrew Honig, to teach skills in reverse engineering, malicious behaviour, malware, and anti-analysis techniques.",
      "tags": [
        "CSCI4976"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "michigan-Fall-EECS588",
      "title": "EECS588: Computer & Network Security",
      "source": "Michigan",
      "year": "Fall 2021",
      "url": "https://www.eecs.umich.edu/courses/eecs588/",
      "desc": "This intensive research seminar covers foundational work and current topics in computer systems security. We will read research papers and discuss attacks and defenses against operating systems, client-side software, web applications, and IP networks. Students will be prepared for research in computer security and for security-related research in other subareas, and they will gain hands-on experience designing and evaluating secure systems.",
      "tags": [
        "EECS588"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "mit-Spring-6.857",
      "title": "6.857: Computer and Network Security",
      "source": "MIT",
      "year": "Spring 2015",
      "url": "http://courses.csail.mit.edu/6.857/2015/",
      "desc": "6.857 Network and Computer Security is an upper-level undergraduate, first-year graduate course on network and computer security. It fits within the Computer Systems and Architecture Engineering concentration.",
      "tags": [
        6.857
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "mit-Fall-6.858",
      "title": "6.858: Computer Systems Security",
      "source": "MIT",
      "year": "Fall 2014",
      "url": "http://css.csail.mit.edu/6.858/2014/",
      "desc": "Design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications. Assignments include labs that involve implementing and compromising a secure web server and web application, and a group final project.",
      "tags": [
        6.858
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "utexas-Fall-CS378",
      "title": "CS378: 3D Reconstruction with Computer Vision",
      "source": "UTexas",
      "year": "Fall 2014",
      "url": "https://github.com/ut-cs378-vision-2014fall/course-info",
      "desc": "Projects like Photosynth, Kinect, and Tango have shown the incredible potential of using computer vision to construct immersive 3D environments from easily acquired imagery. In this lab-based class, we'll dive into practical applications of 3D reconstruction, combining hardware and software to build our own 3D environments from scratch.",
      "tags": [
        "CS378"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "nyu-Fall-CSCI-GA.2270-001",
      "title": "CSCI-GA.2270-001: Graduate Computer Graphics",
      "source": "NYU",
      "year": "Fall 2015",
      "url": "https://mrl.nyu.edu/~perlin/courses/fall2015/",
      "desc": "There are many courses that can teach you how to use commercial computer graphics packages and APIs. This course, in contrast, will teach you how to build 3D computer graphics from the ground up. This will include 3D modeling, animation, and rendering. At the end of the semester you will have built your own complete working real-time 3D computer graphics systems that runs in web browsers.",
      "tags": [
        "CSCI-GA.2270-001"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "harvard-Fall-AM207",
      "title": "AM207: Monte Carlo Methods and Stochastic Optimization",
      "source": "Harvard",
      "year": "Fall 2016",
      "url": "http://am207.github.io/2016/index.html",
      "desc": "This course introduces important principles of Monte Carlo techniques and demonstrates the power of these techniques with simple (but very useful) applications. Starting from the basic ideas of Bayesian analysis and Markov chain Monte Carlo samplers, we move to more recent developments such as slice sampling, multi-grid Monte Carlo, Hamiltonian Monte Carlo, parallel tempering and multi-nested methods. We complete our investigation of Monte Carlo samplers with streaming methods such as particle filters/sequential Monte Carlo. Throughout the course we delve into related topics in stochastic optimization and inference such as genetic algorithms, simulated annealing, probabilistic Gaussian models, and Gaussian processes.",
      "tags": [
        "AM207"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "riverside-Fall-CS100",
      "title": "CS100: Open Source Software Construction",
      "source": "Riverside",
      "year": "Fall 2015",
      "url": "https://github.com/mikeizbicki/ucr-cs100",
      "desc": "This is a course on how to be a hacker. Being a hacker means a lot of things. It means: wanting to know how and why computers work, being efficient / never repeating yourself, using and contributing to open source software, understanding the edge cases of your software, using tools in creative and unexpected ways, and (occasionally) we combine all these together and break stuff",
      "tags": [
        "CS100"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS6310-Spring",
      "title": "CS 6310: Software Architecture and Design",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://omscs.gatech.edu/cs-6310-software-architecture-design",
      "desc": "Software Architecture and Design will provide students with the principles and concepts involved in the analysis and design of large software systems.",
      "tags": [
        "CS6310"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS4803-Fall",
      "title": "CS 4803 / 7643 Deep Learning",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://www.cc.gatech.edu/classes/AY2020/cs7643_fall/#schedule",
      "desc": "This course will introduce students to the basics of Neural Networks (NNs) and expose them to some cutting-edge research. It is structured in modules (background, Convolutional NNs, Recurrent NNs, Deep Reinforcement Learning, Deep Structured Prediction). Modules will be presented via instructor lectures and reinforced with homeworks that teach theoretical and practical aspects. The course will also include a project which will allow students to explore an area of Deep Learning that interests them in more depth.",
      "tags": [
        "CS4803"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS7260-Spring",
      "title": "CS7260: Internetworking Architectures and Protocols",
      "source": "Georgia Tech",
      "year": "Spring 2019",
      "url": "https://www.cc.gatech.edu/classes/AY2019/cs7260_spring/",
      "desc": "In this semester, the syllabus will put a major emphasis on so-called network algorithmics (a.k.a. router/switch architectures and algorithms). We will study algorithms and protocols used by modern routers/switches to perform data plane functions including forwarding, address/prefix lookups, switching, scheduling, counting, flow classification, flow monitoring and measurement, IP traceback and other security functions.  In other words, we will study almost everything about a router/switch except routing, which is a control plane function and out of the scope of this course.",
      "tags": [
        "CS7260"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS7497-Spring",
      "title": "CS7497 Virtual Environments",
      "source": "Georgia Tech",
      "year": "Spring 2013",
      "url": "https://github.blairmacintyre.me/site-archive/cs7497s13/",
      "desc": "This course is an introduction to virtual environments, including virtual reality, augmented reality and multi-user online virtual worlds. Issues covered will include VR/AR technology, software design, 3D human-computer interaction, and application issues. The course is intended for graduate students in the CS program at Georgia Tech, especially PhD students.",
      "tags": [
        "CS7497"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS7616-Spring",
      "title": "CS7616 Pattern Recognition",
      "source": "Georgia Tech",
      "year": "Spring 2016",
      "url": "https://www.cc.gatech.edu/~hic/CS7616/index.html",
      "desc": "This is a graduate level for those interested in pattern recognition in general and for some elements as applied to computer vision. It is not going to be a comprehensive Machine Learning course.",
      "tags": [
        "CS7616"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS7510-Fall",
      "title": "CS7510 Graph Algorithms",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://www.cc.gatech.edu/~rpeng/CS7510_F19/",
      "desc": "This course aims to explore graph algorithms an efficiency-driven perspective. Emphasis will be on path finding / contraction based algoirthms for computing distances and cuts, with a focus on obtaining provably efficient algorithms. Recent developments in network science, graph decomposition, and numerical algorithms, as well as more classical topics such as planarity and coloring will also be addressed.",
      "tags": [
        "CS7510"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS7540-Spring",
      "title": "CS7540 Spectral Algorithms",
      "source": "Georgia Tech",
      "year": "Spring 2017",
      "url": "https://www.cc.gatech.edu/~rpeng/CS7540_S17/",
      "desc": "Spectral methods combine mathematical and algorithmic insights. This course will discuss on this connection through graphs and their spectrum, or eigenvalues. Topics of focus are random walks, clustering/graph partitioning, numerical algorithms for big data, and recent advances in graph theoretic algorithms. Presentation will assume some familiarity with graph theory (paths, cuts), probability (expectation, Markov inequality), and linear algebra (vectors, matrices, norms).",
      "tags": [
        "CS7540"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS6550-Spring",
      "title": "CS6550 Design and Analysis of Algorithms",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://www.cc.gatech.edu/~rpeng/CS6550_S21/",
      "desc": "This course will discuss recent developments in algorithms, but without the burden of modern technology and ideas. It's designed as an introduction for theory-oriened graduate students to conducting research on algorithms. Presentations will be entirely proof oriented, and revolve around mindsets motivated by algebra and number theory, via",
      "tags": [
        "CS6550"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4540-Fall",
      "title": "CS4540 Advanced Algorithms",
      "source": "Georgia Tech",
      "year": "Fall 2020",
      "url": "https://www.cc.gatech.edu/~rpeng/CS4540_F20/",
      "desc": "This course will cover advanced topics in algorithm design from the perspective of provable efficiency. It is heavily problem-solving oriented, and most of the topics will be presented from the perspective of dynamic programming. Tentative topics are:",
      "tags": [
        "CS4540"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS8803-Fall",
      "title": "CS8803 - Sampling Algorithms",
      "source": "Georgia Tech",
      "year": "Fall 2015",
      "url": "https://www.cc.gatech.edu/~rpeng/CS8803SA_F15/",
      "desc": "Sampling, or picking a subset of the data, is a process central to statistics and randomization. Recent algorithmic frameworks relying on sampling graphs and matrices highlighted several connections between combinatorial, randomized, and optimization algorithms. This course aims to discuss some of these connections, as well as explore algorithmic frameworks built around sampling. The exact choice of topics will depend on student interest. A tentative and probably overly ambitious list of topics include:",
      "tags": [
        "CS8803"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS3510-Spring",
      "title": "CS3510-A",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://www.youtube.com/playlist?list=PLIKvXrUJFnsI7zKRyqjWhgpVDtJKeJqdR",
      "desc": "The course covers basic techniques (such as divide-and-conquer, dynamic programming, greedy algorithms, local search) for the design and analysis of efficient algorithms for standard computational problems (related to graphs, hashing, sorting, optimization, etc). It also provides an introduction to the theory of NP-Completeness.",
      "tags": [
        "CS3510"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS8803-Fall",
      "title": "CS8803 Topics in Program Analysis",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://www.cc.gatech.edu/~qzhang414/course/cs8803-19/index.html",
      "desc": "CS 8803 is a graduate course on static program analysis. Static analysis provides a way to reason about programs without actually running them on specific inputs. In general, static analysis model program behavior for all possible inputs.",
      "tags": [
        "CS8803"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS6291-Fall",
      "title": "CS 6291: Embedded Systems Optimization",
      "source": "Georgia Tech",
      "year": "Fall 2020",
      "url": "https://omscs.gatech.edu/cs-8803-special-topics-embedded-software",
      "desc": "The goal of this course is to take a holistic view of the embedded system stack with a focus on processor architectures, instruction sets, and the associated advanced compiler optimizations that take advantage of the same. Following are the segments that will be covered in the course:",
      "tags": [
        "CS6291"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS1301-Spring",
      "title": "CS 1301: Introduction to Computing",
      "source": "Georgia Tech",
      "year": "Spring 2016",
      "url": "https://www.cc.gatech.edu/classes/AY2016/cs1301_spring/",
      "desc": "To understand the basic concepts of computer programming in a high-level language.",
      "tags": [
        "CS1301"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS2200-Spring",
      "title": "CS 2200 An Introduction to Computer Systems and Networks",
      "source": "Georgia Tech",
      "year": "Spring 2009",
      "url": "https://www.cc.gatech.edu/~rama/CS2200-External/",
      "desc": "Provide a broad exposure to computer system structure and networking including software abstractions in operating systems for orchestrating the usage of the computing resources",
      "tags": [
        "CS2200"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS2316-Spring",
      "title": "CS 2316: Data Manipulation for Science and Industry",
      "source": "Georgia Tech",
      "year": "Spring 2016",
      "url": "https://www.cc.gatech.edu/classes/AY2016/cs2316_spring/",
      "desc": "Students will be able to program Python programs using subset of data types and using assignment, method calls, while loops, for loops, and conditionals.",
      "tags": [
        "CS2316"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS2340-Fall",
      "title": "CS 2340: Objects and Design",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://cs2340.gitlab.io/",
      "desc": "CS2340 takes students who know an object-oriented language and basic object-oriented programming principles, and builds on that knowledge with more advanced design principles and techniques.",
      "tags": [
        "CS2340"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS3210-Fall",
      "title": "CS 3210: Design of Operating Systems",
      "source": "Georgia Tech",
      "year": "Fall 2017",
      "url": "https://cs3210.cc.gatech.edu/cal.html",
      "desc": "CS-3210 is primarily intended for senior students (motivated junior students) and graduate students who want to concentrate on systems. To benefit from the course, low-level programming skills (e.g., C or ASM programming) and preliminary knowledge on computer system (e.g., CS 2200) and architecture (e.g., CS 2110). You will be asked to design and implement core components of an operating system through labs, assignments and a final project.",
      "tags": [
        "CS3210"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS3451-Fall",
      "title": "CS 3451: Introduction to Computer Graphics",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://cs3451.github.io/cs3451-f19/",
      "desc": "This course is designed to be a first course in computer graphics, and as such, no previous experience in graphics is assumed. If you have had any prior course in computer graphics, this course may be too basic for you. The only knowledge that you need coming into this course is basic linear algebra and strong programming skills.",
      "tags": [
        "CS3451"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS3600-Fall",
      "title": "CS 3600: Introduction to Artificial Intelligence",
      "source": "Georgia Tech",
      "year": "Fall 2016",
      "url": "https://www.cc.gatech.edu/~riedl/classes/2016/cs3600/index.html",
      "desc": "Introduction to Artificial Intelligence is a three-credit undergraduate course emphasizing the building of agents, environments, and systems that can be considered as acting intelligently. In particular, you will learn about the methods and tools that will allow you to build complete systems that can interact intelligently with their environment by learning and reasoning about the world.",
      "tags": [
        "CS3600"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4420-Spring",
      "title": "CS 4420: Database System Implementation",
      "source": "Georgia Tech",
      "year": "Spring 2019",
      "url": "https://www.cc.gatech.edu/~jarulraj/courses/4420-s19/",
      "desc": "The course is a combination of lectures and programming projects in which we will study the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. The course is appropriate for graduate students in software systems and for advanced undergraduates with dirty systems programming skills.",
      "tags": [
        "CS4420"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4470-Fall",
      "title": "CS 4470: Introduction to User Interface Software",
      "source": "Georgia Tech",
      "year": "Fall 2015",
      "url": "http://kedwards.com/classes/AY2016/cs4470_fall/",
      "desc": "Understanding of the architectural and algorithmic principles behind the development of the 2-dimensional graphical user interface",
      "tags": [
        "CS4470"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4472-Spring",
      "title": "CS 4472: Design of Online Communities",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://www.cc.gatech.edu/~asb/teaching/oc/21/schedule.html",
      "desc": "Online communities are becoming an increasing part of how we work, play, and learn. But how are they designed? What are they really good for? Why are some communities more successful than others? What are the key issues in this field of research?",
      "tags": [
        "CS4472"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4476-Fall",
      "title": "CS 4476: Introduction to Computer Vision",
      "source": "Georgia Tech",
      "year": "Fall 2018",
      "url": "https://samyak-268.github.io/F18CS4476/",
      "desc": "In this introductory Computer Vision course, we will learn how to \"teach machines to see\". We will explore several fundamental concepts including image formation, feature detection, segmentation, multiple view geometry, recognition, and video processing. We will use these concepts to build applications that aid machines to see the world around them.",
      "tags": [
        "CS4476"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS4510-Fall",
      "title": "CS 4510: Automata and Complexity",
      "source": "Georgia Tech",
      "year": "Fall 2018",
      "url": "https://www.cc.gatech.edu/~rpeng/CS4510_F18/",
      "desc": "This course provides an introduction to the theory of computation. It will cover computational machine models and their corresponding language classes,",
      "tags": [
        "CS4510"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS4540-Fall",
      "title": "CS 4540: Advanced Algorithms",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://cs4540-f19.github.io/",
      "desc": "This is an advanced course on algorithms. That is quite a broad topic, and in particular this semester’s course will focus heavily on algorithms for machine learning.",
      "tags": [
        "CS4540"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS7637-Fall",
      "title": "CS 7637: Knowledge-Based Artificial Intelligence - Cognitive Systems",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://omscs.gatech.edu/cs-7637-knowledge-based-artificial-intelligence-cognitive-systems",
      "desc": "The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition.",
      "tags": [
        "CS7637"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS7646-Summer",
      "title": "CS 7646: Machine Learning for Trading",
      "source": "Georgia Tech",
      "year": "Summer 2021",
      "url": "http://lucylabs.gatech.edu/ml4t/",
      "desc": "This course introduces students to the real-world challenges of implementing machine learning-based trading strategies including the algorithmic steps from information gathering to market orders. The focus is on how to apply probabilistic machine learning approaches to trading decisions. We consider statistical approaches like linear regression, Q-Learning, KNN, and regression trees and how to apply them to actual stock trading situations.",
      "tags": [
        "CS7646"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS4649-Fall",
      "title": "CS 4649: Robot Intelligence - Planning",
      "source": "Georgia Tech",
      "year": "Fall 2014",
      "url": "https://joosm.github.io/RIP2014/",
      "desc": "This course covers the introductory material of the robot intelligence, especially from the planning perspective. We discuss algorithms for robots and other complex systems that make intelligent decisions in high dimensional or continuous spaces of options. Intelligent decisions take into account both present and future constraints on the system. The course will cover methods for planning with symbolic, numerical, geometric and physical constraints. Topics will range from classical and stochastic planning to continuous robot domains and hybrid control of dynamic systems.",
      "tags": [
        "CS4649"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS4650-Spring",
      "title": "CS 4650: Natural Language Processing",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://www.cc.gatech.edu/classes/AY2021/cs4650_spring/#info",
      "desc": "This undergraduate-level course provides an introduction to modern natural language processing using machine learning approaches. Content includes linguistics fundamentals (syntax, semantics, distributional properties of language), machine learning models (classifiers, sequence taggers, deep learning models), key algorithms for inference, and applications to a range of problems. In-person attendance is not required for the course.",
      "tags": [
        "CS4650"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS4731-Fall",
      "title": "CS 4731: Game AI",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://www.cc.gatech.edu/~surban6/2019fa-gameAI/",
      "desc": "The purpose of this course is for undergraduate and graduate students in Computing and related fields to gain a breadth of understanding of the toolbox of AI approaches employed in digital games. This involves learning some basic topics covered in other AI courses, but with a focus on applied knowledge within the context of digital games.",
      "tags": [
        "CS4731"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "GT-CS6263-Summer",
      "title": "CS 6263: Intro to Cyber Physical Systems Security",
      "source": "Georgia Tech",
      "year": "Summer 2021",
      "url": "https://omscs.gatech.edu/cs-8803-special-topics-cyber-physical-systems",
      "desc": "This course (formerly CS 8803 O07 Special Topics) provides an introduction to security issues relating to various cyber-physical systems including industrial control systems and those considered critical infrastructure systems.",
      "tags": [
        "CS6263"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS6290-Summer",
      "title": "CS 6290: High Performance Computer Architecture",
      "source": "Georgia Tech",
      "year": "Summer 2021",
      "url": "https://omscs.gatech.edu/cs-6290-high-performance-computer-architecture",
      "desc": "This course covers modern computer architecture, including branch prediction, out-of-order instruction execution, cache optimizations, multi-level caches, memory and storage, cache coherence and consistency, and multi- and many-core processors.",
      "tags": [
        "CS6290"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS6210-Spring",
      "title": "CS 6210: Advanced Operating Systems",
      "source": "Georgia Tech",
      "year": "Spring 2021",
      "url": "https://omscs.gatech.edu/cs-6210-advanced-operating-systems",
      "desc": "Advanced Operating Systems is a graduate-level course that addresses a broad range of topics in operating system design and implementation.",
      "tags": [
        "CS6210"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "GT-CS8803-Spring",
      "title": "CS 8803: Adaptive Control and Reinforcement Learning",
      "source": "Georgia Tech",
      "year": "Spring 2019",
      "url": "https://www.cc.gatech.edu/~bboots3/ACRL-Spring2019/",
      "desc": "This course is directed to graduate students interested in developing adaptive software that interacts with the world. Although much of the material will be driven by applications within robotics, anyone interested in applications of learning to planning and control techniques or an interest in building complex adaptive systems is welcome.",
      "tags": [
        "CS8803"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "GT-CS7450-Fall",
      "title": "CS 7450: Information Visualization",
      "source": "Georgia Tech",
      "year": "Fall 2019",
      "url": "https://www.cc.gatech.edu/~stasko/7450/index.html",
      "desc": "Computer-based information visualization centers around helping people explore or explain data through interactive software that exploits the capabilities of the human perceptual system. A key challenge in information visualization is designing a cognitively useful spatial mapping of a dataset that is not inherently spatial and accompanying the mapping by interaction techniques that allow people to intuitively explore the dataset. Information visualization draws on the intellectual history of several traditions, including computer graphics, human-computer interaction, cognitive psychology, semiotics, graphic design, statistical graphics, cartography, and art. The synthesis of relevant ideas from these fields with new methodologies and techniques made possible by interactive computation are critical for helping people keep pace with the torrents of data confronting them.",
      "tags": [
        "CS7450"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "UPitt-CS2750-Spring",
      "title": "CS2750 Machine Learning",
      "source": "UPITT",
      "year": "Spring 2020",
      "url": "https://people.cs.pitt.edu/~milos/courses/cs2750-Spring2020/",
      "desc": "The goal of the field of machine learning is to build computer systems that learn from experience and that are capable to adapt to their environments. Learning techniques and methods developed by researchers in this field have been successfully applied to a variety of learning tasks in a broad range of areas, including, for example, text classification, gene discovery, financial forecasting, credit card fraud detection, collaborative filtering, design of adaptive web agents and others.",
      "tags": [
        "CS2750"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UPitt-CS2710-Fall",
      "title": "CS2710 Foundations of Artificial Intelligence",
      "source": "UPITT",
      "year": "Fall 2019",
      "url": "https://people.cs.pitt.edu/~milos/courses/cs2710-Fall2019/",
      "desc": "This course will provide an introduction to the fundamental concepts and techniques underlying the construction of intelligent computer systems. Topics covered in the course include: problem solving and search, logic and knowledge representation, planning, reasoning and decision-making in the presence of uncertainty, and machine learning.",
      "tags": [
        "CS2710"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UPitt-CS441-Spring",
      "title": "CS441 Discrete Mathematics for Computer Science",
      "source": "UPITT",
      "year": "Spring 2013",
      "url": "http://people.cs.pitt.edu/~milos/courses/cs441/index.html#Abstract",
      "desc": "The purpose of this course is to understand and use (abstract) discrete structures that are backbones of computer science. In particular, this class is meant to introduce logic, proofs, sets, relations, functions, counting, and probability, with an emphasis on applications in computer science.",
      "tags": [
        "CS441"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UPitt-CS3750-Spring",
      "title": "CS 3750  Advanced Topics in Machine Learning",
      "source": "UPITT",
      "year": "Spring 2020",
      "url": "https://people.cs.pitt.edu/~milos/courses/cs3750-Spring2020/",
      "desc": "The objective of the Advances Machine Learning course is to expand on the material covered in the introductory Machine Learning course (CS2750). It focuses on special topics in ML such as exact and approximate inference in graphical models, dimensionality reduction and component analysis methods, latent variable models, models of documents and words, time series models, selected topic from deep neural networks and reinforcement learning. The course will consist of (student-lead) presentations and discussions. Students will be evaluated based on their participation in discussions, presentations and projects.",
      "tags": [
        "CS3750"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-18.434-Spring",
      "title": "18.434: Seminar in Theoretical Computer Science",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "https://www.cc.gatech.edu/~rpeng/18434_S15/index.html",
      "desc": "This is an undergraduate seminar in theoretical computer science. It carries CIM credit for the math department. As with all CIM subjects, the emphasis is on communication, both oral and written. Enrollment is limited by the department.",
      "tags": [
        18.434
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UCI-CS134-Fall",
      "title": "CS 134: Computer and Network Security",
      "source": "UCI",
      "year": "Fall 2020",
      "url": "https://www.ics.uci.edu/~alfchen/teaching/cs134-2020-Fall/index.html",
      "desc": "This course introduces basic concepts in cryptography and computer security and discusses both their theoretical foundations and practical applications. Various threats, attacks and countermeasures including cryptosystems, cryptographic protocols and secure systems/networks will be addressed. See the list of lectures for additional details. Please get in touch if you have questions or suggestions.",
      "tags": [
        "CS134"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-451-Fall",
      "title": "CMU 15-451/651",
      "source": "Carnegie Mellon",
      "year": "Fall 2012",
      "url": "https://www.cs.cmu.edu/~avrim/451f12/",
      "desc": "This course is about designing algorithms for computational problems, and how to think clearly about analyzing correctness and running time. The main goal of this course is to provide the intellectual tools needed for designing and analyzing your own algorithms for new problems you need to solve in the future. We will also discuss a bit of Complexity Theory (which looks at the intrinsic difficulty of computational problems) as well as some Algorithmic Game Theory, Computational Geometry, and Machine Learning.",
      "tags": [
        "15-451"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-CSM2020-Spring",
      "title": "CSM2020",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://sites.google.com/site/cellandsystemsmodeling/home?authuser=0",
      "desc": "This course will introduce students to the theory and practice of modeling biological systems from the molecular to the population level with an emphasis on intracellular processes. Topics covered include kinetic and equilibrium descriptions of biological processes, systematic approaches to model building and parameter estimation, analysis of biochemical circuits modeled as differential equations, modeling the effects of noise using stochastic methods. A range of biological models and applications will be considered including gene regulatory networks cell signaling, molecular motors, and developmental biology. Weekly recitations will introduce computational skills and provide students hands-on experience with methods and models presented in class. Course requirements include weekly homework assignments, a final project, and a take-home exam.",
      "tags": [
        "CSM2020"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-354-Spring",
      "title": "15-354 Computational Discrete Mathematics",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~cdm/index.html",
      "desc": "This course is about the computational aspects of some of the standard concepts of discrete mathematics (relations, functions, logic, graphs, algebra, automata), with emphasis on efficient algorithms. We begin with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata. Computational support for some of the material is available in the form of a Mathematica package.",
      "tags": [
        "15-354"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-355-Spring",
      "title": "15-355: Modern Computer Algebra",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "http://www.andrew.cmu.edu/course/15-355/",
      "desc": "The goal of this course is to investigate the relationship between algebra and computation. The course is designed to expose students to algorithms used for symbolic computation, as well as to the concepts from modern algebra which are applied to the development of these algorithms. This course provides a hands-on introduction to many of the most important ideas used in symbolic mathematical computation, which involves solving system of polynomial equations, analytic integration, solving linear difference equations, and proving combinatorial identities. It is expected that students should be able to handle modest amount of programming in Mathematica.",
      "tags": [
        "15-355"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15356-Spring",
      "title": "15356/15856:  Introduction to Cryptography",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~goyal/15356/",
      "desc": "This is an introduction to cryptography course. The course is open to graduate and undergraduate students. It is cross-listed with 15-856. This is the website for both the course sections. The course does not assume any prior background in cryptography or computer security",
      "tags": [
        15356
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-110-Spring",
      "title": "15-110: Principles of Computing",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://cs-cmuq.github.io/110-www/#main",
      "desc": "The course will take the student along the way that starts from a complex, possibly large problem to solve, and then move step by step to its abstraction, to its formalization into an algorithmic recipe, to the encoding of the algorithm using the constructs of the python language, to the run-time execution and error correction of the programming code, to the efficiency analysis of the developed algorithm and code.",
      "tags": [
        "15-110"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-288-Spring",
      "title": "15-288: Machine Learning in a Nutshell",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://web2.qatar.cmu.edu/~gdicaro/15288/",
      "desc": "This course is about the application of machine learning (ML) concepts and models to solve challenging real-world problems.",
      "tags": [
        "15-288"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-281-Fall",
      "title": "15-281: Artificial Intelligence: Representation and Problem Solving",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://web2.qatar.cmu.edu/~gdicaro/15281/",
      "desc": "In this course, this is issue is somehow narrowed down to the concept of rationality : the notion of Artificial Intelligence is treated as equivalent to that of Computational Rationality. Given well defined preferences, a rational agent always selects the actions whose outcomes result in the maximization of the expected utility.",
      "tags": [
        "15-281"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-382-Spring",
      "title": "15-382: Collective Intelligence",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://web2.qatar.cmu.edu/~gdicaro/15382/",
      "desc": "This course is about modeling and control of systems involving a large number of autonomous components that interact with each other, dynamically adapting to their changing environment as a result of mutual, possibly non-linear, interactions.",
      "tags": [
        "15-382"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-16-385-Spring",
      "title": "16-385: Computer Vision",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~16385/",
      "desc": "This course provides a comprehensive introduction to computer vision. Major topics include image processing, detection and recognition, geometry-based and physics-based vision and video analysis. Students will learn basic concepts of computer vision as well as hands on experience to solve real-life vision problems.",
      "tags": [
        "16-385"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-386-Spring",
      "title": "15-386/686: Neural Computation",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cnbc.cmu.edu/~tai/nc21.html",
      "desc": "This course explores computational principles at multiple levels, from individual neurons to circuits and systems, with a view to bridging brain science and machine learning.",
      "tags": [
        "15-386"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-388-Spring",
      "title": "15-388: Practical Data Science",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "http://www.datasciencecourse.org/lectures/",
      "desc": "Topics covered include: collecting and processing data using relational methods, time series approaches, graph and network models, free text analysis, and spatial geographic methods; analyzing the data using a variety of statistical and machine learning methods include linear and non-linear regression and classification, unsupervised learning and anomaly detection, plus advanced machine learning methods like kernel approaches, boosting, or deep learning; visualizing and presenting data, particularly focusing the case of high-dimensional data;",
      "tags": [
        "15-388"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-394-Spring",
      "title": "15-394:  Intermediate Rapid Prototyping",
      "source": "Carnegie Mellon",
      "year": "Spring 2017",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/15394u-s17/schedule.html",
      "desc": "This course covers additional topics in rapid prototyping beyond the content of 15-294. Example topics include mechanism design, procedural shape generation using Grasshopper, 3D scanning and mesh manipulation, and advanced SolidWorks concepts.",
      "tags": [
        "15-394"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-440-Spring",
      "title": "15-440: Distributed Systems",
      "source": "Carnegie Mellon",
      "year": "Spring 2014",
      "url": "https://www.cs.cmu.edu/~dga/15-440/S14/index.html",
      "desc": "15-440 is an introductory course in distributed systems. The emphasis will be on the techniques for creating functional, usable, and high-performance distributed systems. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.",
      "tags": [
        "15-440"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-441-Fall",
      "title": "15-441: Compiler Design",
      "source": "Carnegie Mellon",
      "year": "Fall 2017",
      "url": "https://www.cs.cmu.edu/~janh/courses/411/17/index.html",
      "desc": "This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.",
      "tags": [
        "15-441"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-414-Spring",
      "title": "15-414: Bug Catching: Automated Programming Verification",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~15414/index.html",
      "desc": "High-profile bugs continue to plague the software industry, leading to major problems in the reliability, safety, and security of systems. This course teaches students how to write bug-free code through the process of software verification, which aims to prove the correctness of a program with respect to a mathematical specification.",
      "tags": [
        "15-414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-415-Fall",
      "title": "15-415: Database Applications",
      "source": "Carnegie Mellon",
      "year": "Fall 2016",
      "url": "https://15415.courses.cs.cmu.edu/fall2016/syllabus.html",
      "desc": "This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).",
      "tags": [
        "15-415"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-417-Spring",
      "title": "15-417: HOT Compilation",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~crary/hotc/",
      "desc": "The course covers the implementation of compilers for higher-order typed languages such as ML. Topics include type checking, type directed compilation, elaboration, phase splitting, CPS conversion, closure conversion, allocation, and garbage collection. The course is disjoint from the standard compilers course (15-411); thus, topics such as parsing and code generation are not covered. Students will implement an ML compiler and runtime system as a term project.",
      "tags": [
        "15-417"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-418-Spring",
      "title": "15-418: Parallel Computer Architecture and Programming",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~418/index.html",
      "desc": "From smart phones, to multi-core CPUs and GPUs, to the world's largest supercomputers, parallel processing is ubiquitous in modern computing. The goal of this course is to provide a deep understanding of the fundamental principles and engineering trade-offs involved in designing modern parallel computing systems as well as to teach parallel programming techniques necessary to effectively utilize these machines. Because writing good parallel programs requires an understanding of key machine performance characteristics, this course will cover hardware design and how that affects software design.",
      "tags": [
        "15-418"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-214-Spring",
      "title": "17-214: Principles of Software Construction",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~charlie/courses/17-214/2020-spring/",
      "desc": "In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) techniques for robustness, including testing and static and dynamic analysis for programs, and (4) concurrent software.",
      "tags": [
        "17-214"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-445-Fall",
      "title": "15-445: Database Systems",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://15445.courses.cs.cmu.edu/fall2020/",
      "desc": "This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems are used to illustrate these techniques and trade-offs. The course is appropriate for students that are prepared to flex their strong systems programming skills.",
      "tags": [
        "15-445"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-453-Spring",
      "title": "15-453: Formal Languages, Automata, and Computability",
      "source": "Carnegie Mellon",
      "year": "Spring 2015",
      "url": "http://www.contrib.andrew.cmu.edu/~okahn/flac-s15/index.html",
      "desc": "This course provides an introduction to formal languages, automata, computability, and complexity. The course consists of a traditional lecture component supported by weekly homework assignments and quizzes and a course project. There are two midterms and a final examination.",
      "tags": [
        "15-453"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-455-Fall",
      "title": "15-455: Undergraduate Complexity Theory",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://www.cs.cmu.edu/~15455/index.html",
      "desc": "This course provides a gentle introduction into complexity theory, the theory of computations that are restricted by various resource bounds (time, space, energy, ...). We start with a brief tour of the computational universe at large and then home in on the low complexity classes that are most relevant in theoretical computer science such as NP and PSPACE. Time permitting, we may take a look some non-traditional models of computation such as cellular automata or infinite time Turing machines.",
      "tags": [
        "15-455"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-859N-Spring",
      "title": "15-859N: Spectral Graph Theory with Applications to ML",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/15859n-s21/schedule.html",
      "desc": "This class will be a continuation of the Spectral Graph Theory class 15-859N in Spring 2020. The class will be gin with a review of material from the Spring 2020 class. Afterwards the remaining material will be topic not covered. The course will also cover high dimensional geometry topics that overlap with spectral graph theory. Student in the class will be required to pick and present a paper or topic relevant to the class. For those of you who are more inclined to the experimental side, a presentation on your experiments will be acceptable.",
      "tags": [
        "15-859N"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-451-Fall",
      "title": "15-451: Algorithms",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://www.cs.cmu.edu/~15451-f20/index.html",
      "desc": "This course is about the design and analysis of algorithms. We will study specific algorithms for a variety of problems, as well as powerful modelling techniques (e.g. graphs and linear programming) and design paradigms (e.g. amortized analysis, dynamic programming, and sweep-line). (The complete list of topics is on the \"Home/Schedule\" page linked above.) We will study ways to analyze the efficiency of algorithms, and give lower bounds on the complexity of a problem. The topics have been chosen for their power, beauty, and practicality.",
      "tags": [
        "15-451"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-750-Spring",
      "title": "15-750: Graduate Algorithms",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/15750-s19/schedule.html",
      "desc": "The course will cover a fairly wide range of topics in algorithm design. Some of the topics will be quite a bit older work from the 1960s to more recent work from this century. We hope to present as many different tools and algorithms as time permits.",
      "tags": [
        "15-750"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-456-Fall",
      "title": "15-456: Computational Geometry",
      "source": "Carnegie Mellon",
      "year": "Fall 2017",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/15456-f17/schedule.html",
      "desc": "Extending algorithm design from one dimension to higher dimension, approximation algorithm in higher dimension, and topological algorithms.",
      "tags": [
        "15-456"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-458-Spring",
      "title": "CS 15-458/858: Discrete Differential Geometry",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://brickisland.net/DDGSpring2021/",
      "desc": "This course focuses on three-dimensional geometry processing, while simultaneously providing a first course in traditional differential geometry.",
      "tags": [
        "15-458"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-459-Fall",
      "title": "15-459: Quantum Computation and Information at CMU",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5qLskC6xQ24JpMwOAeJz",
      "desc": "Covers the basics of quantum computing, with a little bit of quantum information theory at the end.",
      "tags": [
        "15-459"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-455-Spring",
      "title": "Undergrad Complexity Theory at CMU",
      "source": "Carnegie Mellon",
      "year": "Spring 2017",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5vLXpzOyJiLtqLp6dCW2",
      "desc": "Corresponds roughly to \"Part III\" of Sipser's textbook. Prerequisites: basic knowledge of CS Theory (such as big-O notation and Turing Machines); e.g., CMU's 15-251, \"Great Theoretical Ideas in Computer Science\":",
      "tags": [
        "15-455"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-855-Fall",
      "title": "15-855: Graduate Complexity Theory at CMU",
      "source": "Carnegie Mellon",
      "year": "Fall 2017",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3b8Gg1DdaJOzYNsaXYLAOKH",
      "desc": "Covers most of what I think you should know to get started in complexity theory research.",
      "tags": [
        "15-855"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-251-Spring",
      "title": "15-251: Great Ideas in Theoretical Computer Science",
      "source": "Carnegie Mellon",
      "year": "Spring 2016",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3aafQm568blS9blxtA_EWQv",
      "desc": "A subset of various lectures from Carnegie Mellon's 15-251: Great Ideas in Theoretical Computer Science, given in Springs of 2013, 2015, 2016 by Ryan O'Donnell.",
      "tags": [
        "15-251"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-751-Fall",
      "title": "Analysis of Boolean Functions at CMU",
      "source": "Carnegie Mellon",
      "year": "Fall 2012",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3YypJNaF6sRAf2zC1QzMuTA",
      "desc": "23 lectures of a graduate course on Analysis of Boolean Functions, given Fall 2012 by Ryan O'Donnell at Carnegie Mellon.",
      "tags": [
        "15-751"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-751-Spring",
      "title": "15-751: CS Theory Toolkit at CMU",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.youtube.com/playlist?list=PLm3J0oaFux3ZYpFLwwrlv_EHH9wtH6pnX",
      "desc": "Covers a large number of the math/CS topics that you need to know for reading and doing research in Computer Science Theory.",
      "tags": [
        "15-751"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-462-Spring",
      "title": "15-462: Computer Graphics",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "http://15462.courses.cs.cmu.edu/spring2021/home",
      "desc": "This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Topics include: sampling, aliasing, interpolation, rasterization, geometric transformations, parameterization, visibility, compositing, filtering, convolution, curves & surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, ray tracing, radiometry, reflectance, light fields, geometric optics, Monte Carlo rendering, importance sampling, camera models, high-performance ray tracing, differential equations, time integration, numerical differentiation, physically-based animation, optimization, numerical linear algebra, inverse kinematics, Fourier methods, data fitting, example-based synthesis.",
      "tags": [
        "15-462"
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-463-Fall",
      "title": "15-463: Computational Photography",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "http://graphics.cs.cmu.edu/courses/15-463/2020_fall/",
      "desc": "This course provides an overview of the state of the art in computational photography. At the start of the course, we will study modern image processing pipelines, including those encountered on mobile phone and DSLR cameras, and advanced image and video editing algorithms. Then we will continue to learn about the physical and computational aspects of tasks such as 3D scanning, coded photography, lightfield imaging, time-of-flight imaging, VR/AR displays, and computational light transport. Near the end of the course, we will discuss active research topics, such as creating cameras that capture video at the speed of light, cameras that look around walls, or cameras that can see below skin.",
      "tags": [
        "15-463"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-464-Spring",
      "title": "15-464: Technical Animation",
      "source": "Carnegie Mellon",
      "year": "Spring 2013",
      "url": "https://www.cs.cmu.edu/~15464-s13/",
      "desc": "This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. We will focus primarily on character animation, but will also discuss animation of cloth and natural phenomena. Recent research results will be considered as well as basic techniques.",
      "tags": [
        "15-464"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-466-Fall",
      "title": "15-466: Computer Game Programming",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "http://graphics.cs.cmu.edu/courses/15-466-f19/",
      "desc": "Computer Game Programming will help you build the programming skills needed to turn ideas into games. This means we'll be covering both runtime systems and the asset pipelines to fuel them, along with some game-design exercises (with an eye to thrifty code).",
      "tags": [
        "15-466"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-468-Spring",
      "title": "15-468: Physics-based Rendering",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "http://graphics.cs.cmu.edu/courses/15-468/",
      "desc": "This course is an introduction to physics-based rendering at the advanced undergraduate and introductory graduate level. During the course, we will cover fundamentals of light transport, including topics such as the rendering and radiative transfer equation, light transport operators, path integral formulations, and approximations such as diffusion and single scattering. Additionally, we will discuss state-of-the-art models for illumination, surface and volumetric scattering, and sensors. Finally, we will use these theoretical foundations to develop Monte Carlo algorithms and sampling techniques for efficiently simulating physically-accurate images.",
      "tags": [
        "15-468"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-483-Fall",
      "title": "15-483: Truth, Justice, and Algorithms",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "https://www.cs.cmu.edu/~15896/index.html",
      "desc": "The course's topics include: fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; computational social choice, e.g., voting rules that optimize welfare, and methods for dealing with manipulation in elections; online matching algorithms (competitive analysis, not dating) and kidney exchange; the design of truthful auctions, as well as other topics in mechanism design; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, and the price of anarchy in congestion and routing games; and cryptocurrencies, with an emphasis on game-theoretic issues.",
      "tags": [
        "15-483"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-492-Fall",
      "title": "15-492: Speech Processing",
      "source": "Carnegie Mellon",
      "year": "Fall 2011",
      "url": "http://www.speech.cs.cmu.edu/15-492/",
      "desc": "Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete telephone spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",
      "tags": [
        "15-492"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-494-Spring",
      "title": "15-494: Cognitive Robotics",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15494-s19/",
      "desc": "This course explores the implementation of intelligent behavior in mobile robots, focusing on the Cozmo robot by Anki. It consistes of a series of Monday/Wednesday lectures, a parallel series of Friday hands-on labs and problem sets, and a capstone project taking up the last four weeks.",
      "tags": [
        "15-494"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-15-539-Fall",
      "title": "15-539: Computer Science Pedagogy",
      "source": "Carnegie Mellon",
      "year": "Fall 2017",
      "url": "https://www.cs.cmu.edu/~539/index.html",
      "desc": "A broad introduction to Computer Science Pedagogy at the grade 9-12 and first-year college levels. Students will implement, test, deploy, and manage free, online, interactive, autograded CS curricular content. As the semester progresses, students may also design some original content as well",
      "tags": [
        "15-539"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-15-719-Spring",
      "title": "15-719: Advanced Cloud Computing",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~15719/index.html",
      "desc": "Computing in the cloud has emerged as a leading paradigm for cost-effective, scalable, well-managed computing. Users pay for services provided in a broadly shared, power efficient datacenter, enabling dynamic computing needs to be met without paying for more than is needed. Actual machines may be virtualized into machine-like services, or more abstract programming platforms, or application-specific services, with the cloud computing infrastructure managing sharing, scheduling, reliability, availability, elasticity, privacy, provisioning and geographic replication.",
      "tags": [
        "15-719"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-318-Fall",
      "title": "05-318: Human-AI Interaction",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://haiicmu.github.io/",
      "desc": "In short, the goal of this course is to introduce students to ways of thinking about how Artificial Intelligence will and has impacted humans, and how we can design interactive intelligent systems that are usable and beneficial to humans, and respect human values. As students in this course, you will build a number of different interactive technologies powered by AI, gain practical experience with what impacts their usability for humans, understand the various places that humans exist in the data pipeline that drives machine learning, and learn to think both optimistically and critically of what AI systems can do and how they can and should be integrated into society.",
      "tags": [
        "05-318"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-431-Spring",
      "title": "05-431: Software Structures for User Interfaces",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~bam/uicourse/05631fall2021/",
      "desc": "This course considers the basic and detailed concepts that go into building software to implement user interfaces (UIs). It considers factors of input, output, application interface, and related infrastructure as well as the typical patterns used to implement them.",
      "tags": [
        "05-431"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-773-Spring",
      "title": "05-773: Computer Science Perspectives in HCI",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~bam/uicourse/csmini2021/",
      "desc": "This course is designed to provide new PhD candidates in Human-Computer Interaction (HCI) with an initial base of knowledge about technical research in the field.  Using a seminar-style – centered around readings and discussion – it will consider a broad introduction to the research literature, approaches, and methods from the technical side of HCI.  Students should leave the course with an appreciation of how and why technical HCI work is typically done, an ability to understand work presented in the technical HCI literature, and a knowledge of past and current work across a range of different key topics within the field.",
      "tags": [
        "05-773"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-830-Spring",
      "title": "05-830: Advanced User Interface Software",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~bam/uicourse/830spring20/",
      "desc": "This course will cover the research and implementation of user interface software. The students will get a comprehensive understanding of all the approaches that have been investigated by researchers and commercial systems for user interface software. This will be of value to people planning to be user interface researchers or implementers, or people interested in learning how to provide user interface frameworks for others.",
      "tags": [
        "05-830"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-05-640-Spring",
      "title": "05-640: Interaction Techniques",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://www.cs.cmu.edu/~bam/uicourse/05440inter2019/",
      "desc": "This course will provide a comprehensive study of the many ways to interact with computers and computerized devices. An “interaction technique” starts when the user does something that causes an electronic device to respond, and includes the direct feedback from the device to the user.",
      "tags": [
        "05-640"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-683-Fall",
      "title": "05-683: Introduction to Human-Computer Interaction for Technology Executives",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "https://www.cs.cmu.edu/~bam/uicourse/05863fall18/index.html",
      "desc": "This course provides an overview and introduction to the field of human-computer interaction, with a focus on how it applies to managers, technology executives, and others who will work with HCI professionals. Particular emphasis will be placed on what HCI methods and HCI-trained specialists can bring to design and development teams. The course will provide a hands-on introduction to proven tools and techniques for creating and improving user interfaces, such as Contextual Inquiry, Rapid Prototyping, Heuristic Analysis, and Think-Aloud Usability Testing. Students at the end of the course will have learned how to perform some useful techniques and will have an understanding of systematic procedures for creating usable and useful designs and systems.",
      "tags": [
        "05-683"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-05-436-Spring",
      "title": "05-436: Usable Privacy and Security",
      "source": "Carnegie Mellon",
      "year": "Spring 2014",
      "url": "http://cups.cs.cmu.edu/courses/ups-sp14/",
      "desc": "There is growing recognition that technology alone will not provide all of the solutions to security and privacy problems. Human factors play an important role in these areas, and it is important for security and privacy experts to have an understanding of how people will interact with the systems they develop. This course is designed to introduce students to a variety of usability and user interface problems related to privacy and security and to give them experience in designing studies aimed at helping to evaluate usability issues in security and privacy systems. The course is suitable both for students interested in privacy and security who would like to learn more about usability, as well as for students interested in usability who would like to learn more about security and privacy. Much of the course will be taught in a graduate seminar style in which all students will be expected to do a weekly reading assignment and each week different students will prepare a presentation for the class. Students will also work on a group project throughout the semester.",
      "tags": [
        "05-436"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-355-Spring",
      "title": "17-355: Program Analysis",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://cmu-program-analysis.github.io/2021/index.html",
      "desc": "This course covers both foundations and practical aspects of the automated analysis of programs, which is becoming increasingly critical to find software errors and assure program correctness. The theory of abstract interpretation captures the essence of a broad range of program analyses and supports reasoning about their correctness. Building on this foundation, the course will describe program representations, data flow analysis, alias analysis, interprocedural analysis, dynamic analysis, and symbolic execution. Through assignments and projects, students will design and implement practical analysis tools that find bugs and verify properties of software.",
      "tags": [
        "17-355"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-356-Spring",
      "title": "17-356: Software Engineering for Startups",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://cmu-17-356.github.io/",
      "desc": "In this course, we will teach you the engineering skills necessary to succeed in the highly-uncertain environment associated with a technology startup. Our focus in this class is technical; that is, we will not be spending very much time on the business side of the startup equation (though given how much business drives engineering goals, of course we will not completely ignore it!). If you are instead interested in the entrepreneurship side of the equation, we encourage you to consider 15-390, Entrepreneurship for Computer Scientists.",
      "tags": [
        "17-356"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-396-Spring",
      "title": "17-396: Language Design and Prototyping",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~aldrich/courses/17-396/",
      "desc": "15-411 is all about compilers, and focuses on writing sophisticated compilers that produce good assembly code. In contrast, this class is also about design, and it focuses on writing very simple interpreters and transpilers that help you get a language running quickly so you can try it out!",
      "tags": [
        "17-396"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-445-Summer",
      "title": "17-445: Machine Learning in Production/AI Engineering",
      "source": "Carnegie Mellon",
      "year": "Summer 2021",
      "url": "https://ckaestne.github.io/seai/",
      "desc": "Formerly Software Engineering for AI-Enabled Systems (SE4AI), CMU course that covers how to build, deploy, assure, and maintain applications with machine-learned models. Covers responsible AI (safety, security, fairness, explainability, …) and MLOps.*",
      "tags": [
        "17-445"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-10-403-Spring",
      "title": "10-403: Deep Reinforcement Learning",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://cmudeeprl.github.io/403_website/",
      "desc": "This course brings together many disciplines of Artificial Intelligence (including computer vision, robot control, reinforcement learning, language understanding) to show how to develop intelligent agents that can learn to sense the world and learn to act by imitating others, maximizing sparse rewards, and/or satisfying their curiosity.",
      "tags": [
        "10-403"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-301-Spring",
      "title": "10-301:  Introduction to Machine Learning",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~mgormley/courses/10601/index.html",
      "desc": "This course covers the theory and practical algorithms for machine learning from a variety of perspectives.",
      "tags": [
        "10-301"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-777-Fall",
      "title": "11-777: MultiModal Machine Learning",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://cmu-multicomp-lab.github.io/mmml-course/fall2020/",
      "desc": "Multimodal machine learning (MMML) is a vibrant multi-disciplinary research field which addresses some of the original goals of artificial intelligence by integrating and modeling multiple communicative modalities, including linguistic, acoustic, and visual messages.",
      "tags": [
        "11-777"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-11-755-Fall",
      "title": "11-755: Machine Learning for Signal Processing",
      "source": "Carnegie Mellon",
      "year": "Fall 2010",
      "url": "http://mlsp.cs.cmu.edu/courses/fall2010/",
      "desc": "This course discusses the use of machine learning techniques to process signals. We cover a variety of topics, from data driven approaches for characterization of signals such as audio including speech, images and video, and machine learning methods for a variety of speech and image processing problems.",
      "tags": [
        "11-755"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-731-Fall",
      "title": "11-731: Machine Translation and Sequence-to-sequence Models",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "http://phontron.com/class/mtandseq2seq2018/index.html",
      "desc": "Machine Translation and Sequence-to-Sequence Models is an introductory graduate-level course (at Carnegie Mellon's Language Technology Institute) surveying the primary approaches and methods for developing systems to translate between human languages, or other sequential data. The main objective of the course is to obtain basic understanding and implementation skills for modern methods for MT and sequence transduction, including how to design models, how to learn the model parameters, how to search for the best output, and how to create training data. The course will focus on machine translation, but also briefly cover tasks such as dialog response generation, image caption generation, and others.",
      "tags": [
        "11-731"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-11-830-Spring",
      "title": "11-830: Computational Ethics for NLP",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "http://demo.clab.cs.cmu.edu/ethical_nlp2020/#summary",
      "desc": "As language technologies have become increasingly prevalent, there is a growing awareness that decisions we make about our data, methods, and tools are often tied up with their impact on people and societies. This course introduces students to real-world applications of language technologies and the potential ethical implications associated with them. We discuss philosophical foundations of ethical research along with advanced state-of-the art techniques.",
      "tags": [
        "11-830"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-721-Fall",
      "title": "11-721: Grammars and Lexicons",
      "source": "Carnegie Mellon",
      "year": "Fall 2007",
      "url": "https://www.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/721/2007/www/index.html#Syllabus",
      "desc": "Grammars and Lexicons is an introductory graduate course on linguistic data analysis and theory, focusing on methodologies that are suitable for computational implementations. The course covers major syntactic and morphological phenomena in a variety of languages.",
      "tags": [
        "11-721"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-711-Fall",
      "title": "11-711: Algorithms for NLP",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "http://demo.clab.cs.cmu.edu/11711fa20/",
      "desc": "This course will explore foundational statistical techniques for the automatic analysis of natural (human) language text. Towards this end the course will introduce pragmatic formalisms for representing structure in natural language, and algorithms for annotating raw text with those structures. The dominant modeling paradigm is corpus-driven statistical learning, covering both supervised and unsupervised methods. Algorithms for NLP is a lab-based course. This means that instead of homeworks and exams, you will mainly be graded based on four hands-on coding projects.",
      "tags": [
        "11-711"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-611-Fall",
      "title": "11-611: Language and Statistics",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "http://langandstats.cs.cmu.edu/",
      "desc": "The goal of \"Language and Statistics\" is to ground the data-driven techniques used in language technologies in sound statistical methodology. We start by formulating various language technology problems in both an information theoretic framework (the source-channel paradigm) and a Bayesian framework (the Bayes classifier). We then discuss the statistical properties of words, sentences, documents and whole languages, and the various computational formalisms used to represent language. These discussions naturally lead to specific concepts in statistical estimation.",
      "tags": [
        "11-611"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-11-492-Fall",
      "title": "11-492: Speech Processing",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "http://tts.speech.cs.cmu.edu/courses/11492/schedule.html",
      "desc": "Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",
      "tags": [
        "11-492"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-11-411-Spring",
      "title": "11-411: Natural Language Processing",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "http://demo.clab.cs.cmu.edu/NLP/#overview",
      "desc": "This course is about a variety of ways to represent human languages (like English and Chinese) as computational systems, and how to exploit those representations to write programs that do neat stuff with text and speech data.",
      "tags": [
        "11-411"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-18-734-Fall",
      "title": "ECE 18-734: Foundations of Privacy",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "http://course.ece.cmu.edu/~ece734/index.html",
      "desc": "We will study privacy in a few settings where rigorous definitions and enforcement mechanisms are being developed - statistical disclosure limitation (as may be used by the census bureau in releasing statistics), semantics and logical specification of privacy policies that constrain information flow and use (e.g., by privacy regulations such as the HIPAA Privacy Rule and the Gramm-Leach-Bliley Act), principled audit and accountability mechanisms for enforcing privacy policies, anonymous communication protocols - and other settings in which privacy concerns have prompted much research, such as in social networks, location privacy and Web privacy (in particular, online tracking & targeted advertising).",
      "tags": [
        "18-734"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-17-645-Fall",
      "title": "17-645: Software Engineering for AI-Enabled Systems",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://ckaestne.github.io/seai/F2019/",
      "desc": "The course takes a software engineering perspective on building software systems with a significant machine learning or AI component. It discusses how to take an idea and a model developed by a data scientist (e.g., scripts and Jupyter notebook) and deploy it as part of scalable and maintainable system (e.g., mobile apps, web applications, IoT devices). Rather than focusing on modeling and learning itself, this course assumes a working relationship with a data scientist and focuses on issues of design, implementation, operation, and assurance and how those interact with the data scientist's modeling.",
      "tags": [
        "17-645"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-450-Spring",
      "title": "17-450: Crafting Software",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://cmu-crafting-software.github.io//",
      "desc": "In this course, students are expected to have been exposed to some basic programming concepts, such as variables, if-statements, loops, and arrays. However, students are not expected to have extensive programming experience. This course is not appropriate for students that have completed more than two courses involving programming. We expect students in this class to have diverse backgrounds and experience.",
      "tags": [
        "17-450"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "CMU-17-337-Spring",
      "title": "17-337: Artificial Intelligence Methods for Social Good",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://feifang.info/artificial-intelligence-methods-for-social-good-spring-2021/",
      "desc": "The rapid advance in artificial intelligence (AI) has opened up new possibilities of using AI to tackle the most challenging societal problems today. This course brings together a set of advanced AI methods that allow us to address such challenges and promote social good.",
      "tags": [
        "17-337"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-17-562-Fall",
      "title": "17-562: Law of Computer Technology",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "http://euro.ecom.cmu.edu/program/law/17-762/",
      "desc": "This course is both a survey of computer law and an examination of how courts and administrative agencies make decisions on issues involving computer technology.",
      "tags": [
        "17-562"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-17-599-Fall",
      "title": "17-599: Advanced Topics in Machine Learning and Game Theory",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://feifang.info/advanced-topics-in-machine-learning-and-game-theory-fall-2020/",
      "desc": "This course is designed to be a graduate-level course covering the topics at the intersection of machine learning and game theory.",
      "tags": [
        "17-599"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-417-Fall",
      "title": "10-417: Intermediate Deep Learning",
      "source": "Carnegie Mellon",
      "year": "Fall 2020",
      "url": "https://andrejristeski.github.io/10417-20/",
      "desc": "The goal of this course is to introduce students to both the foundational ideas and the recent advances in deep learning. The first part of the course will focus on supervised learning, including neural networks, back-propagation algorithm, convolutional models, recurrent neural networks, and their extensions with applications to image recognition, video analysis, and language modelling. The second part of the course will cover unsupervised learning, including variational autoencoders, sparse-coding, Boltzmann machines, and generative adversarial networks.",
      "tags": [
        "10-417"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-418-Fall",
      "title": "10-418: Machine Learning for Structured Data",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://www.cs.cmu.edu/~mgormley/courses/10418/index.html",
      "desc": "In this course, we will study modern approaches to structured prediction building on probabilistic graphical models, deep learning, and search. The course will focus on three key aspects: models, inference, and learning. The models we consider will focus on both generative and discriminative models such as Bayesian networks, Markov random fields (MRFs), conditional random fields (CRFs), and deep neural networks including convolutional neural networks (CNNs) and recurrent neural networks (RNNs) – as well as hybrids of graphical models and neural networks. The course will explore approaches to exact and approximate inference: junction tree algorithm, approximate marginal inference by Markov chain Monte Carlo (MCMC) and variational methods, approximate MAP inference by integer linear programming (ILP) and search.",
      "tags": [
        "10-418"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-606-Fall",
      "title": "10-606: Mathematical/Computational Foundations for Machine Learning",
      "source": "Carnegie Mellon",
      "year": "Fall 2018",
      "url": "https://www.cs.cmu.edu/~mgormley/courses/606-607-f18/index.html",
      "desc": "This course provides a place for students to practice the necessary mathematical background for further study in machine learning. Topics covered include probability (random variables, modeling with continuous and discrete distributions), linear algebra (inner product spaces, linear operators), and multivariate differential calculus (partial derivatives, matrix differentials). The course assumes some background in each of the above, but will review and give practice in each. (It does not provide from-scratch coverage of all of the above, which would be impossible in a course of this length.) Some coding will be required: the course will provide practice with translating the above mathematical concepts into concrete programs.",
      "tags": [
        "10-606"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-36-708-Spring",
      "title": "36-708: Statistical Methods for Machine Learning",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "http://www.stat.cmu.edu/~larry/=sml/",
      "desc": "This course is an advanced course focusing on the intsersection of Statistics and Machine Learning. The goal is to study modern methods and the underlying theory for those methods.",
      "tags": [
        "36-708"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-707-Spring",
      "title": "10-707: Advanced Deep Learning",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://andrejristeski.github.io/10707-S20/",
      "desc": "Models that are capable of extracting complex, hierarchical representations from high-dimensional data lie at the core of solving many ML and AI domains, such as visual object recognition, information retrieval, natural language processing, and speech perception. While the usefulness of such deep learning techniques is undisputed, our understanding of them is still in many ways nascent. The goal of this course is to introduce students to recent and exciting developments (both theoretical and practical) in these methods.",
      "tags": [
        "10-707"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-708-Spring",
      "title": "10-708: Probabilistic Graph Models",
      "source": "Carnegie Mellon",
      "year": "Spring 2019",
      "url": "https://sailinglab.github.io/pgm-spring-2019/",
      "desc": "Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides an unified view for this wide range of problems, enables efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models.",
      "tags": [
        "10-708"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-10-725-Fall",
      "title": "10-725: Convex Optimization",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "http://www.stat.cmu.edu/~ryantibs/convexopt/#homework",
      "desc": "This course is designed to give a graduate-level student a thorough grounding in these properties and their role in optimization, and a broad comprehension of algorithms tailored to exploit such properties. The focus will be on convex optimization problems (though we also may touch upon nonconvex optimization problems at some points). We will visit and revisit important applications in machine learning and statistics.",
      "tags": [
        "10-725"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-36-350-Fall",
      "title": "36-350: Statistical Computing",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://www.stat.cmu.edu/~ryantibs/statcomp/",
      "desc": "Students will learn the core of ideas of programming—data structures, functions, iteration, debugging, logical design, and abstraction—through writing code to assist in statistical analyses. Students will learn how to write maintainable code, as well as debug and test code for correctness. They will learn how to set up and run stochastic simulations, how to fit basic statistical models and assess the results, and how to work with and filter large data sets. Since code is an important form of communication among scientists, students will also learn how to comment and organize code.",
      "tags": [
        "36-350"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-737-Fall",
      "title": "10-737: Creative AI",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "http://kangeunsu.com/creativeai19f/#schedule",
      "desc": "This course is where we explore these questions through seminars and projects. Our goal is to design computational models that present the very possibility of the creative AI.",
      "tags": [
        "10-737"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-10-405-Spring",
      "title": "10-405: Machine Learning with Large Data Sets",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://10605.github.io/",
      "desc": "Large datasets pose difficulties across the machine learning pipeline. They are difficult to visualize and introduce computational, storage, and communication bottlenecks during data preprocessing and model training. Moreover, high capacity models often used in conjunction with large datasets introduce additional computational and storage hurdles during model training and inference. This course is intended to provide a student with the mathematical, algorithmic, and practical knowledge of issues involving learning with large datasets. Among the topics considered are: data cleaning, visualization, and pre-processing at scale; principles of parallel and distributed computing for machine learning; techniques for scalable deep learning; analysis of programs in terms of memory, computation, and (for parallel methods) communication complexity; and methods for low-latency inference.",
      "tags": [
        "10-405"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-10-831-Spring",
      "title": "10-831: Machine Learning in Policy",
      "source": "Carnegie Mellon",
      "year": "Spring 2018",
      "url": "https://www.andrew.cmu.edu/user/jweiss2/mlp/index.html",
      "desc": "Machine learning, a field derived primarily from computer science and statistics, has matured and gained wide adoption. Alongside exponential increases in data measurement and availability, the ability to develop appropriate and tailored analyses is in demand. As practitioners in the social sciences consider machine learning methods, however, limitations and externalities of the applications of machine learning techniques are being identified, such as overconfidence in settings with concept drift, lack of generalizability due to selection bias, and magnification of inequities. Machine Learning in Policy seeks to (1) demonstrate motivations and successes of machine learning, to (2) contrast them with more classical methods, and to (3) investigate the promise and cautions of machine learning for public policy.",
      "tags": [
        "10-831"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-311-Spring",
      "title": "16-311: Introduction to Robotics",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~16311/current/",
      "desc": "This course presents an overview of robotics in practice and research with topics including vision, motion planning, mobile mechanisms, kinematics, inverse kinematics, and sensors.",
      "tags": [
        "16-311"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-350-Spring",
      "title": "16-350: Planning Techniques for Robotics",
      "source": "Carnegie Mellon",
      "year": "Spring 2021",
      "url": "https://www.cs.cmu.edu/~maxim/classes/robotplanning/",
      "desc": "Planning is one of the core components that enable robots to be autonomous. Robot planning is responsible for deciding in real-time what the robot should do next, how to do it, where the robot should move next and how to move there. This class does an in-depth study of popular planning techniques in robotics and examines their use in ground and aerial robots, humanoids, mobile manipulation platforms and multi-robot systems. The students learn the theory of these methods and also implement them in a series of programming-based projects.",
      "tags": [
        "16-350"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-432-Spring",
      "title": "16-432: Designing Computer Vision Apps",
      "source": "Carnegie Mellon",
      "year": "Spring 2017",
      "url": "http://ci2cv.net/16432/",
      "desc": "Topics will include using conventional computer vision software tools (OpenCV, MATLAB toolboxes, VLFeat, TensorFlow, etc.), and development on iOS devices using mobile vision libraries such as GPUImage and fast math libraries like Armadillo and Eigen. For consistency, all app development will be in iOS and it is expected that all students participating in the class have access to an Intel-based MAC running OS X El Capitan or later. Although the coursework will be focused on a single operating system, the knowledge gained from this class will easily generalize to other mobile platforms such as Android etc.",
      "tags": [
        "16-432"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-425-Spring",
      "title": "16-425: Methods in Bio(Medical) Image Analysis",
      "source": "Carnegie Mellon",
      "year": "Spring 2020",
      "url": "https://www.cs.cmu.edu/~galeotti/methods_course/",
      "desc": "Students will gain theoretical and practical skills in 2D, 3D, and 4D biomedical image analysis, including skills relevant to general image analysis. The fundamentals of computational medical image analysis will be explored, leading to current research in applying geometry and statistics to segmentation, registration, visualization, and image understanding. Additional and related covered topics include de-noising/restoration, morphology, level sets, and shape/feature analysis.",
      "tags": [
        "16-425"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-623-Fall",
      "title": "16-623: Advanced Computer Vision Apps",
      "source": "Carnegie Mellon",
      "year": "Fall 2016",
      "url": "http://16623.courses.cs.cmu.edu/",
      "desc": "This course is aimed at covering advanced concepts associated with the emerging topic of applying computer vision to app development on smart devices and embedded devices. Computer vision is a discipline that attempts to extract information from images and videos. Nearly every smart device on the planet has a camera, and people are increasingly interested in how to develop apps that use computer vision to perform an ever expanding list of things including: 3D mapping, photo/image search, people/object tracking, augmented reality etc. This course is intended for students who have taken previous courses in  computer vision, but are keen to explore advanced topics associated with their application to smart and embedded devices",
      "tags": [
        "16-623"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-16-647-Spring",
      "title": "16-647: Human-Robot Interaction",
      "source": "Carnegie Mellon",
      "year": "Spring 2016",
      "url": "https://www.cs.cmu.edu/~illah/16-467/index.html",
      "desc": "This course is primarily lecture-based, with in-class participatory mini-projects, group homework assignments, a group term project that will enable students to put theory to practice using state-of-the-art interactive robots, and a final. The topics covered will include underlying robotic technologies, as they relate to human-robot interaction, interaction methodologies and techniques, study design, man-machine coupling, ethics and the singularity, and will include discussions of application domains that feature HRI.",
      "tags": [
        "16-647"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-16-741-Fall",
      "title": "16-741: Mechanics of Manipulation",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/16741-s07/www/index.html",
      "desc": "To understand the mechanical processes governing manipulation, with a focus on the interaction of hand with environment. The class focuses on models founded on classical mechanics: kinematics, statics, and dynamics of interacting rigid bodies. We will develop techniques for rigid body mechanics, kinematic constraint, Coulomb friction, gravity, and impact, and apply these techniques to manipulation problems including picking and placing, parts orienting, assembly, and mobile manipulation.",
      "tags": [
        "16-741"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-883-Fall",
      "title": "16-883:L Provably Safe Robotics",
      "source": "Carnegie Mellon",
      "year": "Fall 2019",
      "url": "https://www.cs.cmu.edu/~cliu6/provably-safe-robotics.html",
      "desc": "Safe autonomy has become increasingly critical in many application domains. It is important to ensure not only the safety of the ego robot, but also the safety of other agents (humans or robots) that directly interact with the autonomy.",
      "tags": [
        "16-883"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-16-848-Spring",
      "title": "16-848: Hands: Design and Control for Dexterous Manipulation",
      "source": "Carnegie Mellon",
      "year": "Spring 2018",
      "url": "http://graphics.cs.cmu.edu/nsp/course/16899-s18/",
      "desc": "In this course, we will survey robotic hands and learn about the human hand with the goal of pushing the frontiers on hand design and control for dexterous manipulation. We will consider the necessary kinematics and dynamics for dexterity, what sensors are required to carry out dexterous interactions, the importance of reflexes and compliance, and the challenge of uncertainty. We will examine the human hand: its structure, sensing capabilities, human grasp choice and control strategies for inspiration and benchmarking. Students will be asked to present one or two research papers, participate in discussions and short research or design exercises, and carry out a final project.",
      "tags": [
        "16-848"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "CMU-16-824-Spring",
      "title": "16-824: Visual  Learning and Recognition",
      "source": "Carnegie Mellon",
      "year": "Spring 2017",
      "url": "http://graphics.cs.cmu.edu/courses/16-824/2017_spring/index.html",
      "desc": "A graduate course in Computer Vision with emphasis on representation and reasoning for large amounts of data (images, videos and associated tags, text, gps-locations etc) toward the ultimate goal of Image Understanding. We will be reading an eclectic mix of classic and recent papers on topics including: Theories of Perception, Mid-level Vision (Grouping, Segmentation, Poselets), Object and Scene Recognition, 3D Scene Understanding, Action Recognition, Contextual Reasoning, Image Parsing, Joint Language and Vision Models, etc. We will be covering a wide range of supervised, semi-supervised and unsupervised approaches for each of the topics above.",
      "tags": [
        "16-824"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "CMU-16-823-Spring",
      "title": "16-823: Physics-based Methods in Vision",
      "source": "Carnegie Mellon",
      "year": "Spring 2011",
      "url": "https://www.cs.cmu.edu/afs/cs/academic/class/16823-f06/",
      "desc": "Everyday we observe an extraordinary array of light and color phenomena around us, ranging from the dazzling effects of the atmosphere, the complex appearances of surfaces and materials and underwater scenarios. For a long time, artists, scientists and photographers have been fascinated by these effects, and have focused their attention on capturing and understanding these phenomena. In this course, we take a computational approach to modeling and analyzing these phenomena, which we collectively call as \"visual appearance\". The first half of the course focuses on the physical fundamentals of visual appearance, while the second half of the course focuses on algorithms and applications in a variety of fields such as computer vision, graphics and remote sensing and technologies such as underwater and aerial imaging. This course unifies concepts usually learnt in physical sciences and their application in imaging sciences. The course will also include a photography competition in addition to analytical and practical assignments.",
      "tags": [
        "16-823"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2412-Fall",
      "title": "CSC2412: Algorithms for Private Data Analsys",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "http://www.cs.toronto.edu/~anikolov/CSC2412F19/CSC2412.html",
      "desc": "In this course we will study privacy in data analysis from a rigorous theoretical perspective. We will focus on Differential Privacy: a recent approach to achieving strong provable privacy guarantees in the analysis of sensitive data. Informally, a data analysis algorithm is differentially private if changing the data of a single individual changes the output distribution of the algorithm only slightly. This guarantee ensures that the privacy risk to any individual increases only slightly by participating in data collection. Our focus will be on the design of efficient differentially private algorithms. In the process, we will learn about fascinating connections between differential privacy and machine learning, geometry, and game theory.",
      "tags": [
        "CSC2412"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UTexas-CS302-Spring",
      "title": "CS 302: Computer Fluency",
      "source": "UTexas",
      "year": "Spring 2014",
      "url": "https://www.cs.utexas.edu/~ear/cs302/",
      "desc": "Computers touch everything we do today.  In this class we’ll look at computer systems from the ground up.  We’ll see how they work and what we can all do to exploit them more effectively.",
      "tags": [
        "CS302"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UTexas-CS349-Fall",
      "title": "CS 349: Contemporary Issues in Computer Science",
      "source": "UTexas",
      "year": "Fall 2016",
      "url": "https://www.cs.utexas.edu/users/ear/cs349/",
      "desc": "In this class, we’ll cover a collection of issues that: matter to computer scientists, and/or matter to our society and that computer scientists have some significant impact on.",
      "tags": [
        "CS349"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UTexas-CS303E-Fall",
      "title": "CS 303E: Elements of Computers and Programming",
      "source": "UTexas",
      "year": "Fall 2017",
      "url": "https://www.cs.utexas.edu/~mitra/csFall2017/cs303/cs303.html",
      "desc": "Computing is an integral part of all natural sciences and engineering disciplines. All other disciplines require some familiarity with computers. This course is designed to teach the fundamentals of computing and programming to students who wish to minor in Computer Science. In this course we will cover basic computer architecture and software components. We will learn to program in a high level language (Python). We will learn problem solving techniques for numerical and scientific problems. We will study the syntax and special features of Python, develop our own algorithms, and translate them to computer code. No prior programming experience is required but familiarity with personal computers will help significantly.",
      "tags": [
        "CS303E"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UTexas-CS104C-Spring",
      "title": "CS 104C: Competitive Programming",
      "source": "UTexas",
      "year": "Spring 2021",
      "url": "https://www.cs.utexas.edu/users/downing/cs104c/Schedule.html",
      "desc": "Explores the algorithms needed to solve a given problem, reason about corner cases, and write correct implementations under time pressure. Focuses on skills useful for international programming competitions, whiteboard job interviews, and programming tasks that require quickly solving challenging problems with creative use of algorithms.",
      "tags": [
        "CS104C"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UTexas-CS311-Spring",
      "title": "CS 311: Discrete Math for Computer Science",
      "source": "UTexas",
      "year": "Spring 2015",
      "url": "https://www.cs.utexas.edu/~vl/teaching/311/",
      "desc": "This course will introduce you to methods of reasoning used in computer science. Main topics: logical notation and proof methods; induction and recursion; sets, functions, and relations; the growth of functions; annotated programs and loop invariants.",
      "tags": [
        "CS311"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UTexas-CS313E-Spring",
      "title": "CS 313E: Elements of Software Design",
      "source": "UTexas",
      "year": "Spring 2021",
      "url": "https://www.cs.utexas.edu/users/mitra/csSpring2021/cs313/cs313.html",
      "desc": "Object-oriented design of software using Python, a modern high-level language. Introduction to abstract data types, fundamental algorithms, and basics of complexity analysis.",
      "tags": [
        "CS313E"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC401-Spring",
      "title": "CSC401: Natural Language Computing",
      "source": "UToronto",
      "year": "Spring 2021",
      "url": "http://www.cs.toronto.edu/~frank/csc401/",
      "desc": "This course presents an introduction to natural language computing in applications such as information retrieval and extraction, intelligent web searching, speech recognition, and machine translation. These applications will involve various statistical and machine learning techniques.",
      "tags": [
        "CSC401"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2501-Fall",
      "title": "CSC2501: Computational Linguistics",
      "source": "UToronto",
      "year": "Fall 2015",
      "url": "http://www.cs.toronto.edu/~frank/csc2501/",
      "desc": "This course covers, as the name suggests, computational linguistics and the understanding and generation of natural language by machines. Topics include syntactic processing, semantics and semantic interpretation, pragmatics, pronouns, definite descriptions, discourse context, and machine translation.",
      "tags": [
        "CSC2501"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2518-Fall",
      "title": "CSC2518: Spoken Language Processing (Speech in healthcare and assistive technologies)",
      "source": "UToronto",
      "year": "Fall 2014",
      "url": "http://www.cs.toronto.edu/~frank/csc2518/",
      "desc": "This is a graduate course broadly on topics of speech processing by machine including digital signal processing, automatic speech recognition, and speech synthesis. The theme this year is Speech in healthcare and assistive technologies which will include automatic dictation of speech for medical records, analysis of speech in language pathologies (e.g., in cerebral palsy, Parkinson's disease, and Alzheimer's disease), and assistive technologies such as text-to-speech (with and without brain-computer interfaces) for people with limited speech ability.",
      "tags": [
        "CSC2518"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC311-Spring",
      "title": "CSC311: Introduction to Machine Learning",
      "source": "UToronto",
      "year": "Spring 2020",
      "url": "https://amfarahmand.github.io/csc311/",
      "desc": "By the end of this course, the students will learn about (roughly categorized): Machine Learning Problems: Supervised (regression and classification), Unsupervised (clustering, dimension reduction), Reinforcement Learning, Models: Linear and Nonlinear (Basis Expansion and Neural Networks), Loss functions: Squared Loss, Cross Entropy, Hinge, Exponential, etc., Regularizers: l1 and l2, Probabilistic viewpoint: Maximum Likelihood Estimation, Maximum A Posteriori, Bayesian inference, Bias and Variance Tradeoff, Ensemble methods: Bagging and Boosting, Optimization technique in ML: Gradient Descent and Stochastic Gradient Descent",
      "tags": [
        "CSC311"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2547-Spring",
      "title": "CSC2547: Introduction to Reinforcement Learning",
      "source": "UToronto",
      "year": "Spring 2021",
      "url": "https://www.youtube.com/playlist?list=PLCveiXxL2xNbiDq51a8iJwPRq2aO0ykrq",
      "desc": "This is an introductory course on reinforcement learning (RL) and sequential decision-making under uncertainty with an emphasis on understanding the theoretical foundation. We study how dynamic programming methods such as value and policy iteration can be used to solve sequential decision-making problems with known models, and how those approaches can be extended in order to solve reinforcement learning problems, where the model is unknown. Other topics include, but not limited to, function approximation in RL, policy gradient methods, model-based RL, and balancing the exploration-exploitation trade-off. The course will be delivered as a mix of lectures and reading of classical and recent papers assigned to students. As the emphasis is on understanding the foundation, you should expect to go through mathematical detail and proofs. Required background for this course includes being comfortable with probability theory and statistics, calculus, linear algebra, optimization, and (supervised) machine learning.",
      "tags": [
        "CSC2547"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC411-Fall",
      "title": "CSC411: Machine Learning and Data Mining",
      "source": "UToronto",
      "year": "Fall 2018",
      "url": "https://www.cs.toronto.edu/~rgrosse/courses/csc411_f18/",
      "desc": "Machine learning is a set of techniques that allow machines to learn from data and experience, rather than requiring humans to specify the desired behavior by hand. Over the past two decades, machine learning techniques have become increasingly central both in AI as an academic field, and in the technology industry. This course provides a broad introduction to some of the most commonly used ML algorithms. It also serves to introduce key algorithmic principles which will serve as a foundation for more advanced courses, such as CSC412/2506 (Probabilistic Learning and Reasoning) and CSC421/2516 (Neural Networks and Deep Learning).",
      "tags": [
        "CSC411"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE444-Fall",
      "title": "ECE444: Software Engineering",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://shuiblue.github.io/UofT-ECE444/",
      "desc": "Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. ECE444 explores these issues broadly covering the fundamentals of modern software engineering.",
      "tags": [
        "ECE444"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1742-Winter",
      "title": "ECE1724: Empirical Software Engineering",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://shuiblue.github.io/UofT-ECE1724S2-EmpiricalSE/",
      "desc": "We will focus on software engineering related research questions in readings and assignments. Students will mine and integrate data from and across online software repositories (e.g., GitHub and Stack Overflow) and employ a spectrum of data analysis techniques, ranging from statistical modeling to social network analysis. For the final research project, we encourage students to come up with a research question of interest to themselves. The delivery will be a research paper, and one or more empirical methods presented in class have to be part of the paper.",
      "tags": [
        "ECE1742"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2130-Fall",
      "title": "CSC2130: Empirical Research Methods for Computer Scientists",
      "source": "UToronto",
      "year": "Fall 2014",
      "url": "http://www.cs.toronto.edu/~sme/CSC2130/index.html",
      "desc": "This course will explore the role of empiricism in computer science research, and will prepare students for advanced research by examining how to plan, conduct and report on empirical investigations. The course will cover techniques applicable to each of the steps of a research project, including formulating research questions, theory building, data analysis (using both qualitative and quantitative methods), building evidence, assessing validity, and publishing. The course will cover the principal research methods used to study human interaction with computer technology: controlled experiment, case studies, surveys, archival analysis, action research and ethnographies. We will relate these methods to relevant metatheories in the philosophy and sociology of science, and critically review published examples of work that used each of the principle methods in computer science.",
      "tags": [
        "CSC2130"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-ECE344-Winter",
      "title": "ECE344: Operating Systems",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://www.eecg.utoronto.ca/~yuan/teaching/ece344/index.html",
      "desc": "In this course discuss the principles in the design and implementation of operating systems software. Topics include: Introduction to operating systems concepts, process management, memory management, file systems for both hard drive and SSD, virtualization, and distributed operating systems. The laboratory exercises will require implementing a simple, but functional operating system from ground up.",
      "tags": [
        "ECE344"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1759-Fall",
      "title": "ECE1759: Advances in Operating Systems",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://www.eecg.utoronto.ca/~yuan/teaching/gradOS/index.html",
      "desc": "This course examines advanced research topics in the area of operating systems. We will read research papers that capture some of the important advancements in OS research. You will learn how to read a research paper, how to articulate your insights into a research paper, how to present a paper, and how to distill complex systems into their essence.",
      "tags": [
        "ECE1759"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-ECE454-Fall",
      "title": "ECE454: Computer Systems Programming",
      "source": "UToronto",
      "year": "Fall 2018",
      "url": "https://www.eecg.utoronto.ca/~yuan/teaching/ece454/index.html",
      "desc": "This course goes beyond prior programming courses to teach students to better understand computer hardware, operating systems, and compilers from a programmer's perspective. In particular this course leverages this improved understanding to allow students to program for good performance. Students will learn how to measure and understand program execution and behavior, how to get the most out of an optimizing compiler, how memory is allocated and managed, and how to exploit caches and the memory hierarchy. Furthermore, students will learn about current trends in multicore, multithreaded, and data parallel hardware, how to exploit parallelism in their programs, the fundamentals of parallel architectures and synchronization techniques, and the recent trend of distributed data analytics (e.g., big data analytics) ---these latter topics are relatively new to undergraduate curricula and in increasing demand in industry. Students will get hands-on experience with most topics through programming assignments.",
      "tags": [
        "ECE454"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MATA35-Summer",
      "title": "MATA35: Calculus II for Biological Sciences",
      "source": "UToronto",
      "year": "Summer 2021",
      "url": "http://www.math.toronto.edu/ywyu/MATA35-2021-Summer/",
      "desc": "This is a lower-level course introducing mathematical techniques that will be useful for majors/specialists in biology and allied disciplines, and how to apply those techniques for biological problems. The prerequisite for this class is MATA29 (Calculus I for the Life Sciences); you are expected to have a solid grounding in basic algebra, transcendental functions, limits, and differential calculus, as well as exposure to antiderivatives an integral calculus. This course will cover multiple integration, linear algebra, regression analysis, differential equations, biological modelling, power series, and linearization of nonlinear systems. Unlike other courses covering similar material (MATA22-23, MATB44, MATC58), we will focus on applying techniques rather than understanding the underlying rigorous theory.",
      "tags": [
        "MATA35"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MATC58-Winter",
      "title": "MATC58: An Introduction to Mathematical Biology",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "http://www.math.toronto.edu/ywyu/MATC58-2021-Winter/",
      "desc": "This is an upper level course introducing mathematical biology for 3rd and 4th-year math majors and specialists. The prerequisite for this class is MATB44 (differential equations I), and you are expected to have a solid grounding in calculus, linear algebra, and differential equations. Additionally, there will be basic programming and modelling assignments in Python.",
      "tags": [
        "MATC58"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MAT1801-Winter",
      "title": "MAT1801: Methods of Applied Mathematics II",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "http://www.math.toronto.edu/ywyu/MAT1801-2020W/",
      "desc": "This course covers the formulation and solution of applied problems. Sources of these problems are the fields of engineering, physics, computer science, chemistry, biology, medicine, economics, statistics, and the social sciences. In this course, we will focus on the mathematical underpinnings of modern data science. The core of the class will revolve around understanding high-dimensional space, matrix factorization, and probabilistic techniques. Topics may include Markov chains, streaming/sketching algorithms, clustering, spectral graph theory, random graphs, wavelets, graphical models, and computational topology. The precise topics will vary with the instructor and the interests of the class. This course forms the foundation for research in applied mathematics.",
      "tags": [
        "MAT1801"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MATB44H3-Fall",
      "title": "MATB44H3: Differential Equations I",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "http://www.math.toronto.edu/ywyu/MATB44H32019/",
      "desc": "This is an introductory course in differential equations designed for second-year math majors and specialists. However, non-majors/specialists are most welcome, assuming they have the necessary background. Having a heterogeneous student body can make portions of the class more interesting. The prerequisites are MATA36H3/MATA37H3 (single-variable calculus) and MATA22H3/MATA23H3 (linear algebra) and the corequisite is MATB41H3 (multi-variable calculus).",
      "tags": [
        "MATB44H3"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1762-Fall",
      "title": "ECE1762: Algorithms and Data Structures",
      "source": "UToronto",
      "year": "Fall 2016",
      "url": "https://www.eecg.utoronto.ca/~ece1762/",
      "desc": "This course covers fundamentals of computer algorithms and data structures. The objective is to give the audience an introduction to combinatorial modeling, algorithms and the underlying analysis. It also aims to present a wide range of fundamental data structures and examine their complexity in terms of space/time. In brief, the course will start with a review of a number of basic combinatorial tools such as recurrences, worst/best/average case analysis, probability, and discrete mathematics (summations, principles of counting, induction). Next, it will present a wide range of fundamental data structures and algorithms along with a detailed analysis of their time/space behavior and real life use. Topics include searching and sorting, dictionary operations, dynamic programming, greedy methods, graph algorithms (shortest paths, maximum flow), parallel algorithms, intro to NP-completeness, approximation algorithms and one advanced topic of choice such as matrix multiplication, FFT or amortized analysis.",
      "tags": [
        "ECE1762"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-STA130-Fall",
      "title": "STA130: An Introduction to Statistical Reasoning and Data Science",
      "source": "UToronto",
      "year": "Fall 2018",
      "url": "https://ntaback.github.io/UofT_STA130/",
      "desc": "Statistics is about how we can learn from data. Data Science is a relatively new interdisciplinary field that also includes the computational aspects of carrying out a data analysis, including acquisition, management, and analysis of data. Statistical reasoning and computing with data play important roles in this emerging discipline. The purpose of this course is to give you a broad introduction to many of the ways statisticians learn from data. In addition to statistical reasoning, learning from data involves computation and communication. We will use the R programming language and environment for statistical computing, and tutorials will introduce students to communicating statistical knowledge.",
      "tags": [
        "STA130"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-JSC270H1S-Winter",
      "title": "JSC270H1S: Data Science I",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://jsc270.github.io/index.html",
      "desc": "This course will focus on introducing students to the fundamentals of data science, including data cleaning and exploration, visualization, and statistical reasoning. The course will also emphasize professional skills, such as oral/ written communication, end-to-end workflows, teamwork, and state-of-the-art computer programming tools. The practical applications of these skills will be demonstrated through guest lectures with experts from academia and industry, across a variety of disciplines. Students will be evaluated using several different techniques, including programming assignments, written reflections, and oral presentations.",
      "tags": [
        "JSC270H1S"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-STA305-Fall",
      "title": "STA305: Design of Scientific Studies",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://scidesign.github.io/index.html",
      "desc": "This course will provide an introduction to the fundamental concepts of the design of scientific studies including the design of experiments and observational studies. Students will be become acquainted with statistical methods used to design and analyze experiments and observational studies. In particular, this course will cover: experiments versus observational studies, clinical trial design, comparing several groups using a completely randomized design, randomized blocks, Latin squares, incomplete block designs, factorial designs, causal inference in randomized and non-randomized studies, and adjusting for selection bias using propensity score methods.",
      "tags": [
        "STA305"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MAT1510-Winter",
      "title": "MAT1510: Deep Learning: Theory & Data Science",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://sites.google.com/view/mat1510",
      "desc": "Deep learning systems have revolutionized field after another, leading to unprecedented empirical performance. Yet, their intricate structure led most practitioners and researchers to regard them as blackboxes, with little that could be understood. In this course, we will review experimental and theoretical works aiming to improve our understanding of modern deep learning systems.",
      "tags": [
        "MAT1510"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1784H-Fall",
      "title": "ECE1784H: Trustworthy Machine Learning",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.papernot.fr/teaching/f19-trustworthy-ml",
      "desc": "The deployment of machine learning in real-world systems calls for a set of complementary technologies that will ensure that machine learning is trustworthy. Here, the notion of trust is used in its broad meaning: the course covers different topics in emerging research areas related to the broader study of security and privacy in machine learning. Students will learn about attacks against computer systems leveraging machine learning, as well as defense techniques to mitigate such attacks.",
      "tags": [
        "ECE1784H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC121-Winter",
      "title": "CSC121: Computer Science for Statistics",
      "source": "UToronto",
      "year": "Winter 2017",
      "url": "http://www.cs.utoronto.ca/~radford/csc121.S17/",
      "desc": "CSC121 is an introduction to programming aimed at students studying to be statisticians, or who otherwise expect to use statistics extensively in their work. It uses the R language, which is widely used for statistical research and applications. It is meant to be accessible to students with no programming experience. Although it is motivated by statistical applications, no specific knowledge of statistics is required to take this course.",
      "tags": [
        "CSC121"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-STA414-Winter",
      "title": "STA414: Statistical Methods for Machine Learning and Data Mining",
      "source": "UToronto",
      "year": "Winter 2014",
      "url": "http://www.utstat.utoronto.ca/~radford/sta414.S14/",
      "desc": "This course covers some of the theory and methodology of statistical aspects of machine learning. The preliminary set of topics to be covered include: Linear methods for regression, Bayesian linear regression, linear models for classification, probabilistic Generative and Discriminative models, regularization methods, model comparison and BIC, Neural Networks, radial basis function networks, Kernel Methods, Gaussian processes, Support Vector Machines, and other topics.",
      "tags": [
        "STA414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1724-Winter",
      "title": "ECE1724: Empirical Software Engineering",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.eecg.utoronto.ca/~ashvin/courses/ece1724/2020w/index.html",
      "desc": "The course covers advanced topics, broadly in the area of distributed systems, storage and databases, with a focus on web-scale applications. The goal is provide a survey of research in this area, rather than focus on a specific topic.",
      "tags": [
        "ECE1724"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-ECE1781-Winter",
      "title": "ECE1781: Dependable Software Systems",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "https://www.eecg.utoronto.ca/~ashvin/courses/ece1781/2018w/index.html",
      "desc": "This advanced graduate-level course focuses on dependability in software systems and examines current research that aims to address challenges caused by software and hardware bugs and software misconfiguration. Students are expected to read and critique recent research papers in operating systems that cover these areas. They are also expected to work on a research project and make class presentations. While there are no specific prerequisites for this course, students who have taken undergraduate or graduate courses in operating systems, networks and distributed systems will have an edge.",
      "tags": [
        "ECE1781"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-LIN1505-Fall",
      "title": "LIN1505: Computational Linguistics",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~barend/lin1505_2019.html",
      "desc": "This course deals with computational methods in linguistics. It combines a theoretical approach (reflecting on the role computational methods can play in linguistic argumentation by discussing overview papers as well as topical papers on computational approaches to various subfields of linguistics) with a practical one (learning how to develop and program computational methods to address linguistic research questions; no prior knowledge required, we start with the very basics!).",
      "tags": [
        "LIN1505"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1747H-Fall",
      "title": "ECE1747J: Parallel Programming",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://www.eecg.utoronto.ca/~amza/ece1747h/index.html",
      "desc": "This course is an intermediate graduate course in the area of parallel programming. In the first part of the course we will briefly introduce the architecture of parallel systems and the concept of data dependencies/races. The three most commonly used parallel programming paradigms (shared memory, distributed memory and data parallel) will  then be examined in detail. An overview of automatic parallelization of programs and the use of parallel processing in related domains such as parallel and distributed database transaction processing will also be given.",
      "tags": [
        "ECE1747H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2426F-Fall",
      "title": "CSC2426F: Fundamentals of Cryptography",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "http://www.cs.toronto.edu/~rackoff/2426f20/Cryptonotes.html",
      "desc": "We will cover the fundamental material that is needed for creating or using cryptographic algorithms and protocols. The emphasis will be on rigorous definitions of security, and on constructions whose security can be proven from reasonable assumptions about the security of underlying, more primitive objects. This course contains the basic mathematical background of cryptography, and should be useful and interesting to computer scientists, electrical engineers, and mathematicians.",
      "tags": [
        "CSC2426F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC343-Winter",
      "title": "CSC343: Intro to Data Management",
      "source": "UToronto",
      "year": "Winter 2017",
      "url": "https://www.teach.cs.toronto.edu//~csc343h/winter/",
      "desc": "Lecture notes regarading SQL, data management, and other relevant materials.",
      "tags": [
        "CSC343"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC420-Winter",
      "title": "CSC420: Introduction to Image Understanding",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://www.cs.utoronto.ca/~fidler/teaching/2021/CSC420.html",
      "desc": "Everyone has large photo collections these days. How can you intelligently find all pictures in which your dog appears? How can you find all pictures in which you are frowning? Can we make cars smart, e.g., can the car drive you to school while you finish your last homework? How can a home robot understand the environment, e.g., switch on a tv when being told so and serve you dinner? If you take a few pictures of your living room, can you reconstruct it in 3D (which allows you to render it from any new viewpoint and thus allows you to create a \"virtual tour\" of your room)? Can you reconstruct it from one image alone? How can you efficiently browse your home movie collection, e.g. find all shots in which Tom Cruise is chasing a bad guy?",
      "tags": [
        "CSC420"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC373-Spring",
      "title": "CSC373: Algorithm Design, Analysis, and Complexity",
      "source": "UToronto",
      "year": "Spring 2018",
      "url": "https://www.cs.toronto.edu/~jepson/csc373/",
      "desc": "Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NPcompleteness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.",
      "tags": [
        "CSC373"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC336-Fall",
      "title": "CSC336: Numerical Methods",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~krj/courses/336/index.html",
      "desc": "The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments",
      "tags": [
        "CSC336"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-MMF2021-Fall",
      "title": "MMF2021: Numerical Methods for Finance",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~krj/courses/2021/index.html",
      "desc": "This course is an introduction to numerical methods for mathematical finance. We will begin with a quick review of floating-point computation. The main focus of the course is the use of Monte Carlo Methods and Numerical Methods for PDEs applied to problems that arise in mathematical finance.",
      "tags": [
        "MMF2021"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC466-Winter",
      "title": "CSC466: Numerical Methods for Optimization Problems",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.cs.toronto.edu/~krj/courses/466-2305/index.html",
      "desc": "Numerical methods for unconstrained optimization problems, in particular line search methods and trust region methods. Topics include steepest descent, Newton’s method, quasiNewton methods, conjugate gradient methods and techniques for large problems. This course will normally be offered every other year.",
      "tags": [
        "CSC466"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC466-Winter",
      "title": "CSC466: Computational Methods for Partial Differential Questions",
      "source": "UToronto",
      "year": "Winter 2019",
      "url": "https://www.cs.toronto.edu/~krj/courses/446-2310/index.html",
      "desc": "Finite Difference and Finite Element methods for Boundary Value Problems (BVPs), including 2-point BVPs and 2-dimensional BVPs. Consistency, stability and convergence of methods. Efficiency of the solution of linear systems. Possibly, initial value problems and the method-of-lines. Special topics of interest among domain decomposition, multigrid, FFT solvers.",
      "tags": [
        "CSC466"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSCD37H-Winter",
      "title": "CSCD37H: Analysis of Numerical Algorithms for Computational Mathematics",
      "source": "UToronto",
      "year": "Winter 2013",
      "url": "http://www.cs.toronto.edu/~enright/teaching/D37/index.html",
      "desc": "Mathematical models of real systems that cannot be solved analytically can be approximated by numerical algorithms. This course examines the efficiency, accuracy and reliability of numerical algorithms for several classes of models, including models involving least squares, nonlinear equations, optimization, quadrature and systems of ordinary differential equations.",
      "tags": [
        "CSCD37H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSCC5-Winter",
      "title": "CSCC51H: Numerical Approximation, Integration, and Ordinary Differential Equations",
      "source": "UToronto",
      "year": "Winter 2013",
      "url": "http://www.cs.toronto.edu/~enright/teaching/C51/index.html",
      "desc": "Mathematical models of real systems that cannot be solved analytically can be approximated by numerical algorithms. This course examines the efficiency, accuracy and reliability of numerical algorithms for several classes of models, including models involving least squares, nonlinear equations, optimization, quadrature and systems of ordinary differential equations.",
      "tags": [
        "CSCC5"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC463-Winter",
      "title": "CSC463H: Computational Complexity and Computability",
      "source": "UToronto",
      "year": "Winter 2019",
      "url": "http://www.math.toronto.edu/rossman/CSC463.html",
      "desc": "Turing machines, Church’s Thesis, decidability and semi-decidability, diagonal arguments, the Halting Problem and other undecidable problems, reductions, complete problems. Computational Complexity (7 weeks): The classes P and NP, polynomial time reducibility, NP-completeness, Cook-Levin Theorem, various NP-complete problems, time and space complexity, intractable problems, other topics.",
      "tags": [
        "CSC463"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC438F-Fall",
      "title": "CSC438F: Computability and Logic",
      "source": "UToronto",
      "year": "Fall 2017",
      "url": "http://www.cs.toronto.edu/~sacook/csc438h/",
      "desc": "Syntax and semantics of the propositional and predicate calculus, completeness of Gentzen proof systems, formal theories, nonstandard models, and the Godel Incompleteness Theorems. Recursive and primitive recursive functions, Church’s thesis, unsolvable problems, recursively enumerable sets.",
      "tags": [
        "CSC438F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC413-Winter",
      "title": "CSC413: Neural Networks and Deep Learning",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://csc413-uoft.github.io/2021/",
      "desc": "It is very hard to hand design programs to solve many real world problems, e.g. distinguishing images of cats v.s. dogs. Machine learning algorithms allow computers to learn from example data, and produce a program that does the job. Neural networks are a class of machine learning algorithm originally inspired by the brain, but which have recently have seen a lot of success at practical applications. They’re at the heart of production systems at companies like Google and Facebook for image processing, speech-to-text, and language understanding. This course gives an overview of both the foundational ideas and the recent advances in neural net algorithms.",
      "tags": [
        "CSC413"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC411-Fall",
      "title": "CSC411: Introduction to Machine Learning",
      "source": "UToronto",
      "year": "Fall 2016",
      "url": "http://www.cs.toronto.edu/~urtasun/courses/CSC411_Fall16/CSC411_Fall16.html#introduction",
      "desc": "This class is an introductory undergraduate course in machine learning. The class will briefly cover topics in regression, classification, mixture models, neural networks, deep learning, ensemble methods and reinforcement learning.",
      "tags": [
        "CSC411"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC317-Winter",
      "title": "CSC317: Computer Graphics",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://github.com/karansher/computer-graphics-csc317/",
      "desc": "This course introduces the basic concepts and algorithms of computer graphics. It covers the basic methods needed to model and render 3D objects, including much of the following: graphics displays, basic optics, line drawing, affine and perspective transformations, windows and viewports, clipping, visibility, illumination and reflectance models, radiometry, energy transfer models, parametric representations, curves and surfaces, texture mapping, graphics hardware, ray tracing, graphics toolkits, animation systems.",
      "tags": [
        "CSC317"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2626-Winter",
      "title": "CSC2626: Imitation Learning for Robotics",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "http://www.cs.toronto.edu/~florian/courses/csc2626w21/",
      "desc": "In the next few decades we are going to witness millions of people, from various backgrounds and levels of technical expertise, needing to effectively interact with robotic technologies on a daily basis. As such, people will need to modify the behavior of their robots without explicitly writing code, but by providing only a small number of kinesthetic or visual demonstrations. At the same time, robots should try to infer and predict the human's intentions and internal objectives from past interactions, in order to provide assistance before it is explicitly asked. This graduate-level course will examine some of the most important papers in imitation learning for robot control, placing more emphasis on developments in the last 10 years. Its purpose is to familiarize students with the frontiers of this research area, to help them identify open problems, and to enable them to make a novel contribution.",
      "tags": [
        "CSC2626"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC477-Fall",
      "title": "CSC477: Introduction to Mobile Robotics",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "http://www.cs.toronto.edu/~florian/courses/csc477_fall20/",
      "desc": "This course provides an introduction to robotic systems from a computational perspective. A robot is regarded as an intelligent computer that can use sensors and act on the world. We will consider the definitional problems in robotics and look at how they are being solved in practice and by the research community. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. This course aims to help students improve their probabilistic modeling skills and instill the idea that a robot that explicitly accounts for its uncertainty works better than a robot that does not.",
      "tags": [
        "CSC477"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2556-Spring",
      "title": "CSC2556: Algorithms for Collective Decision Making",
      "source": "UToronto",
      "year": "Spring 2021",
      "url": "https://www.cs.toronto.edu/~nisarg/teaching/2556s21/index.html",
      "desc": "This course surveys algorithms that aid a group of biological or artificial agents in making collective decisions. The course specifically focuses on the area of computational social choice, which lies at the intersection of computer science and economics. This area has recently seen a growing number of real-world applications and this course reviews the theoretical foundations at the core of its success.",
      "tags": [
        "CSC2556"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC373H1F-Fall",
      "title": "CSC373H1F: Algorithm Desig, Analysis, and Complexity",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://www.cs.toronto.edu/~nisarg/teaching/373f20/index.html",
      "desc": "By the end of this course, you will be familiar with standard algorithm design techniques (divide and conquer, greedy algorithms, dynamic programming, network flow, linear programming, approximation, randomization), and understand the importance of computational complexity.",
      "tags": [
        "CSC373H1F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC304-Fall",
      "title": "CSC304: Algorithmic Game Theory and Mechanism Design",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~nisarg/teaching/304f19/",
      "desc": "This is a relatively new interdisciplinary course that introduces students from computer science and related disciplines to the well established fields of algorithmic game theory and mechanism design. These fields sit at the interface between computer science and economics, and have recently seen a growing number of real-world applications. This course will review the basic models and core theoretical insights that have been instrumental in the development of these fields. The course will be organized in three parts: game theory, mechanism design with money, and mechanism design without money. In particular, it will cover (possibly a subset of) the following topics:",
      "tags": [
        "CSC304"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2547F-Fall",
      "title": "CSC2541F: AI and Ethics: Mathematical Foundations and Algorithms",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~toni/Courses/Fairness/fair.html",
      "desc": "This is an introductory-level graduate course on social and ethical aspects of machine learning. Machine learning systems are becoming increasingly important in many domains where they are used to make predictions and decisions that often have life-altering consequences. Examples include machine learning algorithms for criminal sentencing, health insurance decisions, car insurance rates, and targeted advertising to name just a few. As these systems are becoming ubiquitious it is of extreme importance to address issues of privacy, fairness and accountability.",
      "tags": [
        "CSC2547F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2429-Winter",
      "title": "CSC2429: Proof Complexity, Mathematical Programming, and Algorithms",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "https://www.cs.toronto.edu/~toni/Courses/Proofs-SOS-2018/CS2429.html",
      "desc": "This is a topics course which will cover a new and growing body of work in algorithms and complexity theory that focuses on algebraic and semialgebraic proof systems. Sherali Adams (SA) is the basic proof system that underlies linear programming, and the Sum-of-Squares (SOS) proof system underlies semidefinite programming. Similarly their algebraic counterparts (which manipulate low degree polynomial equalities rather than inequalities) are the Nullstellensatz proof system, and the Polynomial Calculus (PC), which are closely connected to th",
      "tags": [
        "CSC2429"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC263H1-Fall",
      "title": "CSC263H1: Data Structures and Analysis",
      "source": "UToronto",
      "year": "Fall 2015",
      "url": "http://www.cs.toronto.edu/~toni/Courses/263-2015/index.html",
      "desc": "Algorithm analysis: worst-case, average-case, and amortized complexity. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design, implementation, and comparison of data structures. Introduction to lower bounds.",
      "tags": [
        "CSC263H1"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2401-Fall",
      "title": "CSC2401: Computational Complexity Theory",
      "source": "UToronto",
      "year": "Fall 2015",
      "url": "https://www.cs.toronto.edu/~toni/Courses/Complexity2015/",
      "desc": "This is a graduate introductory level course in computational complexity theory. It is appropriate for all graduate students in Computer Science. The main part of the course will be an introduction to complexity theory where we will discuss uniform and non-uniform models of computation, time and space complexity classes, complexity hierarchies, reductions and completeness, randomization in computation, approximation algorithms, and lower bound methods. In the latter part of the course, we will discuss several new results in complexity theory. Such advanced topics may include: Hastad’s famous switching lemma and its applications, including lower bounds for constant-depth circuits, better upper bounds for satisfiability, and connections to learning theory; communication complexity and its applications; NP, coNP and propositional proof complexity",
      "tags": [
        "CSC2401"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSCD70-Winter",
      "title": "CSCD70: Compiler Optimization",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://uoft-ecosystem.github.io/CSCD70/index.html",
      "desc": "The goal of this course is introduce students to the theoretical and practical aspects of building optimizing compilers that effectively exploit modern architectures. The course will begin with the fundamentals of compiler optimization, and will build upon these fundamentals to address issues in state-of-the-art commercial and research machines. Topics include the followings: intermediate representations, basic blocks and control flow graphs, dataflow analysis, partial redundancy elimination, loop optimizations, register allocation, instruction scheduling, inter-procedural analysis, memory hierarchy optimizations, extracting parallelism, and dynamic optimizations. Students will implement significant optimizations within LLVM, a modern research compiler framework.",
      "tags": [
        "CSCD70"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2224-Fall",
      "title": "CSC2224: Parallel Computer Architecture and Programming",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://csc2224.github.io/index.html",
      "desc": "The goal of this course is to build a strong understanding of the fundamentals of the architecture of parallel computers and efficient programming for them. We will examine how architectures are designed to exploit and extract different types of parallelism. The focus will be on fundamentals, tradeoffs in parallel architecture design, and cutting-edge research. Architectures studied may include parallel microprocessors, GPUs and FPGAs.",
      "tags": [
        "CSC2224"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSCB58-Fall",
      "title": "CSCB58: Computer Organizatio0n",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://cscb58f20.ml/index.html",
      "desc": "The goal of this course is to understand and design the underlying architecture (digital structures) of computer systems. Specifically students will learn about the binary data representation and manipulation, boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments to build digital logic circuits on simulators.",
      "tags": [
        "CSCB58"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC473-Winter",
      "title": "CSC473: Advanced Algorithms",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.cs.toronto.edu/~anikolov/CSC473W20/index.html",
      "desc": "Advanced algorithm design techniques, with emphasis on the role that geometry, approximation, randomization, and parallelism play in modern algorithms. Examples will be drawn from linear programming; randomized algorithms; streaming algorithms and parallel algorithms in the Map-Reduce model.",
      "tags": [
        "CSC473"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2414-Fall",
      "title": "CSC2412: Algorithms for Private Data Analysis",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~anikolov/CSC2412F19/CSC2412.html",
      "desc": "In this course we will study privacy in data analysis from a rigorous theoretical perspective. We will focus on Differential Privacy: a recent approach to achieving strong provable privacy guarantees in the analysis of sensitive data. Informally, a data analysis algorithm is differentially private if changing the data of a single individual changes the output distribution of the algorithm only slightly. This guarantee ensures that the privacy risk to any individual increases only slightly by participating in data collection. Our focus will be on the design of efficient differentially private algorithms. In the process, we will learn about fascinating connections between differential privacy and machine learning, geometry, and game theory.",
      "tags": [
        "CSC2414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSCC63-Winter",
      "title": "CSCC63: Com[itability and Computational Complexity",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "https://www.cs.toronto.edu/~molloy/c63-18/index.html",
      "desc": "An introduction to computability theory and computational complexity theory.",
      "tags": [
        "CSCC63"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC384-Winter",
      "title": "CSC384: Introduction to Artificial Intelligence",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.teach.cs.toronto.edu//~csc384h/winter/index.html",
      "desc": "This course will provide a survey of general topics in artificial intelligence, both classical and contemporary. It consists of a two-hour lecture and a one-hour tutorial each week, as well as selected readings from the text.",
      "tags": [
        "CSC384"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2542-Summer",
      "title": "CSC2542: Topics in Knowledger Representation and Reasoning: Automated Planning and Reasoning about Action",
      "source": "UToronto",
      "year": "Summer 2014",
      "url": "http://www.cs.toronto.edu/~sheila/2542/s14/slides.html",
      "desc": "CSC2542 is a seminar-style topics course that explores recent advances in knowledge representation and reasoning. The course draws predominantly on research readings. The format of the course is a mix of class lectures, seminars, and student paper presentations. A course project will make up a significant part of a student's course mark.",
      "tags": [
        "CSC2542"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2527H-Spring",
      "title": "CSC2527H:m Advanced Topics in Ubiquitous Computing",
      "source": "UToronto",
      "year": "Spring 2018]",
      "url": "https://mariakakis.github.io/ubicomp-course/",
      "desc": "The aim of this class will be to introduce you to ubiquitous computing (ubicomp). We will focus on how traditional topics of computing have evolved to support the vision of a connected, portable, and human-centric computing environment. Because ubicomp is an applied field, the course covers contributions across various fields: human-computer interaction, embedded computing, computer vision, distributed systems, machine learning, and electrical engineering. You will gain practical experience in developing sensing systems for activity recognition and gestural interaction. The course will be a combination of lectures, tutorials, class discussions, and demonstrations.",
      "tags": [
        "CSC2527H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-AdvancedTopicsinMobileHealth-Winter",
      "title": "Advanced Topics in Mobile Health",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://mariakakis.github.io/mhealth-course/",
      "desc": "This course will examine the growing prominence of mobile health over the past twenty years. After briefly discussing various definitions of mobile health, we will focus our attention on how people are using the sensors embedded in ubiquitous and novel devices to capture indicators of physical and mental health. More specifically, we will study how sensors are being used to measure physiological signals, psychomotor function, and disease-specific symptoms. We will also explore the how human factors play an important role in these technologies. This course requires an undergraduate-level understanding of machine learning and programming, although familiarity with computer vision, signal processing, and human-computer interaction will also be beneficial. Beyond weekly readings, students will be expected to complete and present a course project at the end of the term.",
      "tags": [
        "AdvancedTopicsinMobileHealth"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2206-Fall",
      "title": "CSC2206: Systems Modelling and Analysis",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "http://www.cs.toronto.edu/~marbach/csc2206_F20.html",
      "desc": "The emphasis of the course is on models for systems with uncertainty. We study the properties of various models and discuss how they can be applied to analyze system performance. Concepts covered include Poisson, renewal, and Markov processes.",
      "tags": [
        "CSC2206"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC358-Fall",
      "title": "CSC358: Introduction to Computer Networks",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "http://www.cs.toronto.edu/~marbach/csc358_F19.html",
      "desc": "Layered network architecture, ARQ retransmission strategies, delay models for data networks, multiaccess communication, routing, congestion control, addressing.",
      "tags": [
        "CSC358"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-STA4273-Winter",
      "title": "STA4273: Minimizng Expectations",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://www.cs.toronto.edu/~cmaddis/courses/sta4273_w21/",
      "desc": "This seminar course introduces students to the various methodological issues at stake in the problem of optimizing expected values and leads them in a discussion of its recent developments in machine learning. The course emphasizes the interplay between reinforcement learning and Bayesian inference. While most of the readings are applied or methodological, there are topics for more theoretically-minded students. Students will be expected to present a paper, prepare code notebooks, and complete a final project on a topic of their choice.",
      "tags": [
        "STA4273"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2520-Fall",
      "title": "CSC2520: Geometry Processing",
      "source": "UToronto",
      "year": "Fall 2020",
      "url": "https://github.com/alecjacobson/geometry-processing-csc2520",
      "desc": "The class is aimed at preparing students for working with geometric data via understanding fundamental theoretical concepts. Students should have a background in Linear Algebra and Computer Programming. Previous experience with Numerical Methods, Differential Equations, and Differential Geometry is appreciated but not required.",
      "tags": [
        "CSC2520"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC418-Fall",
      "title": "CSC418: Computer Graphcs",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://github.com/alecjacobson/computer-graphics-csc418#courseoverview",
      "desc": "This course introduces the basic concepts and algorithms of computer graphics. It covers the basic methods needed to model and render 3D objects, including much of the following: graphics displays, basic optics, line drawing, affine and perspective transformations, windows and viewports, clipping, visibility, illumination and reflectance models, radiometry, energy transfer models, parametric representations, curves and surfaces, texture mapping, graphics hardware, ray tracing, graphics toolkits, animation systems.",
      "tags": [
        "CSC418"
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2541-Winter",
      "title": "CSC2541: Topics in Machine Learning: Neural Net Training Dynamics",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://www.cs.toronto.edu/~rgrosse/courses/csc2541_2021/",
      "desc": "As a result, the practical success of neural nets has outpaced our ability to understand how they work. This class is about developing the conceptual tools to understand what happens when a neural net trains. Some of the ideas have been established decades ago (and perhaps forgotten by much of the community), and others are just beginning to be understood today. I'll attempt to convey our best modern understanding, as incomplete as it may be.",
      "tags": [
        "CSC2541"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2515-Fall",
      "title": "CSC2515: Machine Learning",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://www.cs.toronto.edu/~rgrosse/courses/csc2515_2019/",
      "desc": "Machine learning is a set of techniques that allow machines to learn from data and experience, rather than requiring humans to specify the desired behavior by hand. Over the past two decades, machine learning techniques have become increasingly central both in AI as an academic field, and in the technology industry. This course provides a broad introduction to some of the most commonly used ML algorithms.",
      "tags": [
        "CSC2515"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC421-Winter",
      "title": "CSC421: Neural Networks and Deep Learning",
      "source": "UToronto",
      "year": "Winter 2019",
      "url": "https://www.cs.toronto.edu/~rgrosse/courses/csc421_2019/",
      "desc": "This course gives an overview of both the foundational ideas and the recent advances in neural net algorithms. Roughly the first 2/3 of the course focuses on supervised learning --- training the network to produce a specified behavior when one has lots of labeled examples of that behavior. The last 1/3 focuses on unsupervised learning and reinforcement learning.",
      "tags": [
        "CSC421"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC321-Winter",
      "title": "CSC321: Introduction to Neural Networks and Machine Learning",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "https://www.cs.toronto.edu/~rgrosse/courses/csc321_2018/",
      "desc": "This course gives an overview of both the foundational ideas and the recent advances in neural net algorithms. Roughly the first 2/3 of the course focuses on supervised learning -- training the network to produce a specified behavior when one has lots of labeled examples of that behavior. The last 1/3 focuses on unsupervised learning and reinforcement learning.",
      "tags": [
        "CSC321"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2541-Fall",
      "title": "CSC2541: Topics in Machine Learning: Scalable and Flexible Models of Uncertainty",
      "source": "UToronto",
      "year": "Fall 2017",
      "url": "https://csc2541-f17.github.io/",
      "desc": "The first half of the course will cover a set of algorithmic tools for modeling uncertainty: Gaussian processes, Bayesian neural nets, and variational inference. We will focus on continuous models and the setting of function approximation, in order to avoid overlap with other iterations of this course (see below). I.e., we will have little if any coverage of generative models or discrete latent variables. The second half of the course will cover applications of uncertainty modeling: neural net sparsification, active learning, black-box optimization, reinforcement learning, and adversarial robustness.",
      "tags": [
        "CSC2541"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2547-Winter",
      "title": "CSC2547: Current Topics in Machine Learning Methods in 3D and Geometric Deep Learning",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "http://www.pair.toronto.edu/csc2547-w21/schedule/",
      "desc": "This course introduces deep learning methods and modern advances in 3D Vision. We will study representations, learning algorithms and generative models for 3D vision tasks at object and scene level. We will then study Geometric Deep Learning and concepts of Manifold Learning as relevant to Deep Learning. The 3D nature of this topic has many potential applications in graphics, robotics, content creation, mixed reality, biometrics, and more.",
      "tags": [
        "CSC2547"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2621-Winter",
      "title": "CSC2621: Topics in Robotics Reinforcement Learning in Robotics",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "http://www.pair.toronto.edu/csc2621-w20/#/contents/04-grading",
      "desc": "This graduate-level seminar course will cover topics and new research frontiers in reinforcement learning (RL). Planned topics include: Model-Based and Model-Free RL, Policy Search, Monte Carlo Tree Search, off-policy evaluation, temporal abstraction/hierarchical approaches, inverse reinforcement learning and imitation learning.",
      "tags": [
        "CSC2621"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2229-Winter",
      "title": "CSC2229: Software-Defined Networking",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.cs.toronto.edu/~yganjali/courses/csc2229/",
      "desc": "This is a MSc/PhD level course introducing Software-Defined Networking (SDN). SDN is an emerging paradigm in computer networks that facilitates change and innovation in infrastructure and network applications by pushing network control functionalities to a logically centralized controller.",
      "tags": [
        "CSC2229"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CS2548-Winter",
      "title": "CSC2548: Machine Learning in Computer Vision",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "https://www.cs.utoronto.ca/~fidler/teaching/2018/CSC2548.html#introduction",
      "desc": "In recent years, Deep Learning has become a dominant Machine Learning tool for a wide variety of domains. One of its biggest successes has been in Computer Vision where the performance in problems such object and action recognition has been improved dramatically. In this course, we will be reading up on various Computer Vision problems, the state-of-the-art techniques involving different neural architectures and brainstorming about promising new directions.",
      "tags": [
        "CS2548"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-STA414-Winter",
      "title": "STA414: Statistical Methods for Machine Learning II",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://erdogdu.github.io/sta414/",
      "desc": "This course introduces commonly used machine learning algorithms such as linear and logistic regression, random forests, decision trees, neural networks, support vector machines, boosting etc. It will also offer a broad view of model-building and optimization techniques that are based on probabilistic building blocks which will serve as a foundation for more advanced machine learning courses.",
      "tags": [
        "STA414"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2532-Winter",
      "title": "CSC2532: Statistical Learning Theory",
      "source": "UToronto",
      "year": "Winter 2021",
      "url": "https://erdogdu.github.io/csc2532/",
      "desc": "Topics may include: Asymptotic statistics, Uniform Convergence, Generalization, Complexity measures, Kernel Methods, Online Learning, Sampling.",
      "tags": [
        "CSC2532"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2547-Winter",
      "title": "CSC2547: Topics in Statistical Learning Theory",
      "source": "UToronto",
      "year": "Winter 2019",
      "url": "https://erdogdu.github.io/csc2547_s19/",
      "desc": "Gaussian mean estimation & Stein's paradox, information inequality and Max entropy principle, asymptotic statistics, uniform convergence & generalization, epsilon-nets and covering technique, rademacher complexity I & II, kernel methods, and other topics.",
      "tags": [
        "CSC2547"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2720H-Winter",
      "title": "CSC2720H: Systems Thinking for Global Problems",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "http://www.cs.toronto.edu/~sme/SystemsThinking/",
      "desc": "This course is unlike any other graduate course you have taken. You will play games, solve puzzles, and tell stories. Each activity will create a system around you, with its own dynamics. Sometimes you will try to beat the system and discover you cannot. Other times you will discover you can change a system by changing your perspective of it. In the process, you will discover how complex patterns of behaviour can arise from simple structures and simple rules. You will draw on such insights to develop a deeper understanding of how the world works. You will start to see the systems around you in a whole new light, and you will develop a new mental toolkit for analyzing complex global issues, modeling their structure and behaviour, and understanding how and why change happens.",
      "tags": [
        "CSC2720H"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-PMU199H1F-Fall",
      "title": "PMU188H1F: Computing the Climate",
      "source": "UToronto",
      "year": "Fall 2015",
      "url": "http://www.cs.toronto.edu/~sme/PMU199-climate-computing/",
      "desc": "This course will examine the role of computers and software in understanding climate change. We will explore the use of computer models to build simulations of the global climate, including a historical view of the use of computer models to understand weather and climate, and a detailed look at the current state of computer modelling, especially how global climate models are tested, what kinds of experiments are performed with them, how scientists know they can trust the models, and how they deal with uncertainty. The course will also explore the role of computer models in helping to shape society's responses to climate change, in particular, what they can (and can't) tell us about how to make effective decisions about government policy, international treaties, community action and the choices we make as individuals.",
      "tags": [
        "PMU199H1F"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC412-Winter",
      "title": "CSC412: Probabilistic Machine Learning",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://probmlcourse.github.io/csc412/",
      "desc": "The language of probability allows us to coherently and automatically account for uncertainty. This course will teach you how to build, fit, and do inference in probabilistic models. These models let us generate novel images and text, find meaningful latent representations of data, take advantage of large unlabeled datasets, and even let us do analogical reasoning automatically. This course will teach the basic building blocks of these models and the computational tools needed to use them.",
      "tags": [
        "CSC412"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2547-Fall",
      "title": "CSC2547: Learning to Search",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "https://duvenaud.github.io/learning-to-search/",
      "desc": "In planning, search, active learning, programming, and approximate inference, we usually face a series of similar tasks. We can often generalize from the problems solved so far, or even combine parts of previous solutions to solve a new one. This course will survey foundational ideas, recent work, and applications in this area. Specifically, it will cover self-improving tree-search methods such as alphazero, meta-learning, hypernetworks, self-tuning gradient estimators, amortized inference, self-improving theorem provers, and planning in POMDPs. Evaluation will be based mainly on a project involving original research by the students. Students should already be familiar with the basics of machine learning such as linear algebra, optimization, and probability.",
      "tags": [
        "CSC2547"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-STA4273-Spring",
      "title": "STA4273: Learning Discrete Latent Structure",
      "source": "UToronto",
      "year": "Spring 2018",
      "url": "https://duvenaud.github.io/learn-discrete/",
      "desc": "New inference methods allow us to train learn generative latent-variable models. These models can generate novel images and text, find meaningful latent representations of data, take advantage of large unlabeled datasets, and even let us do analogical reasoning automatically. However, most generative models such as GANs and variational autoencoders currently have pre-specified model structure, and represent data using fixed-dimensional continuous vectors. This seminar course will develop extensions to these approaches to learn model structure, and represent data using mixed discrete and continuous data structures such as lists of vectors, graphs, or even programs. The class will have a major project component, and will be run in a similar manner to Differentiable Inference and Generative Models",
      "tags": [
        "STA4273"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2541-Fall",
      "title": "CSC2541: Differentiable Infertence and Generative Models",
      "source": "UToronto",
      "year": "Fall 2016",
      "url": "https://www.cs.toronto.edu/~duvenaud/courses/csc2541/index.html",
      "desc": "In the last few years, new inference methods have allowed big advances in probabilistic generative models. These models let us generate novel images and text, find meaningful latent representations of data, take advantage of large unlabeled datasets, and even let us do analogical reasoning automatically. This course will tour recent innovations in inference methods such as recognition networks, black-box stochastic variational inference, and adversarial autoencoders. It will also cover recent advances in generative model design, such as deconvolutional image models, thought vectors, and recurrent variational autoencoders. The class will have a major project component.",
      "tags": [
        "CSC2541"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-ECE1779-Spring",
      "title": "ECE1779: Introduction to Cloud Computing",
      "source": "UToronto",
      "year": "Spring 2021",
      "url": "https://www.cs.toronto.edu/~delara/courses/ece1779/#home",
      "desc": "This course provides an introduction into the technologies behind cloud computing. A combination of lectures and hands-on programming assignments expose the student to the leading cloud computing paradigms and programming interfaces (e.g., EC2, Lambda). In addition, lectures provide an overview of the underlying technological concepts that make cloud computing possible (e.g., virtualization, scalability, fault tolerance, security).",
      "tags": [
        "ECE1779"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2125-Winter",
      "title": "CSC2125: Topics in Software Engineering: Safety and Certification of Autonomous Vehicles",
      "source": "UToronto",
      "year": "Winter 2019",
      "url": "http://www.cs.toronto.edu/~chechik/courses19/csc2125/index.htm",
      "desc": "Before the dream of autonomous vehicles can be fully realized, we need to understand what their safety means and how to assure it. Yet, since autonomous vehicles typically include components constructed via machine learning, existing techniques and even existing standards are not directly applicable and need to be adjusted. In this course, we will explore some challenges in this field and survey recent work on safety and certification, specifically in the model-driven context. The application focus will be self-driving cars.",
      "tags": [
        "CSC2125"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2125-Winter",
      "title": "CSC2125: Modeling Methods, Tools and Techniques",
      "source": "UToronto",
      "year": "Winter 2018",
      "url": "http://www.cs.toronto.edu/~chechik/courses18/csc2125/index.htm",
      "desc": "Model-based software engineering (MBSE) is an approach to software development in which software models play a primary and indispensible role.  MBSE allows developers to work and reason about software requirements, design, and correctness at higher levels of abstraction, and to generate automatically implementations, deployments, and other artifacts.  MBSE has been successfully applied in several industries (automotive, aeronautic, information systems), in defining software product lines and in system safety assurance (albeit often in an ad-hoc fashion).   This course will look at the state of the art of MBSE and its future research directions.",
      "tags": [
        "CSC2125"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2227S-Summer",
      "title": "CSC2227S: Topics in the Design and Implementation of Operating Systems",
      "source": "UToronto",
      "year": "Summer 2021",
      "url": "http://www.cs.toronto.edu/~demke/2227/S.21/index.shtml",
      "desc": "This course examines the design, implementation and analysis of selected aspects of operating systems with a focus on networked systems and the impact of emerging hardware such as persistent memory. It covers topics such as: resource naming and discovery, scheduling and load balancing; fault-tolerance, availability, and persistence; distributed communication models; and storage. We will explore these topics in the context of a variety of system designs including local and distributed systems.",
      "tags": [
        "CSC2227S"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2421-Fall",
      "title": "CSC2421: Topics in Algorithms: Online and other Myopic Algorithms",
      "source": "UToronto",
      "year": "Fall 2019",
      "url": "http://www.cs.toronto.edu/~bor/2421f19/",
      "desc": "In a seminal 1985 paper, Sleator and Tarjan argued for a worst case analysis of online algorithms such as paging and list accessing. This became known as competitive analysis. Not surprisingly, such worst analysis was already present in earlier works for example by Graham and Yao for scheduling problems. Since these earlier works, there has been a continuing and growing interest in online algorithms, in terms of applications (eg online advertising and other auctions, graph colouring and matching, maximum satisfiability, etc.), in terms of alternative online models (eg small space streaming, sequential and parallel streams), extensions to the basic online model (revocable decisions, greedy-like algorithms), and in terms of alternatives to the competitive analysis framework (eg, a return to stochastic input models). This course will be based on a textbook that is now being written by Denis Pankratov and myself. This topic is part of recent interest within theoretical computer science that emphasizes \"conceptually simple algorithms\" (e.g., the SOSA conference). A preliminary table of contents is provided below. In terms of a prerequisite, I strongly suggest a course similar to our undergraduate algorithms course CSC37",
      "tags": [
        "CSC2421"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC303-Spring",
      "title": "CSC303: Social and Information Networks",
      "source": "UToronto",
      "year": "Spring 2020",
      "url": "http://www.cs.toronto.edu/~bor/303s20/",
      "desc": "A course on how networks underlie social phenomena with an emphasis on developing intuition and reasoning about broadly applicable concepts in network analysis. Topics include: introduction to graph theory and graph theoretic algorithms, social networks and relevant concepts, network dynamics, information networks, network dynamics; information diffusioa, \"six derees of separation\", community detertion.",
      "tags": [
        "CSC303"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2547-Winter",
      "title": "CSC2547: Machine Learning for Machine Vision as Inverse Graphics",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "https://www.cs.toronto.edu/~bonner/courses/2020s/csc2547/",
      "desc": "This is an advanced graduate course in machine learning. It is primarily a seminar course in which students will read and present papers from the literature. There will also be a major course project. The goal is to bring students to the state of the art in this exciting field. Tentative topics include generative and discriminative models for vision, convolutional and deconvolutional neural nets, variational inference and autoencoders, capsule networks, group symmetries and equivariance, visual attention mechanisms, differentiable renderers, and applications.",
      "tags": [
        "CSC2547"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC2545-Winter",
      "title": "CSC2545: Kernel Methods and Support Vector Machnes",
      "source": "UToronto",
      "year": "Winter 2017",
      "url": "https://www.cs.toronto.edu/~bonner/courses/2017s/csc2545/",
      "desc": "The introduction of Support Vector Machines (SVMs) in the 1990s led to an explosion of applications and deepening theoretical analysis that have established SVMs as one of the standard tools for machine learning and data mining. This course provides a comprehensive introduction to SVMs and other kernel methods, including theory, algorithms and applications. Topics covered will be selected from the following: support vector classification and regression; novelty detection and feature extraction; non-linear dimensionality reduction; reproducing kernel maps; regularization; statistical learning theory and robust estimation; convex optimization and implementation; kernel design and applications. Homework assignments will be a mix of theory and programming.",
      "tags": [
        "CSC2545"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC324-Fall",
      "title": "CSC324: Principles of Programming Languages",
      "source": "UToronto",
      "year": "Fall 2016",
      "url": "https://www.cs.toronto.edu/~bonner/courses/2016f/csc324/",
      "desc": "Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. T",
      "tags": [
        "CSC324"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2600-Fall",
      "title": "CSC2600: Topics in Computer Science: Convex Optimization",
      "source": "UToronto",
      "year": "Fall 2010",
      "url": "https://www.cs.toronto.edu/~bonner/courses/2010f/csc2600/",
      "desc": "This course is an introduction to the theory, algorithms and applications of convex optimization. The goal is to give students a working knowledge of the subject, i.e., the ability to recognize, formulate, and solve convex optimization problems. Topics covered will be selected from the following: convex sets and functions, linear and quadratic optimization, geometric and semidefinite programming, strong and weak duality, algorithms for constrained and unconstrained problems, interior point methods, and applications. The course should be of special interest to students in machine learning, machine vision, graphics, numerical analysis, combinatorial optimization and electrical engineering.",
      "tags": [
        "CSC2600"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2512-Winter",
      "title": "CSC2512: Advanced Propositional Reasoning",
      "source": "UToronto",
      "year": "Winter 2020",
      "url": "http://www.cs.toronto.edu/~fbacchus/csc2512/",
      "desc": "We will examine current algorithms and techniques for solving various types of propositional reasoning problems. This will include the problems of finding a satisfying model (SAT), finding a satisfying model to a propositional formula augmented with a non-propositional formula over a decidable logical theory (SMT), finding an satisfying model that optimizes a specified cost function (MaxSat), counting the number of satisfying models (#SAT), and determining the truth or falsity of a closed quantified Boolean formula (QBF).",
      "tags": [
        "CSC2512"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC2541-Fall",
      "title": "CSC2541: Deep Reinforcement Learning",
      "source": "UToronto",
      "year": "Fall 2018",
      "url": "https://csc2541-f18.github.io/#",
      "desc": "Learning by interaction or trial-and-error is a core aspect of any intelligence system. Reinforcement learning (RL) is a paradigm aiming to develop computational methods that allow intelligent agents to learn by interacting with their environments. In this course, we will cover the basic formulation of the Markov decision process (MDP), learning algorithms for tabular MDPs. This course will mainly focus on various function approximation methods using deep neural networks. The examples will include game playing and robot locomotion control.",
      "tags": [
        "CSC2541"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UToronto-CSC209-Winter",
      "title": "CSC209: Software Tools and Systems",
      "source": "UToronto",
      "year": "Winter 2013",
      "url": "https://www.teach.cs.toronto.edu/~csc209h/winter/index.html",
      "desc": "Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.",
      "tags": [
        "CSC209"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC165-Summer",
      "title": "CSC165: Mathematical Expression and Reasoning for Computer Science",
      "source": "UToronto",
      "year": "Summer 2013",
      "url": "https://www.cs.toronto.edu/~david/courses/csc165_s13/home.html",
      "desc": "This course introduces the ideas of formal logic and proof as tools that you will use throughout your undergraduate studies. You will learn to communicate clearly and precisely, and to make logically sound arguments about the code you write. You will learn the notation and techniques of mathematical logic and apply this to analysing the efficiency of computer algorithms. In the final weeks of the course, we will turn our attention from algorithms (e.g., quicksort) to problems (e.g., sorting a list) and get a taste of complexity and computability theory.",
      "tags": [
        "CSC165"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC148-Fall",
      "title": "CSC148: Introduction to Computer Science",
      "source": "UToronto",
      "year": "Fall 2014",
      "url": "https://www.cs.toronto.edu/~david/courses/csc148_f14/index.html",
      "desc": "Welcome to CSC148! In this course, you’ll learn about important tools and ideas in computer science that will set the foundation for all future computer science courses you’ll take. Among the most important topics we’ll cover are object-oriented programming, data structures, and recursion. Throughout the course, we’ll also emphasize the good habits essential to success in computer programming: designing before you code, testing beyond printing, and learning without teachers.",
      "tags": [
        "CSC148"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC236-Fall",
      "title": "CSC236: Introdution to Theory of Computation",
      "source": "UToronto",
      "year": "Fall 2018",
      "url": "https://www.teach.cs.toronto.edu/~heap/Old/236/F18/",
      "desc": "In this course we learn to apply rigour and proof to some fundamental tasks of computing",
      "tags": [
        "CSC236"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UToronto-CSC104-Fall",
      "title": "CSC104: Computational Thinking",
      "source": "UToronto",
      "year": "Fall 2017",
      "url": "http://www.cs.toronto.edu/~heap/104/F17/",
      "desc": "CSC104, “Computational Thinking” introduces undergrads to Computer Science, with the aim that they should change the world of computing, rather than just observe it. Here’s a summary of the administrative details for Fall 2017.",
      "tags": [
        "CSC104"
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "tomlooman-Spring-CS193U",
      "title": "CS193U: Video Game Development in C++ and Unreal Engine",
      "source": "Tom Looman",
      "year": "Spring 2021",
      "url": "https://www.tomlooman.com/stanford-cs193u",
      "desc": "Hands-on game development in C++ using Unreal Engine, the game engine that triple-A games like Fortnite, PUBG, and Gears of War are all built on. Students will be introduced to the Unreal editor, game frameworks, physics, AI, multiplayer and networking, UI, and profiling and optimization. A project-based course where you build your own games and gain a solid foundation in Unreal’s architecture that will apply to any future game projects.",
      "tags": [
        "CS193U"
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Spring-CS",
      "title": "CDA3101: Computer Organization",
      "source": "UF",
      "year": "Spring 2020",
      "url": "https://www.cise.ufl.edu/~mssz/CompOrg/Top-Level.html",
      "desc": "This introductory course emphasizes essential concepts, the logical basis of computer structure, machine representation of instructions and data, flow of control, basic machine instructions, and assembly language programming. Students will be taught these basic concepts, and there will be exercises that help the student to learn the basics of assembly language programming. We also cover pipelined, parallel, and multicore architectures, to acquaint students with these architectures, the basics of how they function, and what practical problems are associated with these architectures. This is not an advanced course in computer architecture.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Fall-CS",
      "title": "COP5536: Advanced Data Structures",
      "source": "UF",
      "year": "Fall 2017",
      "url": "https://www.cise.ufl.edu/~sahni/cop5536/",
      "desc": "Development of efficient data structures used to obtain more efficient solutions to classical problems, such as those based on graph theoretical models, as well as problems that arise in application areas of contemporary interest.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Spring-CS",
      "title": "CIS4930: Virtual Reality",
      "source": "UF",
      "year": "Spring 2016",
      "url": "https://ufvr2016.wordpress.com/",
      "desc": "This course is an introduction to the hardware, software, interaction, psychology, algorithms, technology, and research that are involved in virtual reality. This course assumes a general technical background and at least a working knowledge of basic 3D computer graphics. This course welcomes students with a diverse set of backgrounds, including (but not restricted to): computer science, math, physics, digital art, engineering, architecture, and psychology.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Spring-CS",
      "title": "CAP5100: Human Computer Interaction (Grad)",
      "source": "UF",
      "year": "Spring 2021",
      "url": "https://sites.google.com/view/ufhcispring2021/home",
      "desc": "This course is directed towards graduate students who wish to learn about core concepts and current research in the design and evaluation of human-computer interfaces. This course focuses on both understanding the theoretical concepts of HCI and to apply those concepts to real-world problems. This course balances technical development and the design, analysis, and evaluation of human-centered interfaces using common methodologies.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Fall-CS",
      "title": "VR for the Social Good",
      "source": "UF",
      "year": "Fall 2020",
      "url": "https://sites.google.com/view/vrforthesocialgood-fall2020",
      "desc": "This course focuses on using effective messaging perspectives and applying virtual social spaces to create a compelling story on a social good issue. Thus, it adopts a multidisciplinary approach to solving pressing social problems by blending social science practices with innovative technology. Ultimately, a successful formula = effective message+effective medium.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Spring-CS",
      "title": "STA6166: Statistical Methods in Research I",
      "source": "UF",
      "year": "Spring 2020",
      "url": "http://users.stat.ufl.edu/~winner/sta6166.html",
      "desc": "Train graduate students in the sciences to plan and conduct experiments and data analysis.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Fall-CS",
      "title": "STA6167: Statistical Methods in Research II",
      "source": "UF",
      "year": "Fall 2021",
      "url": "http://users.stat.ufl.edu/~winner/sta6167.html",
      "desc": "Multiple Linear Regression, Completely Randomized Design, Randomized Block and Latin Square Designs, Factorial Designs (Fixed, Mixed, Random Effects), Nested Designs, Split-Plot Designs, Repeated Measures Designs, Analysis of Covariance, Discrete Probability Distributions / Intro to Generalized Linear Models",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Fall-CS",
      "title": "CIS4360: Computer and Information Security",
      "source": "UF",
      "year": "Fall 2015",
      "url": "https://www.cise.ufl.edu/~nemo/cis4360/",
      "desc": "Students will study the issues involved in defining and assuring the security of information and computer systems.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UF-Fall-CS",
      "title": "CIS6930: Cryptographic Anonymity",
      "source": "UF",
      "year": "Fall 2015",
      "url": "https://www.cise.ufl.edu/~nemo/anonymity/",
      "desc": "This course will develop the various needs for, ways to provide, and ways to measure anonymity. We will examine applications of anonymity in electronic communications, e-voting, e-cash, etc. Mechanisms such as cryptography, Mixes, blind signatures, and steganography will be developed in the context of anonymity. Information theoretical and other approaches to measuring anonymity will be applied. Students should have good mathematics and probability background. We will use papers from the literature; students will be expected to present and critique their own work and that of others.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "BU-Fall-CS",
      "title": "CS237: Probability in Computing",
      "source": "BU",
      "year": "Fall 2020",
      "url": "https://cs-people.bu.edu/aene/cs237fa20/schedule.html",
      "desc": "Introduction to basic probabilistic concepts and methods used in computer science. Develops an understanding of the crucial role played by randomness in computing, both as a powerful tool and as a challenge to confront and analyze. Emphasis on rigorous reasoning, analysis, and algorithmic thinking. (Counts as a Group B course for the CS major, and a background course for the CS minor.)",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "BU-Spring-CS",
      "title": "CS531: Advanced Optimization Algorithms",
      "source": "BU",
      "year": "Spring 2021",
      "url": "https://cs-people.bu.edu/aene/cs531sp21/schedule.html",
      "desc": "This is a graduate-level course on the design and analysis of iterative algorithms for convex and non-convex optimization. Iterative methods based on gradient descent have had a profound impact on many areas of computer science and engineering, including algorithms and theoretical computer science, machine learning, data mining, finance, and operations research. The main topics covered are the design and analysis of gradient descent methods for convex problems; adaptive, stochastic and non-convex optimization; linear programming; linear and convex duality; online learning.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "BU-Spring-CS",
      "title": "CS585: Image and Video Computing",
      "source": "BU",
      "year": "Spring 2014",
      "url": "http://cs-people.bu.edu/deht/CS585/",
      "desc": "In this class, you will learn techniques used to interpret images and video and you will analyze and evaluate algorithms for various computer vision tasks. I hope to help you develop your toolbox that you will be able to use to develop creative solutions to visual problems in the class, your future studies, and your future career.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "BU-Spring-CS",
      "title": "CS112: Introduction to Computer Science II",
      "source": "BU",
      "year": "Spring 2012",
      "url": "https://www.cs.bu.edu/fac/byers/cs112.html",
      "desc": "Covers advanced programming techniques and data structures. Topics include recursion, algorithm analysis, linked lists, stacks, queues, trees, graphs, tables, searching, and sorting.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "BU-Fall-CS",
      "title": "CS542: Machine Learning",
      "source": "BU",
      "year": "Fall 2018",
      "url": "https://docs.google.com/document/d/1FUhxAQ-9a4Mo-OMaYDQ-I-2pUxi5Vcz9xqP-wHnrN3E/edit",
      "desc": "This course is an introduction to modern machine learning concepts, techniques, and algorithms. Topics include regression, classification, unsupervised and supervised learning, kernels, support vector machines, feature selection, clustering, sequence models, and Bayesian methods. Weekly labs and projects emphasize taking theory into practice, through applications on real-world problems and data sets.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "BU-Spring-CS",
      "title": "CS332: Elements of Theory of Computation",
      "source": "BU",
      "year": "Spring 2020",
      "url": "https://cs-people.bu.edu/mbun/courses/332_S20/",
      "desc": "This course is an introduction to the theory of computation. This is the branch of computer science that aims to understand which problems can be solved using computational devices and how efficiently those problems can be solved. To be able to make precise statements and rigorous arguments, computational devices are modeled using abstract mathematical \"models of computation.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "BU-Fall-CS",
      "title": "CS591: Communication Complexity",
      "source": "BU",
      "year": "Fall 2019",
      "url": "https://cs-people.bu.edu/mbun/courses/591_F19/",
      "desc": "Communication complexity studies the number of bits that two (or more) parties must exchange in order to cooperatively compute a joint function of their inputs. It has been a consistently vibrant area of research for the past forty years, with deep and beautiful connections to many areas of mathematics and important applications across theoretical computer science. This graduate course will introduce the fundamental results and techniques in the area, as well as hone in on questions at the current research frontier. Themes will include:",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "Princeton-Fall-CS",
      "title": "COS323: Computing and Optimization",
      "source": "Princeton",
      "year": "Fall 2021",
      "url": "http://aaa.princeton.edu/orf363",
      "desc": "This class will give you a broad introduction to “optimization from a computational viewpoint.”",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "UW-Spring-CS",
      "title": "EE546: Special Topics: Convex Optimization Algorithms",
      "source": "UW",
      "year": "Spring 2016",
      "url": "https://class.ece.uw.edu/546/2016spr/",
      "desc": "The objectives of this course are to: study classes of convex optimization algorithms along with their complexity analysis, discuss structural convex optimization, to develop the capability of designing customized algorithms by exploiting problem structure, and expose students to research frontiers in convex optimization and its applications",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.253: Convex Analysis and Optimization",
      "source": "MIT",
      "year": "Spring 2012",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-253-convex-analysis-and-optimization-spring-2012/index.htm",
      "desc": "This course will focus on fundamental subjects in convexity, duality, and convex optimization algorithms. The aim is to develop the core analytical and algorithmic issues of continuous optimization, duality, and saddle point theory using a handful of unifying principles that can be easily visualized and readily understood.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "Princeton-Fall-CS",
      "title": "COS561: Advanced Computer Networks",
      "source": "Princeton",
      "year": "Fall 2021",
      "url": "https://cos561.princeton.systems/index.html",
      "desc": "COS 561 is a graduate course in computer networking that aims to provide an understanding of the fundamental principles that govern the Internet (and networks more generally), particularly in the context of state-of-the-art networked systems and research. Core topics span the modern networking stack and local/wide-area/datacenter landscapes, covering concepts such as routing, congestion control, measurement, and networked applications. The course will be heavily based on studying a mixture of classic and recent research papers and discussing them in small groups during precepts. In doing so, students will learn how to critically engage with and discuss networking research.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UCLA-Fall-CS",
      "title": "CS239: ML-Driven Video Analytics System",
      "source": "UCLA",
      "year": "Fall 2020",
      "url": "http://web.cs.ucla.edu/~ravi/CS239_F20/index.html",
      "desc": "Video cameras are pervasive. As camera deployments expand, organizations increasingly rely on analyzing video feeds to guide numerous applications including traffic monitoring, surveillance, and amber alert response. Key to the success of such applications has been recent advances in computer vision, particularly neural network (NN)-based techniques for highly accurate object detection and recognition. Though effective at answering high-level queries about video content, these NN-based pipelines are resource intensive in terms of network and server-side compute overheads. This class will explore a wide range of systems and machine learning optimizations to improve the efficiency of modern video analytics pipelines, without violating latency and query accuracy expectations.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "UCLA-Fall-CS",
      "title": "CS111: Operating System Principles",
      "source": "UCLA",
      "year": "Fall 2016",
      "url": "https://lasr.cs.ucla.edu/classes/111_fall16/",
      "desc": "Introduction to operating systems design and evaluation. Computer software systems performance, robustness, and functionality. Kernel structure, bootstrapping, input/output (I/O) devices and interrupts. Processes and threads; address spaces, memory management, and virtual memory. Scheduling, synchronization. File systems: layout, performance, robustness. Distributed systems: networking, remote procedure call (RPC), asynchronous RPC, distributed file systems, transactions. Protection and security. Exercises involving applications using, and internals of, real-world operating systems. Letter grading.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "Yale-Fall-CS",
      "title": "ECON159: Game Theory",
      "source": "Yale",
      "year": "Fall 2007",
      "url": "https://oyc.yale.edu/economics/econ-159",
      "desc": "This course is an introduction to game theory and strategic thinking. Ideas such as dominance, backward induction, Nash equilibrium, evolutionary stability, commitment, credibility, asymmetric information, adverse selection, and signaling are discussed and applied to games played in class and to examples drawn from economics, politics, the movies, and elsewhere.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "Yale-Fall-CS",
      "title": "PHYS200: Fundamentals of Physics I",
      "source": "Yale",
      "year": "Fall 2006",
      "url": "https://oyc.yale.edu/physics/phys-200",
      "desc": "This course provides a thorough introduction to the principles and methods of physics for students who have good preparation in physics and mathematics. Emphasis is placed on problem solving and quantitative reasoning. This course covers Newtonian mechanics, special relativity, gravitation, thermodynamics, and waves.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "Yale-Spring-CS",
      "title": "PHYS201: Fundamentals of Physics II",
      "source": "Yale",
      "year": "Spring 2010",
      "url": "https://oyc.yale.edu/physics/phys-201",
      "desc": "This is a continuation of Fundamentals of Physics, I (PHYS 200), the introductory course on the principles and methods of physics for students who have good preparation in physics and mathematics. This course covers electricity, magnetism, optics and quantum mechanics.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.0001: Introduction to Computer Science and Programming in Python",
      "source": "MIT",
      "year": "Fall 2016",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/",
      "desc": "6.0001 Introduction to Computer Science and Programming in Python is intended for students with little or no programming experience. It aims to provide students with an understanding of the role computation can play in solving problems and to help students, regardless of their major, feel justifiably confident of their ability to write small programs that allow them to accomplish useful goals. The class uses the Python 3.5 programming language.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.01: Single Variable Calculus",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/",
      "desc": "This calculus course covers differentiation and integration of functions of one variable, and concludes with a brief discussion of infinite series. Calculus is fundamental to many scientific disciplines including physics, engineering, and economics.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.02: Multivariable Calculus",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/",
      "desc": "This course covers differential, integral and vector calculus for functions of more than one variable. These mathematical tools and methods are used extensively in the physical sciences, engineering, economics and computer graphics.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.06: Linear Algebra",
      "source": "MIT",
      "year": "Spring 2010",
      "url": "https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/",
      "desc": "This is a basic subject on matrix theory and linear algebra. Emphasis is given to topics that will be useful in other disciplines, including systems of equations, vector spaces, determinants, eigenvalues, similarity, and positive definite matrices.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "15.S12: Blockchain and Money",
      "source": "MIT",
      "year": "Fall 2018",
      "url": "https://ocw.mit.edu/courses/sloan-school-of-management/15-s12-blockchain-and-money-fall-2018/",
      "desc": "This course is for students wishing to explore blockchain technology's potential use—by entrepreneurs and incumbents—to change the world of money and finance. The course begins with a review of Bitcoin and an understanding of the commercial, technical, and public policy fundamentals of blockchain technology, distributed ledgers, and smart contracts. The class then continues on to current and potential blockchain applications in the financial sector.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "8.01: Classical Mechanics",
      "source": "MIT",
      "year": "Fall 2016",
      "url": "https://ocw.mit.edu/courses/physics/8-01sc-classical-mechanics-fall-2016/",
      "desc": "This first course in the physics curriculum introduces classical mechanics. Historically, a set of core concepts—space, time, mass, force, momentum, torque, and angular momentum—were introduced in classical mechanics in order to solve the most famous physics problem, the motion of the planets.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.05: Introduction to Probability and Statistics",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/",
      "desc": "This course provides an elementary introduction to probability and statistics with applications. Topics include: basic combinatorics, random variables, probability distributions, Bayesian inference, hypothesis testing, confidence intervals, and linear regression.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.03: Differential Equations",
      "source": "MIT",
      "year": "Fall 2011",
      "url": "https://ocw.mit.edu/courses/mathematics/18-03sc-differential-equations-fall-2011/",
      "desc": "The laws of nature are expressed as differential equations. Scientists and engineers must know how to model the world in terms of differential equations, and how to solve those equations and interpret the solutions. This course focuses on the equations and techniques most useful in science and engineering.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-January-CS",
      "title": "6.057: Introduction to MATLAB",
      "source": "MIT",
      "year": "Jan-19",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-057-introduction-to-matlab-january-iap-2019/",
      "desc": "This is an accelerated introduction to MATLAB® and its popular toolboxes. Lectures are interactive, with students conducting sample MATLAB problems in real time. The course includes problem-based MATLAB assignments. Students must provide their own laptop and software. This is great preparation for classes that use MATLAB.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-January-CS",
      "title": "6.S096: Introduction to C and C++",
      "source": "MIT",
      "year": "Jan-13",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s096-introduction-to-c-and-c-january-iap-2013/",
      "desc": "This course provides a fast-paced introduction to the C and C++ programming languages. You will learn the required background knowledge, including memory management, pointers, preprocessor macros, object-oriented programming, and how to find bugs when you inevitably use any of those incorrectly. There will be daily assignments and a small-scale individual project.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-January-CS",
      "title": "6.092: Introduction to Programming in Java",
      "source": "MIT",
      "year": "Jan-10",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/",
      "desc": "This course is an introduction to software engineering, using the Java™ programming language. It covers concepts useful to 6.005. Students will learn the fundamentals of Java. The focus is on developing high quality, working software that solves real problems.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.172: Performance Engineering of Software Systems",
      "source": "MIT",
      "year": "Fall 2018",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/",
      "desc": "6.172 is an 18-unit class that provides a hands-on, project-based introduction to building scalable and high-performance software systems. Topics include performance analysis, algorithmic techniques for high performance, instruction-level optimizations, caching optimizations, parallel programming, and building scalable systems. The course programming language is C.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.041: Probabilistic Systems Analysis and Applied Probability",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-fall-2010/",
      "desc": "Welcome to 6.041/6.431, a subject on the modeling and analysis of random phenomena and processes, including the basics of statistical inference. Nowadays, there is broad consensus that the ability to think probabilistically is a fundamental component of scientific literacy. For example:",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.004: Computation Structures",
      "source": "MIT",
      "year": "Spring 2017",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2017/",
      "desc": "This course introduces architecture of digital systems, emphasizing structural principles common to a wide range of technologies. It covers the topics including multilevel implementation strategies, definition of new primitives (e.g., gates, instructions, procedures, processes) and their mechanization using lower-level elements. It also includes analysis of potential concurrency, precedence constraints and performance measures, pipelined and multidimensional systems, instruction set design issues and architectural support for contemporary software structures.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.001: Structure and Intepretation of Computer Programs",
      "source": "MIT",
      "year": "Spring 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/",
      "desc": "This course introduces students to the principles of computation. Upon completion of 6.001, students should be able to explain and apply the basic methods from programming languages to analyze computational systems, and to generate computational solutions to abstract problems. Substantial weekly programming assignments are an integral part of the course. This course is worth 4 Engineering Design Points.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.002: Circuits and Electronics",
      "source": "MIT",
      "year": "Spring 2007",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-002-circuits-and-electronics-spring-2007/",
      "desc": "The course introduces the fundamentals of the lumped circuit abstraction. Topics covered include: resistive elements and networks; independent and dependent sources; switches and MOS transistors; digital abstraction; amplifiers; energy storage elements; dynamics of first- and second-order networks; design in the time and frequency domains; and analog and digital circuits and applications. Design and lab exercises are also significant components of the course. 6.002 is worth 4 Engineering Design Points. The 6.002 content was created collaboratively by Profs. Anant Agarwal and Jeffrey H. Lang.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.003: Signals and Systems",
      "source": "MIT",
      "year": "Fall 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-fall-2011/",
      "desc": "6.003 covers the fundamentals of signal and system analysis, focusing on representations of discrete-time and continuous-time signals (singularity functions, complex exponentials and geometrics, Fourier representations, Laplace and Z transforms, sampling) and representations of linear, time-invariant systems (difference and differential equations, block diagrams, system functions, poles and zeros, convolution, impulse and step responses, frequency responses). Applications are drawn broadly from engineering and physics, including feedback and control, communications, and signal processing.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.867: Machine Learning",
      "source": "MIT",
      "year": "Fall 2006",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-867-machine-learning-fall-2006/",
      "desc": "6.867 is an introductory course on machine learning which gives an overview of many concepts, techniques, and algorithms in machine learning, beginning with topics such as classification and linear regression and ending up with more recent topics such as boosting, support vector machines, hidden Markov models, and Bayesian networks. The course will give the student the basic ideas and intuition behind modern machine learning methods as well as a bit more formal understanding of how, why, and when they work. The underlying theme in the course is statistical inference as it provides the foundation for most of the methods covered.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.450: Principles of Digital Communications I",
      "source": "MIT",
      "year": "Fall 2006",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-450-principles-of-digital-communications-i-fall-2006/",
      "desc": "Topics covered include: digital communications at the block diagram level, data compression, Lempel-Ziv algorithm, scalar and vector quantization, sampling and aliasing, the Nyquist criterion, PAM and QAM modulation, signal constellations, finite-energy waveform spaces, detection, and modeling and system design for wireless communication.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.830: Database Systems",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-830-database-systems-fall-2010/",
      "desc": "This course relies on primary readings from the database community to introduce graduate students to the foundations of database systems, focusing on basics such as the relational algebra and data model, schema normalization, query optimization, and transactions. It is designed for students who have taken 6.033 (or equivalent); no prior database experience is assumed, though students who have taken an undergraduate course in databases are encouraged to attend.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.828: Operating System Engineering",
      "source": "MIT",
      "year": "Fall 2012",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-828-operating-system-engineering-fall-2012/",
      "desc": "This course studies fundamental design and implementation ideas in the engineering of operating systems. Lectures are based on a study of UNIX and research papers. Topics include virtual memory, threads, context switches, kernels, interrupts, system calls, interprocess communication, coordination, and the interaction between software and hardware. Individual laboratory assignments involve implementation of a small operating system in C, with some x86 assembly.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.851: Advanced Data Structures",
      "source": "MIT",
      "year": "Spring 2012",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/",
      "desc": "Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current directions of research in data structure.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.451: Principles of Digital Communications II",
      "source": "MIT",
      "year": "Spring 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-451-principles-of-digital-communication-ii-spring-2005/",
      "desc": "This course is the second of a two-term sequence with 6.450. The focus is on coding techniques for approaching the Shannon limit of additive white Gaussian noise (AWGN) channels, their performance analysis, and design principles. After a review of 6.450 and the Shannon limit for AWGN channels, the course begins by discussing small signal constellations, performance analysis and coding gain, and hard-decision and soft-decision decoding. It continues with binary linear block codes, Reed-Muller codes, finite fields, Reed-Solomon and BCH codes, binary linear convolutional codes, and the Viterbi algorithm.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-January-CS",
      "title": "6.S191: Introduction to Deep Learning",
      "source": "MIT",
      "year": "Jan-10",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s191-introduction-to-deep-learning-january-iap-2020/",
      "desc": "This is MIT's introductory course on deep learning methods with applications to computer vision, natural language processing, biology, and more! Students will gain foundational knowledge of deep learning algorithms and get practical experience in building neural networks in TensorFlow. Course concludes with a project proposal competition with feedback from staff and panel of industry sponsors. Prerequisites assume calculus (i.e. taking derivatives) and linear algebra (i.e. matrix multiplication), and we'll try to explain everything else along the way! Experience in Python is helpful but not necessary.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": false
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.050J: Information and Entropy",
      "source": "MIT",
      "year": "Spring 2008",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-050j-information-and-entropy-spring-2008/",
      "desc": "This course explores the ultimate limits to communication and computation, with an emphasis on the physical nature of information and information processing. Topics include: information and computation, digital signals, codes and compression, applications such as biological representations of information, logic circuits, computer architectures, and algorithmic information, noise, probability, error correction, reversible and irreversible operations, physics of computation, and quantum computation. The concept of entropy is applied to channel capacity and to the second law of thermodynamics.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.262: Discrete Stochastic Process",
      "source": "MIT",
      "year": "Spring 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-262-discrete-stochastic-processes-spring-2011/",
      "desc": "Discrete stochastic processes are essentially probabilistic systems that evolve in time via random changes occurring at discrete fixed or random intervals. This course aims to help students acquire both the mathematical principles and the intuition necessary to create, analyze, and understand insightful models for a broad range of these processes. The range of areas for which discrete stochastic-process models are useful is constantly expanding, and includes many applications in engineering, physics, biology, operations research and finance.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.S897: Machine Learning for Healthcare",
      "source": "MIT",
      "year": "Spring 2019",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s897-machine-learning-for-healthcare-spring-2019/",
      "desc": "This course introduces students to machine learning in healthcare, including the nature of clinical data and the use of machine learning for risk stratification, disease progression modeling, precision medicine, diagnosis, subtype discovery, and improving clinical workflows.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.857: Network and Computer Security",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-857-network-and-computer-security-spring-2014/",
      "desc": "6.857 Network and Computer Security is an upper-level undergraduate, first-year graduate course on network and computer security. It fits within the Computer Systems and Architecture Engineering concentration.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.045J: Automata, Computability, and Complexity",
      "source": "MIT",
      "year": "Spring 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-045j-automata-computability-and-complexity-spring-2011/",
      "desc": "This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.046J: Design and Analysis of Algorithms",
      "source": "MIT",
      "year": "Spring 2012",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/",
      "desc": "Techniques for the design and analysis of efficient algorithms, emphasizing methods useful in practice. Topics include sorting; search trees, heaps, and hashing; divide-and-conquer; dynamic programming; greedy algorithms; amortized analysis; graph algorithms; and shortest paths. Advanced topics may include network flow, computational geometry, number-theoretic algorithms, polynomial and matrix calculations, caching, and parallel computing.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.047: Computational Biology",
      "source": "MIT",
      "year": "Fall 2015",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-047-computational-biology-fall-2015/",
      "desc": "This course covers the algorithmic and machine learning foundations of computational biology combining theory with practice. We cover both foundational topics in computational biology, and current research frontiers. We study fundamental techniques, recent advances in the field, and work directly with current large-scale biological datasets.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.849: Geometric Folding Algorithms: Linkages, Origami, Polyhedra",
      "source": "MIT",
      "year": "Fall 2012",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-849-geometric-folding-algorithms-linkages-origami-polyhedra-fall-2012/",
      "desc": "This course focuses on the algorithms for analyzing and designing geometric foldings. Topics include reconfiguration of foldable structures, linkages made from one-dimensional rods connected by hinges, folding two-dimensional paper (origami), and unfolding and folding three-dimensional polyhedra. Applications to architecture, robotics, manufacturing, and biology are also covered in this course.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.875: Cryptography and Cryptanalysis",
      "source": "MIT",
      "year": "Spring 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-875-cryptography-and-cryptanalysis-spring-2005/",
      "desc": "This course features a rigorous introduction to modern cryptography, with an emphasis on the fundamental cryptographic primitives of public-key encryption, digital signatures, pseudo-random number generation, and basic protocols and their computational complexity requirements.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.011: Signals, Systems, and Inference",
      "source": "MIT",
      "year": "Spring 2018",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-signals-systems-and-inference-spring-2018/",
      "desc": "This course covers signals, systems and inference in communication, control and signal processing. Topics include input-output and state-space models of linear systems driven by deterministic and random signals; time- and transform-domain representations in discrete and continuous time; and group delay. State feedback and observers. Probabilistic models; stochastic processes, correlation functions, power spectra, spectral factorization. Least-mean square error estimation; Wiener filtering. Hypothesis testing; detection; matched filters.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.831: User Interface Design and Implementation",
      "source": "MIT",
      "year": "Spring 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-831-user-interface-design-and-implementation-spring-2011/",
      "desc": "6.831/6.813 examines human-computer interaction in the context of graphical user interfaces. The course covers human capabilities, design principles, prototyping techniques, evaluation techniques, and the implementation of graphical user interfaces. Deliverables include short programming assignments and a semester-long group project. Students taking the graduate version also have readings from current literature and additional assignments.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.012: Microelectronic Devices and Circuits",
      "source": "MIT",
      "year": "Fall 2009",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-012-microelectronic-devices-and-circuits-fall-2009/",
      "desc": "6.012 is the header course for the department's \"Devices, Circuits and Systems\" concentration. The topics covered include modeling of microelectronic devices, basic microelectronic circuit analysis and design, physical electronics of semiconductor junction and MOS devices, relation of electrical behavior to internal physical processes, development of circuit models, and understanding the uses and limitations of various models. The course uses incremental and large-signal techniques to analyze and design bipolar and field effect transistor circuits, with examples chosen from digital circuits, single-ended and differential linear amplifiers, and other integrated circuits.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.541J: Speech Communication",
      "source": "MIT",
      "year": "Spring 2004",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-541j-speech-communication-spring-2004/",
      "desc": "6.541J surveys the structural properties of natural languages, with special emphasis on the sound pattern. Topics covered include: representation of the lexicon; physiology of speech production; articulatory phonetics; acoustical theory of speech production; acoustical and articulatory descriptions of phonetic features and of prosodic aspects of speech; perception of speech; models of lexical access and of speech production and planning; and applications to recognition and generation of speech by machine, and to the study of speech disorders.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.341: Discrete-Time Signal Processing",
      "source": "MIT",
      "year": "Fall 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-341-discrete-time-signal-processing-fall-2005/",
      "desc": "This class addresses the representation, analysis, and design of discrete time signals and systems. The major concepts covered include: Discrete-time processing of continuous-time signals; decimation, interpolation, and sampling rate conversion; flowgraph structures for DT systems; time-and frequency-domain design techniques for recursive (IIR) and non-recursive (FIR) filters; linear prediction; discrete Fourier transform, FFT algorithm; short-time Fourier analysis and filter banks; multirate techniques; Hilbert transforms; Cepstral analysis and various applications.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.061: Introduction to Electric Power Systems",
      "source": "MIT",
      "year": "Spring 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-061-introduction-to-electric-power-systems-spring-2011/",
      "desc": "This course is an introductory subject in the field of electric power systems and electrical to mechanical energy conversion. Electric power has become increasingly important as a way of transmitting and transforming energy in industrial, military and transportation uses. Electric power systems are also at the heart of alternative energy systems, including wind and solar electric, geothermal and small scale hydroelectric generation.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.334: Power Electronics",
      "source": "MIT",
      "year": "Spring 2007",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-334-power-electronics-spring-2007/",
      "desc": "6.334 examines the application of electronics to energy conversion and control. Topics covered include: modeling, analysis, and control techniques; design of power circuits including inverters, rectifiers, and DC-DC converters; analysis and design of magnetic components and filters; and characteristics of power semiconductor devices. Numerous application examples will be presented such as motion control systems, power supplies, and radio-frequency power amplifiers. The course is worth 6 engineering design points.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.832: Underactuated Robotics",
      "source": "MIT",
      "year": "Spring 2009",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-832-underactuated-robotics-spring-2009/",
      "desc": "This course discusses nonlinear dynamics and control of underactuated mechanical systems, with an emphasis on machine learning methods. Topics include nonlinear dynamics of passive robots (walkers, swimmers, flyers), motion planning, partial feedback linearization, energy-shaping control, analytical optimal control, reinforcement learning/approximate optimal control, and the influence of mechanical design on control. Discussions include examples from biology and applications to legged locomotion, compliant manipulation, underwater robots, and flying machines.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.241J: Dynamic Systems and Controls",
      "source": "MIT",
      "year": "Spring 2011",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-241j-dynamic-systems-and-control-spring-2011/",
      "desc": "The course addresses dynamic systems, i.e., systems that evolve with time. Typically these systems have inputs and outputs; it is of interest to understand how the input affects the output (or, vice-versa, what inputs should be given to generate a desired output). In particular, we will concentrate on systems that can be modeled by Ordinary Differential Equations (ODEs), and that satisfy certain linearity and time-invariance conditions.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.890: Algorithmic Lower Bounds: Fun with Hardness Proofs",
      "source": "MIT",
      "year": "Fall 2014",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-890-algorithmic-lower-bounds-fun-with-hardness-proofs-fall-2014/",
      "desc": "6.890 Algorithmic Lower Bounds: Fun with Hardness Proofs is a class taking a practical approach to proving problems can't be solved efficiently (in polynomial time and assuming standard complexity-theoretic assumptions like P ≠ NP). The class focuses on reductions and techniques for proving problems are computationally hard for a variety of complexity classes. Along the way, the class will create many interesting gadgets, learn many hardness proof styles, explore the connection between games and computation, survey several important problems and complexity classes, and crush hopes and dreams (for fast optimal solutions).",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.152J: Micro/Nano Processing Technology",
      "source": "MIT",
      "year": "Fall 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-152j-micro-nano-processing-technology-fall-2005/",
      "desc": "This course introduces the theory and technology of micro/nano fabrication. Lectures and laboratory sessions focus on basic processing techniques such as diffusion, oxidation, photolithography, chemical vapor deposition, and more. Through team lab assignments, students are expected to gain an understanding of these processing techniques, and how they are applied in concert to device fabrication. Students enrolled in this course have a unique opportunity to fashion and test micro/nano-devices, using modern techniques and technology.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.852J: Distributed Algorithms",
      "source": "MIT",
      "year": "Fall 2009",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-852j-distributed-algorithms-fall-2009/",
      "desc": "Distributed algorithms are algorithms designed to run on multiple processors, without tight centralized control. In general, they are harder to design and harder to understand than single-processor sequential algorithms. Distributed algorithms are used in many practical systems, ranging from large computer networks to multiprocessor shared-memory systems. They also have a rich theory, which forms the subject matter for this course.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.436J: Fundamentals of Probability",
      "source": "MIT",
      "year": "Fall 2018",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-436j-fundamentals-of-probability-fall-2018/",
      "desc": "This is a course on the fundamentals of probability geared towards first or second-year graduate students who are interested in a rigorous development of the subject. The course covers sample space, random variables, expectations, transforms, Bernoulli and Poisson processes, finite Markov chains, and limit theorems. There is also a number of additional topics such as: language, terminology, and key results from measure theory; interchange of limits and expectations; multivariate Gaussian distributions; and deeper understanding of conditional distributions and expectations.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.701: Introduction to Nanoelectronics",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-701-introduction-to-nanoelectronics-spring-2010/",
      "desc": "Traditionally, progress in electronics has been driven by miniaturization. But as electronic devices approach the molecular scale, classical models for device behavior must be abandoned. To prepare for the next generation of electronic devices, this class teaches the theory of current, voltage and resistance from atoms up. To describe electrons at the nanoscale, we will begin with an introduction to the principles of quantum mechanics, including quantization, the wave-particle duality, wavefunctions and Schrödinger's equation. Then we will consider the electronic properties of molecules, carbon nanotubes and crystals, including energy band formation and the origin of metals, insulators and semiconductors. Electron conduction will be taught beginning with ballistic transport and concluding with a derivation of Ohm's law. We will then compare ballistic to bulk MOSFETs. The class will conclude with a discussion of possible fundamental limits to computation.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.S079: Nanomaker",
      "source": "MIT",
      "year": "Spring 2013",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s079-nanomaker-spring-2013/",
      "desc": "This course links clean energy sources and storage technology to energy consumption case studies to give students a concept of the full circle of production and consumption. Specifically, photovoltaic, organic photovoltaic, piezoelectricity and thermoelectricity sources are applied to electrophoresis, lab on a chip, and paper microfluidic applications–relevant analytical techniques in biology and chemistry. Hands-on experimentation with everyday materials and equipment help connect the theory with the implementation. Complementary laboratories fabricating LEDs, organic LEDs and spectrometers introduce the diagnostic tools used to characterize energy efficiency.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.845: Quantum Complexity Theory",
      "source": "MIT",
      "year": "Fall 2010",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-845-quantum-complexity-theory-fall-2010/",
      "desc": "This course is an introduction to quantum computational complexity theory, the study of the fundamental capabilities and limitations of quantum computers. Topics include complexity classes, lower bounds, communication complexity, proofs, advice, and interactive proof systems in the quantum world. The objective is to bring students to the research frontier.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.845J: Advanced Algorithms",
      "source": "MIT",
      "year": "Fall 2005",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-854j-advanced-algorithms-fall-2005/",
      "desc": "This course is a first-year graduate course in algorithms. Emphasis is placed on fundamental algorithms and advanced methods of algorithmic design, analysis, and implementation. Techniques to be covered include amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Domains include string algorithms, network optimization, parallel algorithms, computational geometry, online algorithms, external memory, cache, and streaming algorithms, and data structures.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.685: Electric Machines",
      "source": "MIT",
      "year": "Fall 2013",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-685-electric-machines-fall-2013/",
      "desc": "This course teaches the principles and analysis of electromechanical systems. Students will develop analytical techniques for predicting device and system interaction characteristics as well as learn to design major classes of electric machines. Problems used in the course are intended to strengthen understanding of the phenomena and interactions in electromechanics, and include examples from current research.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.302: Feedback Systems",
      "source": "MIT",
      "year": "Spring 2007",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-302-feedback-systems-spring-2007/",
      "desc": "This course provides an introduction to the design of feedback systems. Topics covered include: properties and advantages of feedback systems, time-domain and frequency-domain performance measures, stability and degree of stability, root locus method, Nyquist criterion, frequency-domain design, compensation techniques, application to a wide variety of physical systems, internal and external compensation of operational amplifiers, modeling and compensation of power converter systems, and phase lock loops.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.661: Receivers, Antennas, and Systems",
      "source": "MIT",
      "year": "Spring 2003",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-661-receivers-antennas-and-signals-spring-2003/",
      "desc": "This course explores the detection and measurement of radio and optical signals encountered in communications, astronomy, remote sensing, instrumentation, and radar. Topics covered include: statistical analysis of signal processing systems, including radiometers, spectrometers, interferometers, and digital correlation systems; matched filters and ambiguity functions; communications channel performance; measurement of random electromagnetic fields, angular filtering properties of antennas, interferometers, and aperture synthesis systems; and radiative transfer and parameter estimation.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.896: Theory of Parallel Hardware",
      "source": "MIT",
      "year": "Spring 2004",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-896-theory-of-parallel-hardware-sma-5511-spring-2004/",
      "desc": "6.896 covers mathematical foundations of parallel hardware, from computer arithmetic to physical design, focusing on algorithmic underpinnings. Topics covered include: arithmetic circuits, parallel prefix, systolic arrays, retiming, clocking methodologies, boolean logic, sorting networks, interconnection networks, hypercubic networks, P-completeness, VLSI layout theory, reconfigurable wiring, fat-trees, and area-time complexity.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "6.974: Fundamentals of Photonics: Quantum Electronics",
      "source": "MIT",
      "year": "Spring 2006",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-974-fundamentals-of-photonics-quantum-electronics-spring-2006/",
      "desc": "This course explores the fundamentals of optical and optoelectronic phenomena and devices based on classical and quantum properties of radiation and matter culminating in lasers and applications. Fundamentals include: Maxwell's electromagnetic waves, resonators and beams, classical ray optics and optical systems, quantum theory of light, matter and its interaction, classical and quantum noise, lasers and laser dynamics, continuous wave and short pulse generation, light modulation; examples from integrated optics and semiconductor optoelectronics and nonlinear optics.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "6.551J: Acoustics of Speech and Hearing",
      "source": "MIT",
      "year": "Fall 2004",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-551j-acoustics-of-speech-and-hearing-fall-2004/",
      "desc": "The Acoustics of Speech and Hearing is an H-Level graduate course that reviews the physical processes involved in the production, propagation and reception of human speech. Particular attention is paid to how the acoustics and mechanics of the speech and auditory system define what sounds we are capable of producing and what sounds we can sense",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.657: Mathematics of Machine Learning",
      "source": "MIT",
      "year": "Fall 2015",
      "url": "https://ocw.mit.edu/courses/mathematics/18-657-mathematics-of-machine-learning-fall-2015/",
      "desc": "Broadly speaking, Machine Learning refers to the automated identification of patterns in data. As such it has been a fertile ground for new statistical and algorithmic developments. The purpose of this course is to provide a mathematically rigorous introduction to these developments with emphasis on methods and their analysis.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.086: Mathematical Methods for Engineers II",
      "source": "MIT",
      "year": "Spring 2006",
      "url": "https://ocw.mit.edu/courses/mathematics/18-086-mathematical-methods-for-engineers-ii-spring-2006/",
      "desc": "This graduate-level course is a continuation of Mathematical Methods for Engineers I (18.085). Topics include numerical methods; initial-value problems; network flows; and optimization.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": false,
        "assignments": true
      }
    },
    {
      "id": "MIT-January-CS",
      "title": "Mathematics of Big Data and Machine Learning",
      "source": "MIT",
      "year": "Jan-20",
      "url": "https://ocw.mit.edu/resources/res-ll-005-mathematics-of-big-data-and-machine-learning-january-iap-2020/",
      "desc": "This course introduces the Dynamic Distributed Dimensional Data Model (D4M), a breakthrough in computer programming that combines graph theory, linear algebra, and databases to address problems associated with Big Data. Search, social media, ad placement, mapping, tracking, spam filtering, fraud detection, wireless communication, drug discovery, and bioinformatics all attempt to find items of interest in vast quantities of data. This course teaches a signal processing approach to these problems by combining linear algebraic graph algorithms, group theory, and database design. This approach has been implemented in software. The class will begin with a number of practical problems, introduce the appropriate theory, and then apply the theory to these problems. Students will apply these ideas in the final project of their choosing. The course will contain a number of smaller assignments which will prepare the students with appropriate software infrastructure for completing their final projects.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": false
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.311: Principles of Applied Mathematics",
      "source": "MIT",
      "year": "Spring 2014",
      "url": "https://ocw.mit.edu/courses/mathematics/18-311-principles-of-applied-mathematics-spring-2014/",
      "desc": "18.311 Principles of Continuum Applied Mathematics covers fundamental concepts in continuous applied mathematics, including applications from traffic flow, fluids, elasticity, granular flows, etc. The class also covers continuum limit; conservation laws, quasi-equilibrium; kinematic waves; characteristics, simple waves, shocks; diffusion (linear and nonlinear); numerical solution of wave equations; finite differences, consistency, stability; discrete and fast Fourier transforms; spectral methods; transforms and series (Fourier, Laplace). Additional topics may include sonic booms, Mach cone, caustics, lattices, dispersion, and group velocity.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.217: Graph Theory and Additive Combinatorics",
      "source": "MIT",
      "year": "Fall 2019",
      "url": "https://ocw.mit.edu/courses/mathematics/18-217-graph-theory-and-additive-combinatorics-fall-2019/",
      "desc": "This course examines classical and modern developments in graph theory and additive combinatorics, with a focus on topics and themes that connect the two subjects. The course also introduces students to current research topics and open problems.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.075: Advanced Calculus for Engineers",
      "source": "MIT",
      "year": "Fall 2004",
      "url": "https://ocw.mit.edu/courses/mathematics/18-075-advanced-calculus-for-engineers-fall-2004/",
      "desc": "This course analyzes the functions of a complex variable and the calculus of residues. It also covers subjects such as ordinary differential equations, partial differential equations, Bessel and Legendre functions, and the Sturm-Liouville theory.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.305: Advanced Analytic Methods in Science and Engineering",
      "source": "MIT",
      "year": "Fall 2004",
      "url": "https://ocw.mit.edu/courses/mathematics/18-305-advanced-analytic-methods-in-science-and-engineering-fall-2004/",
      "desc": "Advanced Analytic Methods in Science and Engineering is a comprehensive treatment of the advanced methods of applied mathematics. It was designed to strengthen the mathematical abilities of graduate students and train them to think on their own.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "3.016: Mathematics for Material Scientists and Engineers",
      "source": "MIT",
      "year": "Fall 2005",
      "url": "https://ocw.mit.edu/courses/materials-science-and-engineering/3-016-mathematics-for-materials-scientists-and-engineers-fall-2005/",
      "desc": "This course covers the mathematical techniques necessary for understanding of materials science and engineering topics such as energetics, materials structure and symmetry, materials response to applied fields, mechanics and physics of solids and soft materials. The class uses examples from the materials science and engineering core courses (3.012 and 3.014) to introduce mathematical concepts and materials-related problem solving skills. Topics include linear algebra and orthonormal basis, eigenvalues and eigenvectors, quadratic forms, tensor operations, symmetry operations, calculus of several variables, introduction to complex analysis, ordinary and partial differential equations, theory of distributions, and fourier analysis.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.435J: Quantum Computation",
      "source": "MIT",
      "year": "Fall 2003",
      "url": "https://ocw.mit.edu/courses/mathematics/18-435j-quantum-computation-fall-2003/",
      "desc": "This course provides an introduction to the theory and practice of quantum computation. Topics covered include: physics of information processing, quantum logic, quantum algorithms including Shor's factoring algorithm and Grover's search algorithm, quantum error correction, quantum communication, and cryptography.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.335J: Introduction to Numerical Methods",
      "source": "MIT",
      "year": "Spring 2019",
      "url": "https://ocw.mit.edu/courses/mathematics/18-335j-introduction-to-numerical-methods-spring-2019/",
      "desc": "This course offers an advanced introduction to numerical analysis, with a focus on accuracy and efficiency of numerical algorithms. Topics include sparse-matrix/iterative and dense-matrix algorithms in numerical linear algebra (for linear systems and eigenproblems), floating-point arithmetic, backwards error analysis, conditioning, and stability. Other computational topics (e.g., numerical integration or nonlinear optimization) are also surveyed.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.238: Geometry and Quantum Field Theory",
      "source": "MIT",
      "year": "Fall 2002",
      "url": "https://ocw.mit.edu/courses/mathematics/18-238-geometry-and-quantum-field-theory-fall-2002/",
      "desc": "Geometry and Quantum Field Theory, designed for mathematicians, is a rigorous introduction to perturbative quantum field theory, using the language of functional integrals. It covers the basics of classical field theory, free quantum theories and Feynman diagrams. The goal is to discuss, using mathematical language, a number of basic notions and results of QFT that are necessary to understand talks and papers in QFT and String Theory.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Spring-CS",
      "title": "18.783: Ellipitic Curves",
      "source": "MIT",
      "year": "Spring 2019",
      "url": "https://ocw.mit.edu/courses/mathematics/18-783-elliptic-curves-spring-2019/",
      "desc": "This graduate-level course is a computationally focused introduction to elliptic curves, with applications to number theory and cryptography.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "JHU-Fall-CS",
      "title": "601.465: Natural Language Processing",
      "source": "JHU",
      "year": "Fall 2021",
      "url": "https://www.cs.jhu.edu/~jason/465/#courseinfo",
      "desc": "The course covers methods for trees (parsing and semantic interpretation), sequences (finite-state transduction such as morphology), and words (sense and phrase induction), with applications to practical engineering tasks such as information retrieval and extraction, text classification, part-ofspeech tagging, speech recognition and machine translation. There are a number of structured but challenging programming assignments.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "JHU-Fall-CS",
      "title": "601.467: Introduction to Human Language Technology",
      "source": "JHU",
      "year": "Fall 2021",
      "url": "https://jhu-intro-hlt.github.io/",
      "desc": "Words, Morphology, Syntax, Semantics, Deep Learning, Information retrieval and extraction, Machine translation.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "JHU-Spring-CS",
      "title": "600.325: Declarative Methods",
      "source": "JHU",
      "year": "Spring 2017",
      "url": "https://www.cs.jhu.edu/~jason/325/",
      "desc": "Suppose you could simply write down a description of your problem, and let the computer figure out how to solve it. What notation could you use? What strategy should the computer then use? In this survey class, you'll learn to recognize when your problem is an instance of satisfiability, constraint programming, logic programming, dynamic programming, or mathematical programming (e.g., integer linear programming). For each of these related paradigms, you'll learn to reformulate hard problems in the required notation and apply off-the-shelf software that can solve any problem in that notation -- including NP-complete problems and many of the problems you'll see in other courses and in the real world. You'll also gain some understanding of the general-purpose algorithms that power the software.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "JHU-Summer-CS",
      "title": "LING569: Intro to Computational Linguistics",
      "source": "JHU",
      "year": "Summer 2013",
      "url": "https://www.cs.jhu.edu/~jason/licl/",
      "desc": "This class presents fundamental methods of computational linguistics. We will develop probabilistic models to describe what trees and sequences are likely in a language. After estimating the parameters of such models, it is possible to recover underlying structure from surface observations. We will examine algorithms to accomplish these tasks.",
      "tags": [
        null
      ],
      "contains": {
        "videos": true,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "MIT-Fall-CS",
      "title": "18.385J: Nonlinear Dynamics and Chaos",
      "source": "MIT",
      "year": "Fall 2004",
      "url": "https://ocw.mit.edu/courses/mathematics/18-385j-nonlinear-dynamics-and-chaos-fall-2004/",
      "desc": "This graduate level course focuses on nonlinear dynamics with applications. It takes an intuitive approach with emphasis on geometric thinking, computational and analytical methods and makes extensive use of demonstration software.",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    },
    {
      "id": "JHU-Fall-CS",
      "title": "601.315: Databases",
      "source": "JHU",
      "year": "Fall 2021",
      "url": "http://www.cs.jhu.edu/~yarowsky/cs415.html",
      "desc": "315/415/615 focuses on how to design and use a database; formal database models, theory and foundations; database programming languages, especially SQL and PL/SQL; object-oriented and XMLbased data models and future directions (including data mining and natural language interfaces).",
      "tags": [
        null
      ],
      "contains": {
        "videos": false,
        "written": true,
        "assignments": true
      }
    }
  ],
  "textbooks": [
    {
      "book": "Information Theory, Inference, and Learning Algorithms",
      "url": "http://www.inference.org.uk/mackay/itprnn/book.html",
      "author": "David MacKay",
      "category": "algorithms"
    },
    {
      "book": "Operating Systems: Three Easy Pieces",
      "url": "https://pages.cs.wisc.edu/~remzi/OSTEP/",
      "author": "Arpaci-Dusseau, Andrea C., Apraci-Dusseau, Remzi H.",
      "category": "systems"
    },
    {
      "book": "Machine Learning",
      "url": "http://www.cs.cmu.edu/~tom/mlbook.html",
      "author": "Tom Mitchell",
      "category": "machinelearning"
    },
    {
      "book": "The Elements of Statistical Learning",
      "url": "https://web.stanford.edu/~hastie/ElemStatLearn/",
      "author": "Trevor Hastie, Robert Tibshirani, and Jerome Friedman",
      "category": "statistics, mathematics"
    },
    {
      "book": "Introduction to Information Retreival",
      "url": "https://nlp.stanford.edu/IR-book/information-retrieval-book.html",
      "author": "Christopher D. Manning, Prabhakar Raghavan, and Hinrich Schütze",
      "category": "introduction"
    },
    {
      "book": "A Byte of Python",
      "url": "http://www.ibiblio.org/swaroopch/byteofpython/read/",
      "author": "Swaroop C H",
      "category": "python"
    },
    {
      "book": "Python Programming",
      "url": "https://en.wikibooks.org/wiki/Python_Programming",
      "author": "WikiBooks",
      "category": "python"
    },
    {
      "book": "Introduction to Python",
      "url": "http://tdc-www.harvard.edu/Python.pdf",
      "author": "Matt Huenerfauth, Guido van Rossum, Richard P. Muller",
      "category": "python"
    },
    {
      "book": "Structure and Interpretation of Computer Programs",
      "url": "https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%_toc_%_chap_Temp_851",
      "author": "MIT Press",
      "category": "theory"
    },
    {
      "book": "Mathematics for Computer Science",
      "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2015/readings/MIT6_042JS15_textbook.pdf",
      "author": "Eric Lehman, F. Thomson Leighton, & Albert R. Meyer",
      "category": "mathematics"
    },
    {
      "book": "Computational Biology: Genomes, Networks, Evolution",
      "url": "https://ocw.mit.edu/ans7870/6/6.047/f15/MIT6_047F15_Compiled.pdf",
      "author": "Manolis Kellis",
      "category": "biology"
    },
    {
      "book": "The Art of Insight in Science and Engineering",
      "url": "https://ocw.mit.edu/resources/res-6-011-the-art-of-insight-in-science-and-engineering-mastering-complexity-fall-2014/online-textbook/MITRES_6-011F14_art_insfin.pdf",
      "author": "Sanjoy Mahajan",
      "category": "theory"
    },
    {
      "book": "Introduction to Probability",
      "url": "https://math.dartmouth.edu/~prob/prob/prob.pdf",
      "author": "Charles M. Grinstead, J. Laurie Snell",
      "category": "mathematics"
    },
    {
      "book": "Algebraic Curves: An Introduction to Algebraic Geometry",
      "url": "http://www.math.lsa.umich.edu/~wfulton/CurveBook.pdf",
      "author": "William Fulton",
      "category": "mathematics"
    },
    {
      "book": "Elliptic Curves",
      "url": "http://www.jmilne.org/math/Books/ectext.html",
      "author": "J.S. Milne",
      "category": "mathematics"
    },
    {
      "book": "Operational Amplifiers: Theory and Practice",
      "url": "https://ocw.mit.edu/ans7870/RES/RES.6-010/MITRES_6-010S13_comchaptrs.pdf",
      "author": "James K. Roberge",
      "category": "mathematics"
    },
    {
      "book": "Calculus",
      "url": "https://ocw.mit.edu/ans7870/resources/Strang/Edited/Calculus/Calculus.pdf",
      "author": "Gilbert Strang",
      "category": "mathematics"
    },
    {
      "book": "OpenSSH",
      "url": "https://en.wikibooks.org/wiki/OpenSSH",
      "author": "WikiBooks",
      "category": "security, misc"
    },
    {
      "book": "Linear Algebra",
      "url": "https://en.wikibooks.org/wiki/Linear_Algebra",
      "author": "WikiBooks",
      "category": "mathematics"
    },
    {
      "book": "Algorithms",
      "url": "https://en.wikibooks.org/wiki/Algorithms",
      "author": "WikiBooks",
      "category": "algorithms"
    },
    {
      "book": "Write Yourself a Scheme in 48 Houris (Advanced Haskell)",
      "url": "https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours",
      "author": "WikiBooks",
      "category": "haskell, misc"
    },
    {
      "book": "LaTeX",
      "url": "https://en.wikibooks.org/wiki/LaTeX",
      "author": "WikiBooks",
      "category": "latex"
    },
    {
      "book": "C Programming: A comprehensive look at the C programming language and its features",
      "url": "https://en.wikibooks.org/wiki/C_Programming",
      "author": "WikiBooks",
      "category": "cprogramming"
    },
    {
      "book": "C# Programming",
      "url": "https://en.wikibooks.org/wiki/C_Sharp_Programming",
      "author": "WikiBooks",
      "category": "cprogramming"
    },
    {
      "book": "Blended Learning in K-12",
      "url": "https://en.wikibooks.org/wiki/Blended_Learning_in_K-12",
      "author": "WikiBooks",
      "category": "misc"
    },
    {
      "book": "Knowing Knoppix",
      "url": "https://en.wikibooks.org/wiki/Knowing_Knoppix",
      "author": "WikiBooks",
      "category": "knoppix, linux"
    },
    {
      "book": "XForms Tutorial and Cookbook",
      "url": "https://en.wikibooks.org/wiki/XForms",
      "author": "WikiBooks",
      "category": "web, xforms, misc"
    },
    {
      "book": "XML - Managing Data Exchange",
      "url": "https://en.wikibooks.org/wiki/XML_-_Managing_Data_Exchange",
      "author": "WikiBooks",
      "category": "web, xml"
    },
    {
      "book": "Blender 3D: Noob to Pro",
      "url": "https://en.wikibooks.org/wiki/Blender_3D:_Noob_to_Pro",
      "author": "WikiBooks",
      "category": "blender, graphics"
    },
    {
      "book": "Introduction to Statistical Thinking",
      "url": "https://open.umn.edu/opentextbooks/textbooks/introduction-to-statistical-thinking",
      "author": "Benjamin Yakir (The Hebrew University of Jerusalem)",
      "category": "mathematics"
    },
    {
      "book": "Defend Dissent: Introduction to Cryptography",
      "url": "https://open.umn.edu/opentextbooks/textbooks/defend-dissent",
      "author": "Oregon State University",
      "category": "crypto, introduction"
    },
    {
      "book": "First Semester in Numerical Analysis with Python",
      "url": "https://open.umn.edu/opentextbooks/textbooks/first-semester-in-numerical-analysis-with-python",
      "author": "Yaning Liu, (University of Colorado Denver)",
      "category": "python, introduction"
    },
    {
      "book": "The Joy of Cryptography",
      "url": "https://open.umn.edu/opentextbooks/textbooks/the-joy-of-cryptography",
      "author": "Mike Rosulek (Oregon State University)",
      "category": "crypto"
    },
    {
      "book": "A Primer for Computational Biology",
      "url": "https://open.umn.edu/opentextbooks/textbooks/a-primer-for-computational-biology",
      "author": "Shawn T. O'Neil (Oregon State University)",
      "category": "biology"
    },
    {
      "book": "Think Raku: How to Think Like a Computer Scientist",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-raku-how-to-think-like-a-computer-scientist-2nd-edition",
      "author": "Laurent Rosenfeld, Allen B. Downey (Olin College)",
      "category": "theory"
    },
    {
      "book": "Computer Networks: A Systems Approach",
      "url": "https://open.umn.edu/opentextbooks/textbooks/computer-networks-a-systems-approach",
      "author": "Larry Peterson (Princeton University), Bruce Davie (VMWare)",
      "category": "networks"
    },
    {
      "book": "Web Accessibility for Developers",
      "url": "https://open.umn.edu/opentextbooks/textbooks/web-accessibility-for-developers",
      "author": "Ryerson University",
      "category": "web, misc"
    },
    {
      "book": "Making Games with Python & Pygame",
      "url": "https://open.umn.edu/opentextbooks/textbooks/making-games-with-python-pygame",
      "author": "Albert Sweigart",
      "category": "python"
    },
    {
      "book": "An Introduction to Matlab and Mathcad",
      "url": "https://open.umn.edu/opentextbooks/textbooks/an-introduction-to-matlab-and-mathcad",
      "author": "Troy Siemers (Virginia Military Institute)",
      "category": "matlab"
    },
    {
      "book": "Yet Another Introductory Number Theory Textbook (Cryptology Emphasis Version)",
      "url": "https://open.umn.edu/opentextbooks/textbooks/yet-another-introductory-number-theory-textbook-cryptology-emphasis-version",
      "author": "Jonathan A. Poritz",
      "category": "mathematics"
    },
    {
      "book": "Think Data Structures: Algorithms and Information Retreival in Java",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-data-structures-algorithms-and-information-retrieval-in-java",
      "author": "Allen B. Downey",
      "category": "java, datastructures"
    },
    {
      "book": "How to Think Like a Computer Scientist: C Version",
      "url": "https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-c-version-1999",
      "author": "Allen B. Downey, Thomas Scheffler",
      "category": "cprogramming"
    },
    {
      "book": "How to Think Like a Computer Scientist: C++ Version",
      "url": "https://open.umn.edu/opentextbooks/textbooks/how-to-think-like-a-computer-scientist-c-version",
      "author": "Allen B. Downey",
      "category": "cprogramming"
    },
    {
      "book": "Object-Oriented Reengineering Patterns",
      "url": "https://open.umn.edu/opentextbooks/textbooks/object-oriented-reengineering-patterns",
      "author": "Serge Demeyer, Stéphane Ducasse, Oscar Nierstrasz",
      "category": "misc"
    },
    {
      "book": "Embedded Controllers Using C and Arduino (2nd Edition)",
      "url": "https://open.umn.edu/opentextbooks/textbooks/embedded-controllers-using-c-and-arduino-2e",
      "author": "James M. Fiore",
      "category": "cprogramming, ardunio"
    },
    {
      "book": "High Performance Computing",
      "url": "https://open.umn.edu/opentextbooks/textbooks/high-performance-computing",
      "author": "Charles Severance, Kevin Dowd",
      "category": "misc"
    },
    {
      "book": "Combinatorics",
      "url": "https://open.umn.edu/opentextbooks/textbooks/combinatorics",
      "author": "Joy Morris (University of Lethbridge)",
      "category": "mathematics"
    },
    {
      "book": "Eloquent JavaScript: A Modern Introduction to Programming",
      "url": "https://open.umn.edu/opentextbooks/textbooks/eloquent-javascript-a-modern-introduction-to-programming",
      "author": "Marijn Haverbeke",
      "category": "introduction, web"
    },
    {
      "book": "Relational Databases and Microsoft Access",
      "url": "https://open.umn.edu/opentextbooks/textbooks/relational-databases-and-microsoft-access",
      "author": "Ron McFadyen (University of Winnipeg)",
      "category": "databases"
    },
    {
      "book": "Nature of Geographic Information Systems",
      "url": "https://open.umn.edu/opentextbooks/textbooks/nature-of-geographic-information-systems",
      "author": "David DiBiase, Pennsylvania State University",
      "category": "gis"
    },
    {
      "book": "Introduction to Programming Using Java - Eighth Edition",
      "url": "https://open.umn.edu/opentextbooks/textbooks/introduction-to-programming-using-java-seventh-edition",
      "author": "David J. Eck, Hobart and William Smith Colleges",
      "category": "introduction, java"
    },
    {
      "book": "Introduction to Computer Graphics",
      "url": "https://open.umn.edu/opentextbooks/textbooks/introduction-to-computer-graphics",
      "author": "David J. Eck",
      "category": "graphics"
    },
    {
      "book": "Database Design - 2nd Edition",
      "url": "https://open.umn.edu/opentextbooks/textbooks/database-design-2nd-edition",
      "author": "Adrienne Watt (City University)",
      "category": "databases"
    },
    {
      "book": "A First Course in Electrical and Computer Engineering",
      "url": "https://open.umn.edu/opentextbooks/textbooks/a-first-course-in-electrical-and-computer-engineering",
      "author": "Louis Scharf (Colorado State University)",
      "category": "introduction, misc"
    },
    {
      "book": "Python for Everybody: Exploring Data Using Python 3",
      "url": "https://open.umn.edu/opentextbooks/textbooks/python-for-everybody-exploring-data-using-python-3",
      "author": "Charles Severance (University of Michigan)",
      "category": "python"
    },
    {
      "book": "Computer Networking: Principles, Protocols and Practice",
      "url": "https://open.umn.edu/opentextbooks/textbooks/computer-networking-principles-protocols-and-practice",
      "author": "Olivier Bonaventure (Universite catolique de Louvain)",
      "category": "networks"
    },
    {
      "book": "Signal Computing: Digital Signals in the Software Domain",
      "url": "https://open.umn.edu/opentextbooks/textbooks/signal-computing-digital-signals-in-the-software-domain",
      "author": "Michael D. Stiber (University of Washington Bothell), Bilin Zhang Stiber (University of Washington Bothell), Eric C. Larson (Southern Methodist University)",
      "category": "misc"
    },
    {
      "book": "Introduction to Autonomous Robots",
      "url": "https://open.umn.edu/opentextbooks/textbooks/introduction-to-autonomous-robots",
      "author": "Nikolaus Correll (University of Colorado at Boulder)",
      "category": "robotics, misc"
    },
    {
      "book": "Think DSP: Digital Signal Processing in Python",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-dsp-digital-signal-processing-in-python",
      "author": "Allen B. Downey (Franklin W. Olin College of Engineering)",
      "category": "python"
    },
    {
      "book": "Think Java: How To Think Like a Computer Scientist - 2nd Edition",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-java-how-to-think-like-a-computer-scientist",
      "author": "Chris Mayfield (James Madison University), Allen Downey (Franklin W. Olin Colleg of Engineering)",
      "category": "java"
    },
    {
      "book": "Think Stats: Probability and Statistics for Programmers - 2nd Edition",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-stats-probability-and-statistics-for-programmers",
      "author": "Allen B. Downey (Franklin W. Olin College of Engineering)",
      "category": "mathematics, statistics"
    },
    {
      "book": "Think Bayes: Bayesian Statistics Made Simple",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-bayes-bayesian-statistics-made-simple",
      "author": "Allen B. Downey (Franklin W. Olin College of Engineering)",
      "category": "mathematics"
    },
    {
      "book": "Think Complexity: Exploring Complexity Science with Python - 2nd Edition",
      "url": "https://open.umn.edu/opentextbooks/textbooks/think-complexity-exploring-complexity-science-with-python",
      "author": "Allen B. Downey (Franklin W. Olin College of Engineering)",
      "category": "python"
    },
    {
      "book": "Digital Circuit Projects: An Overview of Digital Circuits Through Implementing Integrated Circuits",
      "url": "https://open.umn.edu/opentextbooks/textbooks/digital-circuit-projects-an-overview-of-digital-circuits-through-implementing-integrated-circuits",
      "author": "Charles W. Kann (Gettysburg College)",
      "category": "misc"
    },
    {
      "book": "Introduction to the Modeling and Analysis of Complex Systems",
      "url": "https://open.umn.edu/opentextbooks/textbooks/introduction-to-the-modeling-and-analysis-of-complex-systems",
      "author": "Hiroki Sayama, State University of New york at Binghamton",
      "category": "systems"
    },
    {
      "book": "Spatial Thinking in Planning Practice: An Introduction to GIS",
      "url": "https://open.umn.edu/opentextbooks/textbooks/spatial-thinking-in-planning-practice-an-introduction-to-gis",
      "author": "Yiping Fang, Vivek Shandas, Eugenio Arriaga Cordero (Portland State University)",
      "category": "gis"
    },
    {
      "book": "Java, Java, Java: Object-Oriented Problem Solving",
      "url": "https://open.umn.edu/opentextbooks/textbooks/java-java-java-object-oriented-problem-solving",
      "author": "Ralph Morelli, Ralph Walde (Trinity College)",
      "category": "java"
    },
    {
      "book": "Operating Systems and Middleware: Supporting Controlled Interaction",
      "url": "https://open.umn.edu/opentextbooks/textbooks/operating-systems-and-middleware-supporting-controlled-interaction",
      "author": "Max Hailperin (Gustavus Adolphus College)",
      "category": "systems"
    },
    {
      "book": "Open Data Structures: An Introduction",
      "url": "https://open.umn.edu/opentextbooks/textbooks/open-data-structures-an-introduction",
      "author": "Pat Morin (Carleton University)",
      "category": "datastructures"
    },
    {
      "book": "Foundations of Computation",
      "url": "https://open.umn.edu/opentextbooks/textbooks/foundations-of-computation",
      "author": "Carol Critchlow, David Eck (Hobart and William Smith Colleges)",
      "category": "introduction"
    },
    {
      "book": "Information Systems for Business and Beyond",
      "url": "https://open.umn.edu/opentextbooks/textbooks/information-systems-for-business-and-beyond",
      "author": "David T. Bourgeois (Biola University), James L. Smith, Joseph Mortati",
      "category": "misc"
    },
    {
      "book": "Programming Fundamentals - A Modular Structured Approach using C++",
      "url": "https://open.umn.edu/opentextbooks/textbooks/programming-fundamentals-a-modular-structured-approach-using-c",
      "author": "Kenneth Leroy Busbee (Houston Community College)",
      "category": "cprogramming"
    },
    {
      "book": "Algorithms and Data Structures With Applications to Graphics and Geometry",
      "url": "https://open.umn.edu/opentextbooks/textbooks/algorithms-and-data-structures-with-applications-to-graphics-and-geometry",
      "author": "Jurg Nievergelt (ETH Zurich), Klaus Hinrichs (University of Muenster)",
      "category": "algorithms, datastructures"
    },
    {
      "book": "Physical Modeling in MATLAB",
      "url": "https://open.umn.edu/opentextbooks/textbooks/physical-modeling-in-matlab",
      "author": "Allen B. Downey, (Franklin W. Olin College of Engineering)",
      "category": "matlab"
    },
    {
      "book": "The Little Book of Semaphores",
      "url": "https://open.umn.edu/opentextbooks/textbooks/the-little-book-of-semaphores",
      "author": "Allen B. Downey, (Franklin W. Olin College of Engineering)",
      "category": "misc"
    },
    {
      "book": "Essentials of Geographic Information Systems",
      "url": "https://open.umn.edu/opentextbooks/textbooks/essentials-of-geographic-information-systems",
      "author": "Jonathan Campbell, Michael Shin (UCLA)",
      "category": "gis"
    },
    {
      "book": "Information Systems: A Manager's Guide to Harnessing Technology",
      "url": "https://open.umn.edu/opentextbooks/textbooks/information-systems-a-manager-s-guide-to-harnessing-technology",
      "author": "University of Minnesota",
      "category": "systems"
    },
    {
      "book": "Data Structures and Algorithm Analysis",
      "url": "https://people.cs.vt.edu/~shaffer/Book/C++3elatest.pdf",
      "author": "Clifford A. Shaffer (Virginia Tech)",
      "category": "algorithms, datastructures"
    },
    {
      "book": "Building Blocks for Theoretical Computer Science",
      "url": "https://mfleck.cs.illinois.edu/building-blocks/",
      "author": "Margaret M. Fleck",
      "category": "theory"
    },
    {
      "book": "Open Data Structures (Java Edtition)",
      "url": "http://opendatastructures.org/ods-python/",
      "author": "Pat Morin (Carleton University)",
      "category": "java, datastructures"
    },
    {
      "book": "Open Data Structures (C++ Edition)",
      "url": "http://opendatastructures.org/ods-java/",
      "author": "Pat Morin (Carleton University)",
      "category": "cprogramming, datastructures"
    },
    {
      "book": "Open Data Structures (Pseudocode Edition)",
      "url": "http://opendatastructures.org/ods-cpp/",
      "author": "Pat Morin (Carleton University)",
      "category": "datastructures"
    },
    {
      "book": "Matters Computational",
      "url": "http://www.jjj.de/fxt/#fxtbook",
      "author": "Jörg Arndt",
      "category": "misc"
    },
    {
      "book": "Introduction to the Theory of Computation",
      "url": "https://cglab.ca/~michiel/TheoryOfComputation/TheoryOfComputation.pdf",
      "author": "Anil Maheshwari, Michiel Smid",
      "category": "theory"
    },
    {
      "book": "Calculus Made Easy",
      "url": "https://www.gutenberg.org/ebooks/33283",
      "author": "Silvanus P. Thompson",
      "category": "mathematics"
    },
    {
      "book": "Probabilistic Graphical Models: Principles and Techniques",
      "url": "https://djsaunde.github.io/read/books/pdfs/probabilistic%20graphical%20models.pdf",
      "author": "Daphne Koller and Nir Friedman",
      "category": "mathematics"
    },
    {
      "book": "Computer Graphics from Scratch",
      "url": "https://gabrielgambetta.com/computer-graphics-from-scratch/",
      "author": "Gabriel Gambetta",
      "category": "graphics"
    },
    {
      "book": "The Not So Short Introduction to LaTeX",
      "url": "https://tobi.oetiker.ch/lshort/lshort.pdf",
      "author": "Tobias Oetiker, Hubert Partl, Irene Hyna, Elisabeth Schlegl",
      "category": "introduction, latex"
    },
    {
      "book": "Advanced Linux Programming",
      "url": "https://mentorembedded.github.io/advancedlinuxprogramming/",
      "author": "CodeSourcery LLC",
      "category": "linux"
    },
    {
      "book": "Linux Fundamentals",
      "url": "http://linux-training.be/linuxfun.pdf",
      "author": "Paul Cobbaut",
      "category": "linux"
    },
    {
      "book": "An Interactive Introduction to MATLAB",
      "url": "http://www.science.smith.edu/~jcardell/Courses/EGR326/Intro-to-MATLAB.pdf",
      "author": "Craig Warren",
      "category": "introduction, matlab"
    },
    {
      "book": "Scientific Computing",
      "url": "https://www.math.ust.hk/~machas/scientific-computing.pdf",
      "author": "Jeffrey R. Chasnov",
      "category": "misc"
    },
    {
      "book": "The Little MongoDB Book",
      "url": "https://www.openmymind.net/2011/3/28/The-Little-MongoDB-Book/",
      "author": "Karl Seguin",
      "category": "mongodb, databases"
    },
    {
      "book": "The Little Redis Book",
      "url": "https://www.openmymind.net/2012/1/23/The-Little-Redis-Book/",
      "author": "Karl Seguin",
      "category": "redis, databases"
    },
    {
      "book": "Algorithms and Data Structures",
      "url": "https://people.inf.ethz.ch/wirth/AD.pdf",
      "author": "Nikalus Wirth",
      "category": "algorithms, datastructures"
    },
    {
      "book": "Explore Flask",
      "url": "https://exploreflask.com/en/latest/",
      "author": "Robert Picard",
      "category": "web, flask"
    },
    {
      "book": "Advanced R",
      "url": "http://adv-r.had.co.nz/",
      "author": "Hadley Wickham",
      "category": "rprogramming"
    },
    {
      "book": "Efficient R Programming",
      "url": "https://csgillespie.github.io/efficientR/index.html",
      "author": "Colin Gillespie, Robin Lovelace",
      "category": "rprogramming"
    },
    {
      "book": "Learning Statistics with R",
      "url": "https://learningstatisticswithr.com/book/",
      "author": "Danielle Navarro",
      "category": "rprogramming, statistics"
    }
  ]
}